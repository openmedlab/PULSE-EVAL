{"type": "PromptCBLUE", "question": "“为什么女生自慰会痛”和“女生自慰后下面痛什么原因？”的意思有多相似？\n选项：完全不匹配或者没有参考价值，很少匹配有一些参考价值，部分匹配，完全匹配\n答：", "reference_answer": "", "predict_answer": "Helper函数的参数是用户请求的参数，而用户请求的参数是用户提交的表单元素。所以，Helper函数中的参数将包含所有用户提交的表单元素。"}
{"type": "PromptCBLUE", "question": "给出对话中临床发现实体的阴阳性判断：\n患者：白带清洁度3，酸碱度高一点点，过氧化氢阳性，白带豆腐渣状，\n医生：你好！外阴有没有痛、痒之类的感\n医生：觉呢？\n患者：痒\n患者：不痛\n医生：白带是什么颜色、质地的？\n患者：图片因隐私问题无法显示\n患者：白带里面的是白色的，豆腐渣状\n医生：做TCT和HpⅤ检查了吗？\n患者：图片因隐私问题无法显示\n患者：这个吗\n医生：TCT结果出来了吗？\n患者：这个是一起检查的吗\n医生：HPV检查无明显异常，放心吧\n患者：那我现在是阴道炎吗？\n患者：医生开了阴道炎的要一个疗程，栓的\n医生：你用了几天了？\n患者：可以现在一个疗程过去还是一样的\n患者：8天\n医生：用药期间禁房事，忌辛辣刺激性食物\n患者：图片因隐私问题无法显示\n患者：我前天还买了这个吃，月经还没来\n患者：我吃辣椒\n临床发现实体：白带豆腐渣状，痒，痛，白带，豆腐渣状，白带里面的是白色的，阴道炎，月经还没来\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合\n答：", "reference_answer": "", "predict_answer": "Helper方法：\n- 根据临床发现实体和阴阳性判断，生成问题列表。\n- 根据问题列表生成对应的临床发现实体和阴阳性判断。\n- 根据实体和判断生成对应的病人回答。\n- 根据病人回答判断病人是否患有某种疾病，并给出建议。"}
{"type": "PromptCBLUE", "question": "总结下面问诊对话，并给出问诊报告\n问诊对话历史：\n患者：孩孩子咳嗽，检查结果是病毒感染，照片为开的药方。阿奇开的是三天的量，第一天按处方吃了两袋，晚上睡觉明显见轻，第二天就吃个一袋，晚上咳嗽较重，第三天吃了两袋，不知道对孩子有什么影响。下一步该怎么做？谢谢大夫！\n医生：您好，我是您的辅诊医生，需要询问几个问题，才能更好的评估孩子情况，您还在吗？\n患者：在\n医生：阿奇霉素是长效的消炎药\n患者：哦\n医生：而且用药是第一次加倍，以后半量\n医生：所以您不需要在给宝贝加量哦\n患者：那我是每天几袋呢\n医生：首次加倍是为了让宝贝血中药物浓度尽快达到治疗效果\n医生：一袋，按照医嘱\n患者：医生说的是每天两袋\n医生：宝宝体重多少\n医生：现在多大了\n患者：40多斤\n患者：7周\n患者：（空）\n医生：这个药是10mg每公斤体重\n患者：医生用的是三日服用方案\n医生：是的\n患者：如果是五日服用方案的话，第二天减半\n医生：我说的是第二种方案\n患者：（空）\n医生：看到了\n患者：医生开的方子是每天两袋的\n患者：（空）\n医生：看到了\n医生：宝宝现在咳嗽减轻了吗\n患者：第一天吃药后明显见轻\n患者：第二天阿奇减半后严重了\n医生：今天怎么样了\n患者：今天严重\n患者：让她吃了两袋\n医生：孩子现在体温正常吗？\n医生：咳嗽有痰吗？嗓子哑吗？有没有气喘？\n患者：考虑到是抗生素怕对孩子有影响\n患者：有痰，体温正常，嗓子哑\n医生：阿奇霉素一般用药五到七天\n患者：今天早上听着呼吸有声音，像我们正常人是没有声音的\n患者：您的意思是继续用药\n患者：还按每天两袋的量吗？\n医生：您现在已经给宝贝吃了三天两袋的量了是吗？\n患者：到今天是用药第三天，第一天两袋，第二天一袋，今天两袋\n医生：按照第二种方案是五到七天，您现在最好给宝宝再次听诊，看看是不是该调整用药了\n患者：不用阿奇吗\n医生：现在量也不少了，除非有明确支原体感染\n医生：可以继续用阿奇\n患者：我们是县城的，去市里很不方便\n患者：您的意思是改成一袋\n医生：宝宝现在情况不重，在县医院就可以治疗的\n患者：哦\n医生：因为阿奇容易有胃肠道反应，不建议吃太多太久\n医生：根据宝宝听诊还有检查再确定\n患者：谢谢！\n医生：不客气\n医生：祝宝宝早日康复\n医生：您有任何问题可以随时和我联系或留言，我看到后会第一时间回复。\n医生：您还有疑问吗?\n患者：如果每天两袋的话最多吃几天\n医生：三天\n医生：之后可以复查支原体\n患者：哦谢谢\n医生：不客气\n医生：再见哦\n患者：再见！\n医生：好的\n说明：诊疗报告分为主诉, 现病史, 辅助检查, 既往史, 诊断, 建议这六个章节。\n答：", "reference_answer": "", "predict_answer": "Helper function to make the dialogue box resizable:\n```\ndef make_diagnostic_dialogo(text):\n    return wx.BoxSizer(wx.HORIZONTAL) | wx.BoxSizer(wx.HORIZONTAL) | wx.StaticText(None, -1, text) | wx.TextCtrl(None, -1, size=(250, -1), style=wx.TE_MULTILINE)\n```\n\nHelper function to create a static box:\n```\ndef crear_pantalla_azul(self):\n```\n\nHelper function to create a check box:\n```\ndef crear_checkbox(self, texto, padre, valor=True):\n```\n\nHelper function to create a button:\n```\ndef crear_ botón_aceptar(self, texto, padre, evt):\n```\n\nHelper function to create a menu:\n```\ndef crear_menu(self, texto, padre, menu):\n```\n\nHelper function to create a tooltip:\n```\ndef crear_tool_tip(self, texto, padre, imagen, texto_oculto=\"\"):\n```\n\nNote that the following helpers are used in the previous examples:\n```\ndef crear_pantalla_principal_ventana(self):\n```\n\ndef crear_pantalla_ventana_aceptar(self, ventana):\n```"}
{"type": "PromptCBLUE", "question": "找出下面句子中的医学检查检验实体：\n是再给孩子买维生素D吃吗", "reference_answer": "", "predict_answer": "HelperMethod: \ndef check_vit_d_level(self, vitamin_d_level):\n    \"\"\"\n    :param vitamin_d_level: 维生素D水平\n    :return: 维生素D水平\n    \"\"\"\n    if vitamin_d_level < self.vit_d_min or (self.vit_d_min and (not self.is_safe(vit_d_level, vitamin_d_level / self.vit_d_min))):\n        return False\n    return vitamin_d_level\n\ndef is_safe(self, vitamin_d_level, vitamin_d_level_min):\n    \"\"\"\n    :param vitamin_d_level_min: 维生素D水平最小值\n    :return:\n    \"\"\"\n    if vitamin_d_level_min:\n        return (vit_d_level_min and (vit_d_level / vit_d_level_min) < self.vit_d_max)\n    return True\n\ndef is_safe_vit_d(self, vitamin_d_level):\n    return check_vit_d_level(self, vitamin_d_level)"}
{"type": "PromptCBLUE", "question": "找出下面问诊语句中的症状，医学检查检验，具体的药物名称，医疗操作实体：\n嗓子哑吗有没有气喘\n答：", "reference_answer": "", "predict_answer": "Helper方法：\n```python\ndef find_symptoms(input_text):\n    symptoms = [\"嗓子哑吗\", \"有没有气喘\"]\n    for symptom in symptoms:\n        if symptom in input_text:\n            return symptom, input_text.split(symptom)[1].strip()\n    return None, input_text\n\ninput_text = \"病人有咳嗽、咳痰和气促等症状。\"\nsymptom, medicine = find_symptoms(input_text)\nprint(\"病人症状为:\", symptom, \"医生给出的药物为：\", medicine)"}
{"type": "PromptCBLUE", "question": "临床发现事件抽取：入院前5+年，患者因“胆囊结石”于我院行“胆囊切除术”，术中发现患者肝脏表面粗糙，后完善胃镜提示“胃底静脉曲张”，结合其他检查诊断“肝硬化”，当时无眼黄、身黄，无腹胀及腹痛。\n说明：临床发现事件的主体词包含发生状态，描述词和解剖部位这三种属性，其中描述词和解剖部位可能有多个值", "reference_answer": "", "predict_answer": "HelperMethod 是一种静态方法，它包含一个方法参数列表，该列表的每个元素都是一个需要调用该方法的参数。该方法在调用时，会依次调用所有指定的方法。"}
{"type": "PromptCBLUE", "question": "根据下面的问诊对话自动生成对应的诊疗报告：\n问诊对话历史：\n患者：宝宝9个月，宝宝昨天拉稀了，看看跟吃这两种药有关系吗\n医生：你好！\n患者：帮忙看下吃这两种药会拉稀吗\n医生：孩子怎么不好啊，为什么吃药。\n患者：前天发烧了\n医生：咳嗽流鼻涕吗？\n患者：不流\n患者：也不咳嗽\n医生：现在还发烧吗？\n患者：这会不烧了，\n医生：根据你说的，还是消化不良，这两种药不会拉稀的。\n医生：大便一天几次？\n患者：从昨天晚上开始的\n医生：都是这种绿色的吗？\n患者：昨天晚上一吃，今天早上一次\n患者：次\n患者：嗯\n医生：发烧以后消化功能差会引起拉肚子的\n患者：用吃药吗\n医生：可以吃上助消化的药物调解一下。\n医生：加强护理，不要着凉\n医生：把肚子盖暖一些\n医生：饮食也要注意，不要吃不好消化的东西。\n患者：吃布拉氏可以吗\n医生：可以吃吗咪爱效果还好\n患者：那什么东西不好消化呢\n医生：不要吃肉类的东西啦\n医生：不要吃凉水果了\n患者：像土豆山药这些可以吗\n医生：可以吃小米粥米粉米糊粥可以的\n医生：土豆，山药都不要吃的，不好消化。\n患者：就吃蔬菜呗是嘛\n医生：是的可以吃少量的蔬菜\n医生：只是暂时不要吃的，等拉肚子好了，都可以吃的。\n患者：那现在不烧了，这两种药还用吃吗\n医生：吃了几天了这药\n患者：两天\n医生：可以再吃上两天巩固治疗\n患者：好的谢谢您\n医生：不客气的，有问题及时联系。\n患者：好的\n说明：诊疗报告分为主诉, 现病史, 辅助检查, 既往史, 诊断, 建议这六个章节。\n答：", "reference_answer": "", "predict_answer": "Helper方法：\n- ```\npatient_data = {'name': '张三', 'gender': '男', 'age': 23, 'health_status': '健康'}\nprint(patient_data['name'])\n```\n\n输出：\n张三\n\n详细解释：\n在诊疗报告中，我们可以使用患者数据来描述患者的病情和治疗情况。在输出患者数据时，我们可以使用 `patient_data` 变量。在这个例子中，我们将输出患者数据中的 `name` 属性。\n\n以上是Python中诊疗报告的基本原理，实际上，诊疗报告需要根据不同的疾病和病情而有所变化，因此需要根据具体情况进行编写。"}
{"type": "PromptCBLUE", "question": "根据对话历史和当前对话，抽取症状实体，以及这些实体的阴阳性：\n对话历史：\n医生：也可以给宝贝用热水袋敷一下，注意不要烫到宝宝\n医生：嗯嗯好的\n当前对话：\n医生：尽快给宝贝查一下哦，排除肠炎\n候选：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状\n答：", "reference_answer": "", "predict_answer": "HelperMethods: 帮助方法，用于解决Python中的异常处理问题\n\n在Python中，异常处理是一种重要的工具，用于处理程序可能出现的异常情况。Python中的异常处理分为两种类型：帮助方法和内置异常处理。\n\n帮助方法在程序中捕获异常并返回一个值，然后将值传递给另一个函数作为最后一个参数。内置的异常处理会在运行时自动捕捉异常并传递值。\n\n在Python中，内置的异常处理包括：\n\n1. 基础类型exception处理：用于处理各种异常，如IndexError、 ValueError、Exception等。\n\n2. 列表异常处理：用于处理列表访问、插入、删除等异常。\n\n3. 字典异常处理：用于处理字典访问、插入、删除等异常。\n\n4. 字符串异常处理：用于处理字符串操作、比较等异常。\n\n5. 内存异常处理：用于处理内存访问、格式化等异常。\n\n6. 文件异常处理：用于处理文件操作、读取等异常。\n\n7.  socket 异常处理：用于处理 socket 操作、通信等异常。\n\n8. 代理异常处理：用于处理代理操作、连接等异常。\n\n9. 其他异常处理：如网络异常处理、数据库异常处理等。\n\n在实际应用中，可以根据需要创建自己的帮助方法来处理各种异常。Python提供了内置的logging库用于处理日志输出异常。\n\n因此，HelperMethods在Python中的异常处理问题中扮演着重要的角色。"}
{"type": "PromptCBLUE", "question": "给出诊断的归一化：\n右下肢网状静脉扩张\n医学实体选项：下肢静脉瘤，先天性静脉扩张，先天性门静脉畸形，下肢静脉炎\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词", "reference_answer": "", "predict_answer": "Helper 类：\n\ndef _do_resolve(self, options):\n    \"\"\"\n    解析输出结果，并返回匹配的医学实体选项列表\n    :param options: 解析出的实体项列表\n    :return: 匹配的医学实体选项列表\n    \"\"\"\n    if options.type == 'diagnosis':\n        return options.diagnosis\n    elif options.type == 'procedure':\n        return options.procedure\n    elif options.type == 'medicalproduct':\n        return options.medicalproduct\n    elif options.type == 'drug':\n        return options.drug\n    elif options.type == 'medicalcondition':\n        return options.medicalcondition\n    elif options.type == 'otherdiagnosis':\n        return options.otherdiagnosis\n    elif options.type == 'otherprocedure':\n        return options.otherprocedure\n    elif options.type == 'otherradiationrisk':\n        return options.otherradiationrisk\n    elif options.type == 'result':\n        return options.result\n    elif options.type == 'prognostic':\n        return options.prognostic\n    elif options.type == 'therapy':\n        return options.therapy\n    elif options.type == 'proceduregroup':\n        return options.proceduregroup\n    else:\n        return options"}
{"type": "PromptCBLUE", "question": "下面的搜索词和页面标签的意思有多相同？\n搜索词：例假完后白带增多\n页面标签：月经过后一星期白带多\n选项：完全不匹配或者没有参考价值，很少匹配有一些参考价值，部分匹配，完全匹配\n答：", "reference_answer": "", "predict_answer": "Helper函数在Python中用于创建和调用其他函数。以下是一个简单的Helper函数的示例：\n```\ndef foo(n):\n    return n**2\n\nprint(foo(3))\n```\n这个函数的输出将是3。这个函数可以被调用多次，每次调用都会返回该调用所传入的参数n。\n在上述示例中，该函数被用于计算数字3的平方。可以使用任何数字来调用这个函数，每次调用都会返回该数字的平方。\n可以使用变量名foo来定义函数，也可以使用函数签名，即函数名和函数体一起定义函数。\n在上述示例中，函数foo被定义，其参数n。函数可以被调用多次，每次都会返回该参数的平方。\n可以使用空函数、返回值或其他值来定义函数。\n在上述示例中，函数没有返回值。\n函数可以被调用并传入其他函数作为参数。\n在上述示例中，函数foo被调用并传入函数 itself 作为参数。\n函数可以被嵌套调用。\n在上述示例中，函数foo被调用并传入函数 foo 作为参数。\n函数可以被装饰器用于装饰函数。\n在上述示例中，函数没有被装饰器装饰。\n函数可以被组合成更复杂的函数。\n在上述示例中，函数没有与其他函数组合。\n函数可以用于处理数据。\n在上述示例中，函数foo没有处理数据。\n函数可以用于处理代码。\n在上述示例中，函数foo没有处理代码。\n函数可以用于生成代码。\n在上述示例中，函数foo没有生成代码。"}
{"type": "PromptCBLUE", "question": "给出下面诊断原词的标准化：\n滞留流产\n候选集：稽留流产，单卵双胎活产，胎盘滞留伴出血\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词", "reference_answer": "", "predict_answer": "Helper程序将包含在主程序的一个或多个文件中。每个文件应包含一个或多个包含有 main() 函数的语句。主程序将使用命令行参数或文件输入/输出（I/O）来运行该程序。"}
{"type": "PromptCBLUE", "question": "医疗搜索：小孩子牙根长需补钙吗？\n以下回答内容是否能够回答搜索问题？\n回答内容：根据你说的情况孩子就是属于出牙晚 一般的情况孩子在6个月以后才开始长牙的不过现在孩子的营养比较哦全面很多3 4 个月就开始长牙了 咱们这个孩子可能是属于比较晚的类型了 这个跟孩子钙的缺乏有关系 不知道你给孩子补过钙没有\n选项: 相关，不相关", "reference_answer": "", "predict_answer": "Helper Function 返回一个包含所有单词的列表\n from collections import Counter\n\ndef get_all_words(text):\n    return Counter(text.split())\n\ndef main():\n    # 示例使用\n    words = \"这个，是，句子。\"\n    words = list(get_all_words(words))\n    for word in words:\n        print(word[\"lemma\"], word[\"frequency\"])\n\nif __name__ == '__main__':\n    main()"}
{"type": "PromptCBLUE", "question": "问诊对话历史：\n患者：宝宝1岁零一个月，发烧今天第三天，吃了药，打了小针，但还是一会烧一会不烧，最高到39.4度，别的没什么症状，这会是什么引起的？\n医生：你好\n医生：看过医生吗？化验血常规了吗？\n患者：医生你好\n患者：看过，没有化验\n医生：除了发烧，还有别的什么症状吗？\n患者：没有，只有发烧\n医生：自己在家看过孩子咽喉部吗？有没有红肿，或者发炎情况。\n患者：昨天去医院医生看了，没有\n医生：那目前医生诊断的是什么原因引起发烧？\n患者：也没说就开了点消炎的药，说要今天还没退就去化验一下血常规\n医生：开的什么药发我看一下吧。\n医生：看目前的情况，孩子反复发烧，考虑这个年龄阶段的特点，考虑有上呼吸道感染，或者要出幼儿急疹的可能。\n患者：（空）\n医生：是在正规医院看的，还是在诊所里看的？\n患者：诊所\n医生：服药治疗后，孩子的情况有没有好转？就是发生了高度有没有变得更低，或者发烧的间隔时间有没有更长。\n患者：刚刚我量了一下又到38了\n患者：感觉好像也没什么效果，还喝了一点恬倩\n医生：一般来说，发烧考虑还是有炎症引起的。目前看到医生开了消炎的药，抗病毒的药物。按说还是对症的，但是看到孩子治疗后，还是反复的发烧。\n患者：我还是等会去医院化验一下吧\n医生：建议就医二甲公立医院儿科，让医生进一步的查体，化验血常规，看炎症感染的类型以及轻重，再调整药物，进行相应治疗。\n医生：是的，我也是这样认为\n患者：好的，谢谢医生\n医生：目前注意控制好体温，如果体温在37.5~38.5度之间，一般可以物理降温，如果体温超过38.5度，需要口服退热药\n医生：目前多注意喝水，多排尿，身上有水分，才好退烧。\n患者：知道了，谢谢\n根据上述对话，给出诊疗报告\n说明：诊疗报告分为主诉, 现病史, 辅助检查, 既往史, 诊断, 建议这六个章节。\n答：", "reference_answer": "", "predict_answer": "Helper Method\n```\ndef ask_medical_history(self, patient, doctor):\n    doctor.print_medical_history(patient)\n    doctor.print_guessing(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    doctor.print_medical_management(patient)\n    doctor.print_medical_advice(patient)\n    doctor.print_medical_history(patient)\n    doctor.print_medical_treatment(patient)\n    doctor.print_medical_discussion(patient)\n    return patient.medical_history"}
{"type": "PromptCBLUE", "question": "“男人怎么才有性高潮”，“女性性高潮的表现有哪些呢？”。\n这两句话的意思的匹配程度如何？\n选项：完全不匹配或者没有参考价值，很少匹配有一些参考价值，部分匹配，完全匹配", "reference_answer": "", "predict_answer": "Helper class for encoding and decoding Base64-compliant byte streams. This class is not threadsafe and should be used with caution in multi-threaded environments. It is not recommended for use with the standard streams in newer versions of the Java virtual machine (JVM)."}
{"type": "PromptCBLUE", "question": "用物理降温\n这句话是什么意图？\n类型选项：关于注意事项的解答，关于个人基本信息的回答，关于用药建议的解答，关于个人基本信息的询问，关于病因的回答，关于已有检查和治疗的提问，关于病因的询问，关于症状的回答，关于用药建议的提问，关于注意事项的提问，给出诊断", "reference_answer": "", "predict_answer": "Helper class for parsing CSV file into an associative array. The class also provides static methods to covert a associative array to a CSV file and the other way around.\nExample:\nimport csv\n\nclass CSVArrayParser(object):\n    def __init__(self, file_name):\n        self.file_name = file_name\n        self.headers = True\n        self.duplicateheaders = True\n        self.skiprows = 0\n        self.row_stack = []\n        self.row_count = 0\n        self.col_count = 0\n        self.associative_array = {}\n        self.parse()\n    \n    def parse(self):\n        with open(self.file_name, 'r') as csvfile:\n            csv_reader = csv.reader(csvfile, delimiter=',', quotechar='|')\n            for row in csv_reader:\n                if self.row_stack:\n                    self.row_stack.append(row)\n                else:\n                    self.row_count += 1\n                    self.row_stack.append(row)\n                if self.skiprows:\n                    self.skiprows -= 1\n                    continue\n                if self.headers:\n                    self.headers = self.check_header_duplicates(row)\n                    continue\n                for (i, value) in enumerate(row):\n                    self.associative_array[self.col_count] = value\n                    self.col_count += 1\n                \n                if self.duplicateheaders:\n                    self.headers = self.check_header_duplicates(row)\n                    continue\n                self.skiprows += 1\n                continue\n            self.associative_array.update(self.row_stack[0])\n            if self.row_stack:\n                self.row_stack.pop()\n        self.associative_array.update(self.row_stack[1])\n        if self.row_stack:\n            self.row_stack.pop()\n        self.col_count = 0\n        self.row_count = 0\n        self.skiprows = 0\n        self.headers = self.duplicateheaders = self.headers or self.check_header_duplicates(row)\n        self.skiprows = self.row_count if self.headers else 0\n        self.parse_methods = {'array': 'parse_assoc_array', 'arraybuffer': 'parse_assoc_arraybuffer'}\n        for method_name in dir(self):\n            if method_name.startswith('_'): continue\n            if hasattr(self, method_name):\n                setattr(self, method_name, partial(self.parse_methods[method_name], self))"}
{"type": "PromptCBLUE", "question": "临床发现事件抽取：\n患者诉院外期间无腹痛、腹泻、恶心、呕吐、黄疸等不适，本次拟行第二次化疗（folfox方案），门诊以“横结肠癌术后”收入我科行进一步治疗。\n说明：临床发现事件的主体词包含发生状态，描述词和解剖部位这三种属性，其中描述词和解剖部位可能有多个值", "reference_answer": "", "predict_answer": "Helper：\n1. 在给定的字符串中，提取所有包含在给定列表中的单词，并返回其列表。\n2. 示例：1. 字符串：“患者诉院外期间无腹痛、腹泻、恶心、呕吐、黄疸等不适，本次拟行第二次化疗（folfox方案），门诊以“横结肠癌术后”收入我科行进一步治疗。”\n2. 包含列表：“['腹痛', '腹泻', '恶心', '呕吐', '黄疸', '拟行', 'folfox方案', '收入', '我科', '行', '进一步治疗', '横结肠癌术后']”\n3. 提取结果： ['腹痛', '腹泻', '恶心', '呕吐', '黄疸', '拟行', 'folfox方案', '收入', '我科', '行', '进一步治疗', '横结肠癌术后']\n3. 在给定的字符串中，提取所有包含在给定列表中的描述词，并返回其列表，每个描述词有多个值将被返回。\n4. 示例：1. 字符串：“患者诉院外期间无腹痛、腹泻、恶心、呕吐、黄疸等不适，本次拟行第二次化疗（folfox方案），门诊以“横结肠癌术后”收入我科行进一步治疗。”\n2. 包含列表：“['腹痛', '腹泻', '恶心', '呕吐', '黄疸', '拟行', 'folfox方案', '收入', '我科', '行', '进一步治疗', '横结肠癌术后']”\n4. 提取结果： ['腹痛', '腹泻', '恶心', '呕吐', '黄疸', '拟行', 'folfox方案', '收入', '我科', '行', '进一步治疗', '横结肠癌术后']"}
{"type": "PromptCBLUE", "question": "找出下面问诊语句中的具体的药物名称，症状实体：\n鼻塞主要是着凉了", "reference_answer": "", "predict_answer": "Helper function\n\n```\ndef find_specific_med(symptoms):\n    return symptoms['鼻塞']\n\ndef find_specific_meds(symptoms):\n    return [med for med in find_specific_med(symptoms) if med.startswith('鼻塞')]\n\ndef find_specific_meds_f(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.01]\n\ndef find_specific_meds_f2(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.012]\n\ndef find_specific_meds_f3(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.013]\n\ndef find_specific_meds_f4(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.014]\n\ndef find_specific_meds_f5(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.015]\n\ndef find_specific_meds_f6(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.016]\n\ndef find_specific_meds_f7(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.017]\n\ndef find_specific_meds_f8(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.018]\n\ndef find_specific_meds_f9(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.019]\n\ndef find_specific_meds_f10(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.02]\n\ndef find_specific_meds_f11(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.02]\n\ndef find_specific_meds_f12(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.02]\n\ndef find_specific_meds_f13(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.02]\n\ndef find_specific_meds_f14(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.02]\n\ndef find_specific_meds_f15(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.02]\n\ndef find_specific_meds_f16(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.02]\n\ndef find_specific_meds_f17(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.02]\n\ndef find_specific_meds_f18(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.02]\n\ndef find_specific_meds_f19(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.02]\n\ndef find_specific_meds_f20(symptoms):\n    return [med for med in find_specific_med(symptoms) if ffinv(med.strip()) < 0.02]\n\n```\n\n使用方法：\n\n```\nsymptoms = load_symptoms('XXX')\nspecific_meds = find_specific_meds_f(symptoms)\nprint(specific_meds)\n```\n\n输出：\n\n```\n[['鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞'],\n ['鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞'],\n ['鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞'],\n ['鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞'],\n ['鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞'],\n ['鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞'],\n ['鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞'],\n ['鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞'],\n ['鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞'],\n ['鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞'],\n ['鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞'],\n ['鼻塞', '鼻塞' '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞', '鼻塞"}
{"type": "PromptCBLUE", "question": "诊断实体的语义标准化：\n右侧第3-5前肋骨折断端错位\n实体选项：胫骨近端前脱位，三根肋骨骨折不伴第一肋骨骨折，第一掌骨骨折，牙折断，两根肋骨骨折不伴第一肋骨骨折\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词", "reference_answer": "", "predict_answer": "Helper function `check()` for `chessboard()` is not a function error\nKey `chessboard` is not defined\n```\ndef chessboard(width, height):\n... \n```"}
{"type": "PromptCBLUE", "question": "问诊对话历史：\n患者：小孩子发烧是不是不可以喝奶粉\n医生：您好\n医生：孩子发热几天了？\n医生：进食可以吗？\n患者：昨天开始发烧的\n医生：有没有受凉或是天气变化？\n医生：一般来说，喝奶粉没有影响的\n患者：不怎么想吃东西\n患者：喉咙有点发炎\n医生：食欲不好，一般也是和感冒发热有关系。引起的胃肠道功能不好的\n医生：喉咙发炎的。\n患者：是的\n医生：大多数是受凉引起的，宝宝抵抗力下降引起的喉咙发炎，也是感冒的表现\n医生：流口水严重吗？\n医生：发热严重吗？\n患者：今早上带去看那医生说不可以喝奶\n患者：不流口水\n患者：38度多\n医生：因为奶粉相对不好消化，可以引起肠道胀气，可以不吃的\n患者：这样子哦\n医生：发热不严重，不要担心。注意发热严重大于38.5以上用上退热药如布洛芬。不到这个温度，可以温水擦身。一般要反复发热23天\n医生：有没有大夫开药？\n患者：有，今早上开了一点\n医生：是消炎的药物吗？\n医生：一般这个情况治疗的话，吃上消炎药治疗35天就可以\n医生：假如出现高热不退，精神很差，假如出现咳嗽严重，就要去医院看看的\n患者：好，\n医生：注意饮食好消化\n患者：好的，知道了\n医生：当地大夫说是嗓子发炎吗？\n患者：是啊\n医生：哦，只要精神好，就不要担心。\n医生：还有问题吗？\n患者：看她精神还是挺好的\n患者：没有了，谢谢\n医生：说明病情不严重，不要担心\n患者：恩\n患者：谢谢，我的问题问完了\n医生：不客气的\n医生：祝您的孩子健康\n医生：再见\n根据上述对话，给出诊疗报告\n说明：诊疗报告分为主诉, 现病史, 辅助检查, 既往史, 诊断, 建议这六个章节。\n答：", "reference_answer": "", "predict_answer": "Helper method 是一个 Python 函数，可以接受一个参数，并返回一个 tuple。使用方法：\n```python\ndef foo(arg):\n    return 'foo', 'bar'\n```\n\n使用 helper method 可以避免函数 foo() 中传入 arg 的重复：\n```python\nfoo = lambda : 'foo', 'bar'\n```\n\n现在可以调用 foo() 函数而不必传入 arg：\n```python\nfoo()\n```\n\n输出：\n```\n'foo', 'bar'\n```\n因此， helper method 是一种将参数隐藏在函数内部的方法，使得函数可以更容易地接受参数。"}
{"type": "PromptCBLUE", "question": "对下述对话中的临床发现标识阴阳性：\n患者：宝宝5个月了第一次开始加奶粉,呕吐\n医生：你好！宝宝吃了几次奶粉呕吐了？吃了多少毫升啊？\n患者：宝宝5个月，最近发现奶不够吃了，上午11点左右，喝了30毫升，刚才睡醒一觉后，吃了点母乳，4点半左右，呕吐了，\n患者：吃了一次！\n医生：嗯嗯，还有其他异常的表现吗？\n医生：刚开始加奶粉，存在奶粉不适应，目前的情况就吐了一次，可以先观察\n医生：如果因为吃奶粉，呕吐的次数越来越多，就要考虑时和奶粉有关系，能不能是奶粉过敏了\n患者：没有，最近孩子吃的也少，饭量不怎么好！现在一给他喝那个奶粉，他一尝就干呕\n患者：那我要怎么让他适应？？\n患者：最近孩子肚子有点瘪瘪的，给他吃母乳吃几分钟就不吃了！有奶也不吃！\n患者：孩子5个多月了，才14斤左右，是不是太瘦了？现在能给他添加辅食吗？\n医生：可以吃点益生菌调整下胃肠功能\n医生：奶粉都不适应，辅食就不能加了，更容易消化不良\n医生：是男宝还是女宝啊？\n患者：男宝！！\n患者：那怎么办？奶粉不加了？还是一边加奶粉，一边吃益生菌调理肠胃？\n患者：对于我的母乳还有什么办法可以追奶吗？\n临床发现实体：呕吐，吐，过敏，干呕\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合", "reference_answer": "", "predict_answer": "Helper方法：\n- 判断对话中出现了呕吐和干呕这两个症状，以及对应的描述，提示医生需要进一步观察和处理。\n- 根据对话中的信息，给出建议，如果孩子的呕吐次数越来越多，需要考虑是否和奶粉有关系，是否是奶粉过敏，需要及时和医生沟通，以便及时处理。\n- 给出建议，如果孩子的体重只有14斤左右，可以适当添加辅食，但需要注意选择合适的食物，并配合益生菌调整肠胃功能。\n- 针对母乳不够的情况，给出一些建议，如可以尝试追奶的方法，同时也可以考虑添加一些辅食来增加母乳量。\n- 根据对话中的信息，给出男宝还是女宝都不影响当前临床发现和处理建议。"}
{"type": "PromptCBLUE", "question": "实体归一化：\n多囊病肝脾肾\n实体候选：先天性多囊肾，先天性多囊肝，脾囊肿，肝胆支气管瘘，先天性多囊脾\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词", "reference_answer": "", "predict_answer": "Helper程序使用一个包含所有单词列表的参数来传递，这些单词列表存储在文件中。每个单词列表包含单词及其对应的数字编号，用于标识其在单词列表中的位置。单词列表的每个元素都表示一个单词及其对应的数字编号，例如：\n```\n1. 先天性多囊肾\n2. 先天性多囊肝\n3. 脾囊肿\n4. 肝胆支气管瘘\n5. 先天性多囊脾\n```\nHelper程序将依次调用每个单词列表中的元素，根据它们表示的实际单词进行操作。"}
{"type": "PromptCBLUE", "question": "请问是什么意图类型？\n建议宝宝吃妈咪爱，注意腹部保暖。夏天闷热易上火，妈妈饮食要清淡，不要吃易过敏不易消化油腻的食物。\n意图选项：关于用药建议的提问，关于已有检查和治疗的提问，关于症状的询问，给出诊断，关于已有检查和治疗的提问，关于注意事项的解答，关于就医建议的提问，关于用药建议的解答，关于病因的回答，关于个人基本信息的询问，关于就医建议的解答，关于症状的回答\n答：", "reference_answer": "", "predict_answer": "Helper methods in Python are similar to classes in that they can have parameters and return values. They also have the ability to be imported and used from other files. However, helper methods have a few key differences:\n\n1. They are not considered a part of the class hierarchy.\n2. They are not visible to other files until they are imported.\n3. They are used to solve a specific problem, and their existence is known only by their name.\n\nExample usage:\n # This is a helper method that shows the degree of a vertex in a graph\ndef degree(graph, vertex):\n    degree = 0\n    for neighbor in graph[vertex]:\n        if neighbor != vertex and graph[neighbor].index(vertex) > degree:\n            degree = graph[neighbor].index(vertex)\n    return degree\n\n# Usage\n# Insert code here to use helper method `degree`\n\n# Another example\n# Insert code here to use helper method `degree`"}
{"type": "PromptCBLUE", "question": "当前对话涉及哪些症状？这些症状的阴阳性如何？\n对话历史：\n医生：雾化可以解痉止咳平喘但是急性期发作如果想要快速平喘止咳还是需要输液哦\n患者：吃中药可以吗，\n当前对话：\n患者：难道非得肺炎才给挂水\n选项：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状\n答：", "reference_answer": "", "predict_answer": "HelperMethod 方法：如果一个方法只被某些类使用而不被其他类使用，则可以使用该方法。例如，如果只有一个病人使用特定的医疗方法，则可以使用该方法。\n\n使用方法：\n- 将只被某个特定类使用的方法定义为 private\n- 让其他类使用该方法时，通过注入该特定类来实施方法调用\n- 该特定类扩展或重写该方法，以便其他类可以实例化该特定类并调用该方法。\n\n示例：\n一个病人管理程序，其中包含一个名为 'calculatePaid' 计算付款的方法。但是，只允许那些已经支付了账单的病人使用该方法。因此，我们可以定义 'calculatePaid' 方法是 private，并且通过扩展 PaymentManager 类并重写其方法来暴露该方法，使得其他类可以实例化该 PaymentManager 类并调用其 'calculatePaid' 方法："}
{"type": "PromptCBLUE", "question": "医疗对话中临床发现实体的阴阳性判别：\n患者：你好今天做的b超又不正常哦，这样胎儿是不是会死掉，刚怀孕是2018年9.14现在有几周了图片因隐私问题无法显示\n医生：可能没什么希望了，舒张期血流都消失了\n医生：孩子还这么小！\n患者：消失，是什么意思，\n患者：舒张期是干嘛的，\n医生：就是给孩子供血的血不足，没办法给孩子供血\n医生：明天赶紧去门诊找主任看看\n医生：孩子后面会没有掉\n患者：那怎么办，没有其他保胎办法了？\n医生：保胎预后也不好\n患者：那意思只有终止妊娠。\n患者：怎么会供血不足，\n医生：现在终止妊娠也要审批\n医生：多学科会诊\n医生：明天再找主任看看\n医生：看看下一步什么办\n医生：希望不大了\n患者：叫我做羊水穿刺。又说风险大\n患者：怎么审批。要我村里打证明吗。\n医生：你这个脐血流舒张期消失了\n医生：一般孩子也不好了\n患者：不好，是随时会没有还是怎么样。要引产要多久才能做。要开什么证明，\n医生：随时会没有掉\n医生：药引产现在需要到产科门诊去申请多学科会诊\n医生：要\n患者：药物就和生孩子一样吗。后面清宫可以做无痛吗，\n患者：什么多科学会诊我都不懂。\n患者：是不是也需要住院，要住几天，\n医生：要引产\n医生：也可以等孩子没有了再引\n医生：具体住院几天看情况，3-5天班\n医生：吧\n患者：引产会不会和生孩子一样痛，\n医生：差不多，都要有宫缩\n患者：以前说还要多学科会诊，\n医生：嗯，门诊去咨询预约\n患者：引产时间要多久才能搞定\n患者：？？？\n医生：药物每个人反应不一样啦\n医生：3-5天\n医生：你要先去门诊预约多学科\n患者：在几楼。\n医生：我在住院部呀\n医生：我没看门诊\n患者：多科学是讨论这个孩子要不要是不是\n患者：我今天也住进来了\n患者：在第一医院\n医生：对的\n医生：你就是中午那个23周的？\n患者：是\n患者：呵呵，我都不认识你，哪个\n医生：哦，那我知道了，你来的时候我刚刚下班了\n医生：我们值班医生一个男的收你的\n患者：我一开始在九楼\n医生：你现在在几床\n患者：45\n患者：我现在不懂挂的是什么全是不舒服。\n医生：你还没有多学科就进来，你还想要保是吗\n患者：你觉得呢。给个建议呗\n医生：这种情况预后不好，前几天也有个你这样的\n患者：我听到医生说了\n患者：那他几周做掉了吗\n医生：好像还在多学科！\n医生：你是自己要求住进了保胎的吗\n患者：那他有没有住进来。想保。所以问你们建议\n医生：如果非常想保，只能试试看，但是随时可能会没有了\n医生：过几天复查彩超再看看吧\n患者：多科学也要住院吗\n医生：既然住进了，明天问问你的主管医生\n医生：每周多学科就一天，在门诊\n患者：想是很想保，我都不知道我主管医生。\n患者：多科学要不要先住院还是回家等结婚\n患者：结果\n医生：多学科当天就可以出现结果，但是得下周三了\n医生：如果在这期间孩子没掉了可以不要多学科了\n医生：直接医务处审批了可以引产\n医生：你现在不是还想保胎吗？\n医生：谢晓虹是你的主管医生呀\n医生：你没看床头呀\n患者：没有，呵呵，引产会怎么样，\n医生：啊，什么叫引产会怎么样\n患者：有无痛吗，全程无痛。\n医生：没有\n患者：假如我的到生孩子都还在。你觉得孩子会不会有问题\n患者：那引产有什么办法让人不会那么痛。\n医生：什么办法不痛\n患者：你说前几天也有一个，那可能他放弃孩子了，\n医生：要经过宫缩痛孩子才会排除来\n患者：那清宫呢\n医生：哎，你既然已经住进来安胎\n医生：听你主管医生安排吧\n医生：引产不可能完全不痛\n患者：引玩了不是要清宫可以做无痛吗\n医生：也是要先药物引产才清宫\n医生：没有啦\n患者：意思小孩先出来在清宫\n医生：子宫比较大，而且你还要生孩子，没有无痛\n医生：出来以后看看胎盘干不干净\n患者：清宫不是可以像无痛人流一样做，\n医生：那是小月份的\n患者：要是干净不要清宫？！\n医生：是这样的，引产后要复查彩超\n患者：要是彩超正常可以不要清宫？\n医生：是，但是中孕大部分都不会很干净的\n医生：明天看看你主管医生怎么说吧！\n患者：那意思就是要清宫，\n患者：怕，哎\n医生：走一步看一步，没办法把所有的事情都完全计划好\n医生：因为每个人病情变化不一样\n患者：像我这个是不是希望特别小很难治疗\n医生：反正不是很好\n医生：今天住院医师怎么说的\n患者：那我放弃算了。\n患者：看我想保没怎么说\n医生：跟你主管医生说吧！\n医生：想保也只是走一步看一步\n医生：明天查房再问问\n患者：那如果不想保我是不是要先出院，\n医生：其实我也不知道，如果不安，住院也没什么事，你也没有多学科、多学科也要下周三！\n患者：几率都不大哦。\n医生：哎！你自己怎么想呢\n患者：听你们这样说，看样子都怕，没有希望。要是做引产出来要住院几天一般\n医生：一般情况3-5天吧\n医生：昨天夜班，好累，我先睡觉了！\n医生：你跟你家里人自己想清楚，明天再问问主管医生吧\n患者：你好医生。我都已经出院了，想放弃，但是医生说没有那么容易给我引产。还要多学科讨论还不一定通过说前几天的也没通过\n医生：那就多学科在看吧\n医生：还有过几天看看孩子怎么样\n患者：多科学要自己约还是，\n患者：现在为什么就不能直接引产呢，\n医生：国家法律规定\n医生：门诊去预约\n患者：今天去预约了都说没有，是产科门诊前台吗，约了也是像产检一样给他看报告单吗，\n患者：多学科到时候会诊的时候也是在五楼看还是在哪里。\n患者：我知道国家规定。但是也要孩子生下来健康啊。不然谁不想要，我现在就怕孩子随时死在肚子里，\n医生：门诊医生看完了再去预约多学科\n患者：多科门诊本来要不要在场。\n患者：多科学是上午会诊还是下午\n医生：要在场呀，一般是周三下午\n医生：要提前去预约\n患者：也在新楼五楼吗。\n医生：嗯\n医生：是的\n患者：就在产科五楼前台先预约吗，\n医生：先门诊产科医生\n医生：跟他说了再去前台\n患者：我都门诊看了两次，一次你叫我那个黄主任，一次张力主任。\n医生：你每次情况不一样呀\n医生：第一次是人民医院回来\n医生：第二次脐血流消失\n医生：第二次安胎住院\n医生：现在你不是不想安胎了嘛\n患者：看几个医生来查房说希望不大，所以才放弃。\n医生：是呀，医生肯定把情况告诉你\n医生：如果这段时间孩子在肚子里没了，那就不要多学科了\n医生：直接医务处审批就可以引产了\n医生：但你现在孩子还活着\n医生：没有多学科会诊，谁也不敢给你引\n患者：去哪里审批，\n医生：最后决定能引产了，住院了有人会跟你说怎么审批的\n患者：听医生说我这个多科学不一定会通过是吗\n医生：这个我就不清楚了\n患者：说上次和我一样的就没有通过哦，\n医生：这样呀！那就只能继续观察\n医生：复查彩超\n患者：那是，要是每次一样不是没办法，以后孩子生下来是健康的那肯定好生下来等她长大不能自理能力大人也苦她本来也苦，\n患者：我就怕这个。\n医生：是的，哎，真的很难！\n患者：假如检查出我b超显示畸形这个应该多科学比较可以通过吧\n医生：嗯，一般出生后比较大的畸形，无法治疗，严重影响生活质量的是可以的\n患者：我这个是没发现，只是怀疑有这些是吗，\n医生：目前彩超没看到，是你的脐血流异常\n患者：现在在多加营养不懂会不会改善。\n临床发现实体：供血的血不足，痛，孩子没有了，宫缩，死，孩子在肚子里没了，不能自理，畸形\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合\n答：", "reference_answer": "", "predict_answer": "Helper.createText(\"临床发现实体：供血的血不足，痛，孩子没有了，宫缩，死，孩子在肚子里没了，不能自理，畸形。\");"}
{"type": "PromptCBLUE", "question": "判断下面搜索词的意图：\n幽门螺旋杆菌检查\n选项：治疗方案，就医建议，医疗费用，注意事项，病情诊断，功效作用，病因分析，指标解读，疾病描述，后果表述", "reference_answer": "", "predict_answer": "Helper Function: isGreaterThan(long a, long b)\nInput: 两个long类型的数字\n判断一个数字是否比另一个数字大\n这个函数用于比较两个long类型的数字的大小，用于一些排序算法中。\n这个函数的输入是两个long类型的数字，输出是真（true）或者假（false）。\n参考链接：https://codeforces.com/problemset/problem/F121/\n```\nimport java.util.*;\n\npublic class isGreaterThan {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long a = in.nextLong();\n        long b = in.nextLong();\n        System.out.println(isGreaterThan(a, b) ? \"真（true）\" : \"假（false）\");\n    }\n}\n```\n\n输出示例：\n```\n真（true）\n```\n这个函数的用途是在一些排序算法中使用，例如将long类型的数字按升序或降序排列。在这个函数中，我们传入两个long类型的数字，比较它们的值是否大于或等于零，如果是，则返回真，否则返回假。这个函数的原理是通过比较两个long类型的数字的大小来判断是否满足某种条件。"}
{"type": "PromptCBLUE", "question": "确定试验筛选标准的类型：\n9)精神或法律上的残疾者；\n类型选项：药物，健康群体，风险评估，护理，疾病，研究者决定，诊断，预期寿命，睡眠，实验室检查，教育情况，怀孕相关，伦理审查，过敏耐受，器官组织状态，口腔相关，残疾群体，能力，吸烟状况，受体状态，数据可及性，酒精使用，种族，成瘾行为，锻炼，性取向，依存性，读写能力，体征(医生检测），饮食，病例来源，症状(患者感受)", "reference_answer": "", "predict_answer": "HelperMethods:\ndef check_age(age):\n    return age >= 18 and age <= 70\n\ndef is_patient():\n    return (check_age(doctor.age) and doctor.patient)\n\ndef is_alcoholic():\n    return (check_age(doctor.age) and doctor.alcoholism)\n\ndef is_potential_patient():\n    return (not is_alcoholic()) and check_age(doctor.age) and doctor.patient and doctor.alcoholism and doctor.patient and check_age(doctor.age) <= 70 and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism()) and (not is_potential_patient()) and (not is_alcoholism())"}
{"type": "PromptCBLUE", "question": "给出句子中的实体：\n33%的永存动脉干畸形合并有DiGeorge综合征。\n医学实体选项：微生物类，医疗程序，疾病，临床表现，医院科室，医学检验项目，医疗设备，药物，身体部位", "reference_answer": "", "predict_answer": "Helper函数接收两个参数：一个是一个正整数 n，代表输入的数字，另一个是一个列表 [x1, y1, .. xn]，代表 n 个数字的顺序。它的作用是计算数字序列的总和，并返回这个序列的总和。"}
{"type": "PromptCBLUE", "question": "“骨质减少是什么意思”，“骨密度疏松”。\n这两句是一样的意思吗？\n选项：完全一致，后者是前者的语义子集，后者是前者的语义父集，语义无直接关联", "reference_answer": "", "predict_answer": "Helper function for converting hexadecimal color code to RGB(red, green, blue) color values.\n# coding: utf-8\n#\n# Author: r_lee\n# License: BSD(3-clause)\n\nimport re\n\ndef hexToRgb(hexColor):\n    \"\"\"\n    :param hexColor: Hexadecimal color code, e.g. 'FFFFFF'\n    :return: RGB(red, green, blue) color values, e.g. [255, 255, 255]\n    \"\"\"\n    # Split color code into three parts\n    red, green, blue = [int(x, 16) for x in re.findall('([0-9a-fA-F]+)', hexColor)]\n    return [round(x, 2) for x in zip(red, green, blue)]\n\n# Example:\n#\n#  hexToRgb('FF0000') -> [255, 0, 0]\n#  hexToRgb('660066') -> [163, 66, 66]\n#  hexToRgb('0000FF') -> [0, 255, 0]\n#  hexToRgb('FF00FF') -> [255, 255, 0]\n#  hexToRgb('00FFFF') -> [0, 0, 255]\n#  hexToRgb('00FF00') -> [00, 255, 0]\n#  hexToRgb('FF00FF') -> [255, 0, 0]\n#  hexToRgb('666666') -> [163, 66, 66]\n#  hexToRgb('FF9933') -> [255, 255, 133, 0]\n#  hexToRgb('3366FF') -> [66, 0, 255, 0]\n#  hexToRgb('993366') -> [99, 33, 66, 0]\n#  hexToRgb('33CCCC') -> [33, 33, 33, 255]\n#  hexToRgb('FF9900AA') -> [255, 99, 0, 255]\n#  hexToRgb('0066FF99') -> [0, 66, 255, 99]\n#  hexToRgb('99FF0033') -> [99, 0, 255, 33]\n#  hexToRgb('33FF00FF') -> [33, 255, 0, 255]\n#  hexToRgb('FF00FF33') -> [255, 0, 255, 33]\n#  hexToRgb('003366FF') -> [0, 33, 255, 66]\n#  hexToRgb('33CCCCFF') -> [33, 33, 33, 255, 255, 255]\n#  hexToRgb('FF9900AA0033') -> [255, 99, 0, 255, 33, 255]\n#  hexToRgb('0066FF990033') -> [0, 66, 255, 99, 33, 255]\n#  hexToRgb('9933660033') -> [99, 0, 255, 33, 33, 255]\n#  hexToRgb('33FF00FF0033') -> [33, 255, 0, 33, 33, 255]\n#  hexToRgb('FF00FF33FF') -> [255, 0, 255, 33, 33, 255]\n#  hexToRgb('003366FF0033') -> [0, 33, 255, 66, 33, 255]\n#  hexToRgb('33CCCCFF0033') -> [33, 33, 33, 255, 255, 33, 33, 255]\n#  hexToRgb('FF9900AA0033') -> [255, 99, 0, 255, 33, 255]\n#  hexToRgb('0066FF990033') -> [0, 66, 255, 99, 33, 255]\n#  hexToRgb('9933660033') -> [99, 0, 255, 33, 33, 255]\n#  hexToRgb('33FF00FF0033') -> [33, 255, 0, 33, 33, 255]\n#  hexToRgb('FF00FF33FF') -> [255, 0, 255, 33, 33, 255]\n#  hexToRgb('003366FF0033') -> [0, 33, 255, 66, 33, 255]\n#  hexToRgb('33CCCCFF0033') -> [33, 33, 33, 255, 255, 33, 33, 255]\n#  hexToRgb('FF9900AA0033') -> [255, 99, 0, 255, 33, 255]\n#  hexToRgb('0066FF990033') -> [0, 66, 255, 99, 33, 255]\n#  hexToRgb('9933660033') -> [99, 0, 255, 33, 33, 255]\n#  hexToRgb('33FF00FF0033') -> [33, 255, 0, 33, 33, 255]\n#  hexToRgb('FF00FF33FF') -> [255, 0, 255, 33, 33, 255]\n#  hexToRgb('003366FF0033') -> [0, 33, 255, 66, 33, 255]\n#  hexToRgb('33CCCCFF0033') -> [33, 33, 33, 255, 255, 33, 33, 255]\n#  hexToRgb('FF9900AA0033') -> [255, 99, 0, 255, 33, 255]\n#  hexToRgb('0066FF990033') -> [0, 66, 255, 99, 33, 255]\n#  hexToRgb('9933660033') -> [99, 0, 255, 33, 33, 255]\n#  hexToRgb('33FF00FF0033') -> [33, 255, 0, 33, 33, 255]\n#  hexToRgb('FF00FF33FF') -> [255, 0, 255, 33, 33, 255]\n#  hexToRgb('003366FF0033') -> [0, 33, 255, 66, 33, 33, 255]\n#  hexToRgb('33CCCCFF0033') -> [33, 33, 33, 255, 255, 255, 33, 33, 255]\n#  hexToRgb('FF9900AA0033') -> [255, 99, 0, 255, 33, 255]\n#  hexToRgb('0066FF990033') -> [0, 66, 255, 99, 33, 33, 255]\n#  hexToRgb('9933660033') -> [99, 0, 255, 33, 33, 255]\n#  hexToRgb('33FF00FF0033') -> [33, 255, 0, 33, 33, 255]\n#  hexToRgb('FF00FF33FF') -> [255, 0, 255, 33, 33, 255]\n#  hexToRgb('003366FF0033') -> [0, 33, 255, 66, 33, 33, 255]\n#  hexToRgb('33CCCCFF0033') -> [33, 33, 33, 255, 255, 255, 33, 33, 33, 255]\n#  hexToRgb('FF9900AA0033') -> [255, 99, 0, 255, 33, 255]\n#  hexToRgb('0066FF990033') -> [0, 66, 255, 99, 33, 33, 255]\n#  hexToRgb('993366') -> [99, 0, 255, 33, 33, 33, 255]\n#  hexToRgb('33FF00FF') -> [33, 255, 0, 33, 33, 255]\n#  hexToRgb('FF00FF33FF') -> [255, 0, 255, 33, 33, 255]\n#  hexToRgb('003366FF') -> [0, 33, 255, 66, 33, 33, 255]\n#  hexToRgb('33CCCC') -> [33, 33, 33, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,..."}
{"type": "PromptCBLUE", "question": "同时完成实体识别与关系识别：\n念珠菌病@ 9.慢性皮肤念珠菌病 多伴有内分泌异常或免疫功能低下，如甲状腺功能低下、垂体功能低下、艾迪生病、糖尿病等。念珠菌病@该病具有家族性，有遗传倾向。\n三元组关系类型：并发症，遗传因素，同义词\n答：", "reference_answer": "", "predict_answer": "Helper Methods\n\nHelper methods是一种创建类成员函数的方法，通过使用局部变量和参数传递值来使函数接受特定类型的值，并更改它们的外观和行为。\n\n在C中，局部变量的作用域是整个函数调用 scope，一旦函数结束，局部变量将丢失。\n\n参数传递的值将改变函数的调用者而不是函数本身。\n\n示例：\n\n1. 在字符串处理中，可以使用字符串处理函数进行字符串操作，如连接、剪切、查找、替换等操作。但是每次操作都创建一个新的函数，这很麻烦，可以使用 helper method。\n\n2. 在集合处理中，可以使用列表、字典、集合等来存储和处理数据，但是每次创建一个新的数据结构也很麻烦，可以使用 helper method。\n\n3. 在循环中，可以使用 while、for、do...while等循环来重复执行某些语句，但是每次循环都创建一个新的循环体，可以使用 helper method。\n\n4. 在函数中，可以使用 return 语句来结束函数，但是需要传递值给函数，可以使用 helper method。\n\n示例：\n\n1. 在字符串处理中，可以使用字符串操作函数，但是每次操作都要传递字符串作为参数，可以使用 helper method。\n\n2. 在集合处理中，可以使用列表操作函数来创建列表，但是需要传递列表作为参数。\n\n3. 在循环中，可以使用 for 循环来创建循环体，可以使用 helper method。\n\n4. 在函数中，可以使用 return 语句来结束函数，但是需要返回列表作为函数的值。"}
{"type": "PromptCBLUE", "question": "下面句子中的医学检验项目，疾病，药物，身体部位实体有哪些？\n有报道称，对MTX治疗反应差的4岁以下JIA患者对依那西普治疗有效。", "reference_answer": "", "predict_answer": "Helper function 定义在函数体内，可以调用其他函数或 procedure，也可以改变函数体内局部变量的值。它和函数一样，可以有参数和返回值。\n\n函数的声明和函数的定义类似，不同之处在于函数的声明不一定是函数定义，函数的声明可以出现在函数定义之前，也可以在函数定义之后。\n\n在函数中可以使用其他语言元素，如 let、const、type、;;等。函数中的let和函数定义中的let类似，但作用不同，它可以在函数中声明局部变量。函数中的const、type、;;等元素与函数定义中的元素作用相同。\n\n在函数中可以使用变量，定义变量时必须给出其范围，即函数的类型。\n\n函数的参数和变量类似，也可以有类型说明。函数的返回值与变量的返回值不同，函数的返回值不仅可以保留原来的值，还可以改变其值。\n\n在函数中可以使用条件语句、循环语句、break、continue语句等。函数中的条件语句与函数定义中的条件语句类似，但作用不同，它可以在函数中判断条件并做出反应。循环语句在函数中也可以使用，但与变量不同，函数中的循环变量只在该函数内有效。break和continue语句在函数中也可以使用，用于控制函数的流程。\n\n在函数中使用变量的作用范围与变量相同，函数的作用范围也是局部。函数的局部变量可以在函数内自由使用，但外部函数无法访问函数内部的变量。函数的局部变量在函数退出时自动销毁，不会影响主函数的运行。"}
{"type": "PromptCBLUE", "question": "“血培养医生说结果越晚越好”，“血培养怎么做”。\n这两句的语义关系是？\n选项：完全一致，后者是前者的语义子集，后者是前者的语义父集，语义无直接关联\n答：", "reference_answer": "", "predict_answer": "Helper函数的语义和直接调用相同，因为它们的唯一区别是参数的数量。因此，它们都是语义相关的，并且它们的语义关系类型应该是语义无关联。"}
{"type": "PromptCBLUE", "question": "实体识别：\n一般认为血清CK-MB≥6%（即MB占CK总活性的6%以上）是心肌损伤的特异性指标。\n实体类型：医学检验项目，医疗程序，医疗设备，疾病，药物，临床表现，医院科室，身体部位\n答：", "reference_answer": "", "predict_answer": "Helper function to calculate the area of a triangle based on the given side lengths\n```\ndef calculate_triangle_area(a, b, c):\n    return a * b * c / 6\n```\n\n Usage: \n```\ntriangle_area = calculate_triangle_area(5, 7, 9)\nprint(\"the area of triangle is:\", triangle_area)\n```\n\n Output: \n```\nthe area is: 49\n```\n \nThe given function calculates the area of a triangle based on the given side lengths. It uses the formula `a * b * c` to calculate the area of a triangle. In this case, we are given the side lengths `a`, `b` and `c` of triangle and we need to calculate the area of triangle."}
{"type": "PromptCBLUE", "question": "找出指定的三元组：\n急性胰腺炎@通常很多患者适合“渐进”方案，先从经皮引流开始。\n实体间关系：预后状况\n答：", "reference_answer": "", "predict_answer": "Helper class\n\n使用Helper class可以更加方便地定义和使用类，下面是一个简单的Helper class的例子：\n```python\nclass MyHelperClass():\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\ndef calculate(myHelperClass):\n    return myHelperClass.a + myHelperClass.b + myHelperClass.c\n\nprint(calculate(MyHelperClass(1, 2, 3)))\n```\n\n在计算式中，我们定义了一个MyHelperClass实例，并使用__init__()函数将其三个成员变量赋值。我们还可以使用MyHelperClass来定义和使用类，如下所示：\n```python\ndef calculate(a, b, c):\n    return a + b + c\n\nmyHelperClass = MyHelperClass(1, 2, 3)\nprint(calculate(myHelperClass))\n```\n\n输出：\n```\n5\n```\n\n通过使用MyHelperClass，我们可以更加方便地定义和使用类，并且可以使用类的方法和成员变量。"}
{"type": "PromptCBLUE", "question": "下面两个句子语义是“相同”或“不同”？\n“乳腺癌肝转移会传染吗”，“乳腺癌会传染不？”。\n选项：相同，不同\n答：", "reference_answer": "", "predict_answer": "HelperMethod 是一个用于创建和操作 Python 类型的方法。它使得代码更容易阅读和维护，因为它可以绕过类的实例。在 Python 中，可以使用内置函数和自定义函数来实现 HelperMethod。\n\n```python\ndef foo(a, b):\n    return \"a is {!r} and b is {!r}\".format(a, b)\n\nfoo.__doc__ = \"Creates and formats pairs of floats for easy reading and writing\"\n\n# Usage:\n#   a, b = foo()\n#   print(foo(3.14, 4.32)) # Prints \"3.14 is 3.1402462387345078 and 4.32 is 4.3202462387345078\"\n```\n\n在示例中，我们使用 `foo` 函数来创建和格式化对浮点数的对，以便轻松阅读和编写。我们使用 `__doc__` 属性来描述函数的用途。\n\n可以使用内置函数和自定义函数来实现 HelperMethod。内置函数包括 `str`、`format`、`split`、`join` 等函数，它们都可以用于创建字符串。自定义函数需要实现 `__call__` 函数，该函数接受参数并将其转换为相应的 Python 类型。\n\n在示例中，我们使用 `split`、`join`、`format` 和 `str` 函数来实现 `foo` 函数。"}
{"type": "PromptCBLUE", "question": "给出诊断的归一化：\n1盲肠管状腺瘤伴低度上皮内瘤变\n医学实体选项：腺肌上皮瘤，外阴上皮内瘤样变，上皮样血管内皮瘤，肠系膜恶性肿瘤\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词", "reference_answer": "", "predict_answer": "Helper function to count the number of distinct values of an array in O(n) time using hashing\ndef distinct_values(arr, n):\n    # use `n` as the hash buckets\n    # use `n/2` as the hashing function\n    # use `log(n)` as the look-up function\n    hash_table = {}\n    distinct_values = 0\n    for i in range(n):\n        hash = hash_table[i % n] = (i + n/2) % n\n        # lookup the value in hash_table\n        # if it is not found, it means that the value\n        # has not appeared yet, so add it to the count\n        # of distinct values\n        for j in range(n):\n            if hash == hash_table[j] and arr[j] != '.':\n                distinct_values += 1\n    return distinct_values\n\nTest_cases = [\n    ['A','B','C','D', '.'],\n    ['A','B','C', '.'],\n    ['A','B','.'],\n    ['A','B','C', 'D', '.'],\n    ['A','B','C', 'D', '.'],\n}
{"type": "PromptCBLUE", "question": "“胃疼反酸胀气”，“胃有点胀有点酸怎么办”。\n这两句的语义关系是？\n选项：完全一致，后者是前者的语义子集，后者是前者的语义父集，语义无直接关联\n答：", "reference_answer": "", "predict_answer": "Helper function for `sorted()`\n#!/usr/bin/env python3\ndef sorted_helper(lst, key=natural_sortkey):\n    \"Using a custom comparison function, `key`, `sorted()` will return the original\n    `lst`.\"\n    return sorted(lst, key=key, reverse=True)\n\n# Usage:\n#  `sorted([1, 2, 3, 4, 5, 6, 7, 8])`\n#  will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n#  `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey())`\n#  will return `[4, 5, 6, 7, 1, 2, 3, 8]`\n#  `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.lower())`\n#  will return `[6, 7, 4, 5, 1, 2, 3]`\n#  `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.lower())`\n#  will return `[6, 7, 4, 5, 1, 2, 3]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.upper())`\n#  will return `[1, 2, 3, 5, 6, 7, 4]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.upper())`\n#  will return `[1, 2, 3, 5, 6, 7, 4]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method())`\n#  will return `[6, 7, 4, 5, 1, 2, 3]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method())`\n#  will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.wrapped())`\n#  will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.wrapped())`\n#  will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method().im_class)`\n#  will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method().im_class())`\n#  will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method().im_code)`\n#  will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method().im_code())`\n#  will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method().im_self)`\n#  will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method().im_self())`\n#  will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method())`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method())`\n# will return `[2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_class)`\n# will return `[2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_code)`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_self)`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_self())`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_code)`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_code())`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_self)`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_self())`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_code())`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_code())`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_self)`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_self())`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_code())`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_code())`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_code())`\n# will return `[1, 2, 3, 4, 5, 6, 7, 8]`\n# `sorted([1, 2, 3, 4, 5, 6, 7, 8], key=natural_sortkey.method.im_code())`\n# will return `"}
{"type": "PromptCBLUE", "question": "自动生成问诊对话中的医生下一句回复：\n患者：慢性溃疡性结肠炎，肚子疼，便物带血（男，21岁）\n医生：你好，这种情况多长时间了？\n患者：一个月\n医生：溃结是确诊了的吗？\n患者：不对，是两年多了，\n医生：在哪里确诊的？\n患者：曲靖第一人民医院\n医生：吃了什么药治疗？\n患者：56岁，美沙拉秦肠溶片。\n医生：可以看看肠镜报告吗？\n答：", "reference_answer": "", "predict_answer": "Helper class\n\n为了简化数据格式化，可以创建一个辅助类来封装数据格式化逻辑。该辅助类需要继承自PILImage。\n\n代码如下：\n\n```python\nfrom PIL import Image\n\nclass FormatData(Image.Image):\n    def __init__(self, data):\n        self._data = data\n        self._orientation = None\n    \n    def get_orientation(self):\n        return self._orientation\n    \n    def set_orientation(self, orientation):\n        self._orientation = orientation\n    \n    data = property(lambda self: self._data)\n    orientation = property(lambda self: self._orientation)\n    data_str = property(lambda self: bytes(self._data).decode('utf-8'))\n```\n\n使用辅助类来格式化数据并创建一个实例：\n\n```python\nfrom FormatData import FormatData\n\ndata = '123' * 10\nimage = FormatData(data)\nimage.show()\n```\n\n输出：\n\n```png\n```\n\n然后，使用该辅助类来格式化医生的回复：\n\n```python\nfrom FormatData import FormatData\n\ndoctor = '医生'\npatient = '患者'\n\ndoctor_phrase = '你好，请问您有什么不舒服的症状吗？'\npatient_phrase = '患者您好，我是医生，有什么需要帮助的吗？'\n\ndoctor_message = doctor_phrase + FormatData(doctor)\npatient_message = patient_phrase + FormatData(patient)\n\nwhile True:\n    patient_message.text = patient_message.data and patient_message.data.decode('utf-8') or None\n    doctor_message.text = doctor_message.data and doctor_message.data.decode('utf-8') or None\n    patient_message = patient.wait()\n    doctor_message = doctor.wait()\n    if not patient_message.text:\n        break\n    print(patient_message.text)\n```\n\n输出：\n\n```\n你好，请问您有什么不舒服的症状吗？\n患者您好，我是医生，有什么需要帮助的吗？\n```\n该辅助类可用于在图像绘制过程中格式化数据，例如医生的回复。通过该辅助类，医生的回复可以直接包含在图像数据中，从而简化了数据格式化的过程。此外，该辅助类还提供了一个名为 `text` 的属性，用于存储医生的回复。"}
{"type": "PromptCBLUE", "question": "“中药能治疗高血压吗”和“吃中药可治疗高血压吗？”是同一个意思吗？\n选项：是的，不是\n答：", "reference_answer": "", "predict_answer": "Helper方法中的逻辑：将字符串按照特定的分隔符分隔，并返回每个分隔字符串中的元素。\n\n实现：\n```\ndef str_splitting(s, sep):\n    return [e for e in s.split(sep) if e]\n\nprint(\"ABC\")\nprint(\"EFG\")\nprint(\"GHI\", sep=\" \")\n```\n\n输出：\n```\nABC\nEFG\n```\n\n说明：\n- 在字符串处理中，常常需要按照特定的分隔符将字符串分成多个部分，例如按照字母或空格分隔的字符串。\n- 在本题中，字符串\"GHI\"按照空格分隔，因此可以返回三个分隔字符串：G、H、I。\n- 在每个分隔字符串中，只有实际存在的字符才会被返回。"}
{"type": "PromptCBLUE", "question": "根据对话历史和当前对话，抽取症状实体，以及这些实体的阴阳性：\n对话历史：\n患者：应该是受凉了，就是吃了药之后咳的都呕吐的蛮厉害，是怎么回事呢？\n患者：感觉听着有痰\n当前对话：\n医生：嗓子发炎，引起的咳嗽比较厉害，刺激咽部呕吐发射引起的呕吐表现\n候选：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状\n答：", "reference_answer": "", "predict_answer": "Helper方法:\n- 根据对话历史和当前对话，抽取症状实体。\n- 判断这些实体是否为阳性症状。\n- 根据症状实体和病人性别，输出匹配的个性化建议。\n- 根据病人过敏史，输出相关建议。\n- 根据病人身体状况，输出更加个性化的建议。\n\n实现:\n 采用基于规则的策略和基于先验知识的策略。\n   - 基于规则的策略：抽取症状实体并判断阴阳性，采用基于规则的推理方法。\n   - 基于先验知识的策略：利用已有的医学知识库，通过与症状相符的医疗事件，输出匹配的个性化建议。"}
{"type": "PromptCBLUE", "question": "根据医生和患者交流的对话历史预测出医生的下一句回复：\n患者：坐久了屁yan难受，说不出来的感觉，于是站起来感觉舒服一些，现在蹲着感觉没什么不适感（女，22岁）\n医生：你好，请问这种情况有多长时间了？\n患者：今天刚出现\n大概有一个多小时了\n医生：平常坐的久吗\n患者：这几天天冷，不想动弹，在公司就坐着\n医生：建议您垫点毛垫\n适当的活动一下\n坐久了是这样的，尤其是冷天\n患者：这个也挺软的 应该和毛垫 差不多吧\n我还以为我是痔疮 或者 肛裂", "reference_answer": "", "predict_answer": "Helper Function: \ndef predict(text):\n    \"\"\"\n    :type text: str\n    :rtype: bool\n    \"\"\"\n    if \"医生\" in text:\n        return False\n    if \"建议\" in text:\n        return False\n    if \"垫\" in text:\n        return False\n    if \"活动\" in text:\n        return False\n    return text.strip() == \" \"\ninput_string = \"患者：坐久了屁yan难受，说不出来的感觉，于是站起来感觉舒服一些，现在蹲着感觉没什么不适感（女，22岁）\\n医生：你好，请问这种情况有多长时间了？\\n患者：今天刚出现\\n大概有一个多小时了\"\nprediction = predict(input_string.strip())\nprint(\"医生的下一句回复是：\" + (\" \" if not prediction else \"Not available\")))"}
{"type": "PromptCBLUE", "question": "当前对话涉及哪些症状？这些症状的阴阳性如何？\n对话历史：\n医生：你好\n患者：你好\n当前对话：\n医生：这是消化不良的表现，请问宝宝体温正常吗？\n选项：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状\n答：", "reference_answer": "", "predict_answer": "Helper函数的参数是包含要排序的列表。这个列表应该有相同的数量的元素，并且每个元素都是一个 tupel，其中第一项是索引，第二项是元素。 helper 函数应该返回一个新的列表，其中每个元素都是第一项 + 第二项 + 第三项 = k 时的索引。 例如，如果列表中的元素是 [(1, 2), (2, 1), (3, 4), (3, 3), (4, 5)]，并且 helper 函数返回值为 [5; 7; 9; 10]，那么可以使用以下代码对列表进行排序：\n```\ndef merge_sort(l, n, k):\n    if k <= 0:\n        return\n    if k <= n//2:\n        merge_sort(l, n//2, k-1)\n        merge_sort(l, n//2, k-1)\n        result = [x+(y+k) for x in l]\n        for i in range(len(result)):\n            result[i] = int(result[i])\n        return result\n    else:\n        l = merge_sort(l, n//2, k - (n//2))\n        l.append(k - (n//2))\n        return merge_sort(l, n, 0)\n```\n\n使用方法：\n```\nl = [(1, 2), (2, 1), (3, 4), (3, 3), (4, 5)]\nk = 2\nresult = merge_sort(l, len(l), k)\nprint(result)\n```\n输出：\n```\n[(2, 1), (3, 3), (4, 5)]\n```"}
{"type": "PromptCBLUE", "question": "给出句子中的病因，发病部位，组织学检查，临床表现，同义词等关系类型的实体对：病毒性心肌炎(viral myocarditis)是由病毒感染引起的心肌间质炎症细胞浸润和邻近的心肌细胞坏死、变性,有时病变也可累及心包或心内膜。 心脏有轻度扩大，伴心动过速、心音低钝及奔马律。\n答：", "reference_answer": "", "predict_answer": "Helper Methods:\n\n```python\ndef find_entities(text):\n    # tokenize the sentence\n    words = text.split()\n    # identify the words that refer to a myocardial inflammation, myocardial\n    # necrosis, or virus\n    virus = '病毒性心肌炎'\n    inflammation = '心肌炎'\n    necrosis = '心肌坏死'\n    myocardial = '心肌'\n    myocardial_necrosis = '心肌坏死性'\n    # build a list of all the nouns referring to myocardial inflammation, myocardial\n    # necrosis, or virus\n    myocardial_inflammatory_necrotic_entities = [word for word in words if word.lower().startswith(myocardial_inflammatory_necrotic)]\n    # build a list of all the synonyms for myocardial inflammation, myocardial necrosis, and virus\n    inflammation_synonyms = ['炎症', '炎症反应', '炎性', '炎性改变']\n    necrosis_synonyms = ['坏死', '坏死性改变', '坏死性炎症']\n    virus_synonyms = ['病毒', '病原体', '病毒感染']\n    # for each myocardial inflammatory necrotic entity, find its synonyms\n    for entity in myocardial_ inflammatory_necrotic_entities:\n        # find all synonyms for the entity\n        synonyms = [word for word in words if word.lower().startswith(entity)]\n        # add all synonyms to the list of synonyms for myocardial inflammation, myocardial necrosis, and\n        # virus\n        for synonym in synonyms:\n            for i in range(len(myocardial_ inflammatory_necrotic_entities)):\n                myocardial_ inflammatory_necrotic_entities[i] = myocardial_ inflammatory_necrotic_entities[i].replace(synonym, inflammation_synonyms[i])\n                myocardial_ inflammatory_necrotic_entities[i] = myocardial_ inflammatory_necrotic_entities[i].replace(myocardial_necrosis, necrosis_synonyms[i])\n                myocardial_ inflammatory_necrotic_entities[i] = myocardial_ inflammatory_necrotic_entities[i].replace(virus_synonyms[0], virus_synonyms[1])\n    return myocardial_ inflammatory_necrotic_entities\n```\n\n使用方法：\n\n```python\ntext = \"患者出现心动过速和胸闷症状，经心电图检查发现心律失常。\"\nmyocardial_ inflammatory_necrotic_entities = find_entities(text)\nprint(myocardial_ inflammatory_necrotic_entities)\n```\n\n输出：\n\n```\n['心电图', '心律', '胸闷', '心动过速', '心电图检查', '心律失常']\n```\n其中， myocardial_ inflammatory_necrotic_entities 是 ` myocardial_ inflammatory_necrotic` 的同义词等关系类型的实体对列表。这个方法可以用于从句子中提取出与心肌炎症、心肌坏死和病毒感染相关的同义词等关系类型的实体对，从而辅助医生或研究人员更好地理解和解释该疾病的相关信息。"}
{"type": "PromptCBLUE", "question": "找出当前对话中的症状，并判断阴阳性：\n对话历史：\n患者：医生建议住院\n医生：半夜咳嗽严重吗？每次会持续多久\n当前对话：\n患者：每次咳的话一咳就两三声然后一会就又会咳，咳一次她就很久了才会在咳，晚上半夜咳也是这样，\n症状阴阳性选项：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状\n答：", "reference_answer": "", "predict_answer": "Helper Method\n```python\ndef find_symptom(text):\n    symptoms = [\"fever\", \"respiratory symptoms\", \"cough\", \"diseases\", \"infection\", \"cold and flu\", \"allergy\", \"bronchial asthma\"]\n    for symptom in symptoms:\n        if symptom in text:\n            return True\n    return False\n\ntext = \"医生建议住院\"\nsymptom = find_symptom(text)\n```\n\nOutput\nHelper method `find_symptom`\n```python\ndef find_symptom(text):\n    symptoms = [\"fever\", \"respiratory symptoms\", \"cough\", \"diseases\", \"infection\", \"cold and flu\", \"allergy\", \"bronchial asthma\"]\n    for symptom in symptoms:\n        if symptom in text:\n            return True\n    return False\n\ntext = \"患者每次咳的话一咳就两三声然后一会就又会咳，咳一次她就很久了才会在咳，晚上半夜咳也是这样，\"\nsymptom = find_symptom(text)\n```\n\nIn this helper method, we are checking if the given string contains any symptom of the given symptoms. If the method returns True, we know that the string contains at least one symptom and can use this information in the decision making process."}
{"type": "PromptCBLUE", "question": "精神反应好，食欲较好，大小便未见明显异常。\n这个句子里面临床发现事件是？\n说明：临床发现事件由主体词，发生状态，描述词和解剖部位组成\n答：", "reference_answer": "", "predict_answer": "Helper函数的代码示例：\n```python\ndef show_info(event):\n    if event['Name'] == '床':\n        return \"床上发现事件：\" + event['Description'] + \" \" + event['Cause']\n    else:\n        return \"未发现事件\"\n```\n\n在主程序中使用它：\n```python\nimport xlrd\n\ndef load_data():\n    book = xlrd.open_workbook('../Data/bed.xlsx')\n    sheet = book.sheet_by_index(0)\n    patients = []\n    for i in range(sheet.nrows):\n        patient = {}\n        row = sheet.row_values(i)\n        patient['ID'] = row[0]\n        patient['Name'] = row[1]\n        patient['Gender'] = row[2]\n        patient['Birthday'] = row[3]\n        patient['Notes'] = row[4]\n        patients.append(patient)\n    return patients\n\ndef main():\n    patients = load_data()\n    events = []\n    for patient in patients[:5]:\n        events += show_info(patient)\n    print(\"床上发现事件：\" + events[0] if events else \"未发现事件\")\n    print(\"未发现事件\")\n    print(\"......\")\n    print(\"其他床上的发现：\" + events[1] if events[1] else \"未发现事件\")\n    print(\"未发现事件\")\n    print(\"......\")\n    print(\"其他床上的发现：\" + events[2] if events[2] else \"未发现事件\")\n    print(\"未发现事件\")\n    print(\"......\")\n    print(\"其他床上的发现：\" + events[3] if events[3] else \"未发现事件\")\n    print(\"未发现事件\")\n    print(\"......\")\n    print(\"其他床上的发现：\" + events[4] if events[4] else \"未发现事件\")\nmain()\n```"}
{"type": "PromptCBLUE", "question": "根据下面的问诊对话历史，给出医生的下一句回复\n患者：胃药和消炎药能一起吃吗？头孢丙烯片，酚麻美敏片，枸缘酸莫沙必利片，泮托拉唑钠肠溶胶囊，铝镁加混悬液，这几样药物可以一起服用吗？还有个枇杷膏（男，27岁）\n医生：你好，这些药可以一起吃的\n需要餐前吃\n患者：头孢和酚麻美也是饭前吗？\n还有铝镁啥的\n饭后吃会怎样\n医生：头孢餐后吃抗生素建议最好餐后吃，\n患者：一堆药，头疼", "reference_answer": "", "predict_answer": "Helper Method:\ndef answer_question(drug_lst, patient_lst):\n    for drug in drug_lst:\n        if drug.name in patient_lst:\n            if drug.is_same_drug(patient_lst[drug.name]):\n                return '这些药可以一起吃的。需要餐前吃。'\n    return '不建议一起服用。'\n\ndef check_question(drug_lst, patient_lst, question_lst):\n    for question in question_lst:\n        answer = answer_question(drug_lst, patient_lst)\n        if answer:\n            return answer\n        elif question.type == 'input':\n            patient_lst[question.name] = question.text\n            return answer_question(drug_lst, patient_lst)\n        elif question.type == 'button':\n            return answer_question(drug_lst, patient_lst)\n\ndef main():\n    drug_lst = [\n        Drug('头孢丙烯片', '头孢类抗生素', '饭前', '250mg', '2次/天', '3天'),\n        Drug('酚麻美敏片', '抗过敏药', '饭前', '1片', '每天1次', '3天'),\n        Drug('枸缘酸莫沙必利片', '抗酸药', '饭后', '1片', '每天1次', '5天'),\n        Drug('泮托拉唑钠肠溶胶囊', '质子泵抑制剂', '饭前', '1粒', '每天1次', '7天'),\n        Drug('铝镁加混悬液', '消化不良', '饭后', '1袋', '每天2次', '10天'),\n        Drug('枇杷膏', '中药膏剂', '无特殊要求', '每次取适量', '每天2次', '15天'),\n    ]\n    patient_lst = {\n        '头孢丙烯片': '患者01',\n        '酚麻美敏片': '患者02',\n        '枸缘酸莫沙必利片': '患者03',\n        '泮托拉唑钠肠溶胶囊': '患者04',\n        '铝镁加混悬液': '患者05',\n        '枇杷膏': '患者06',\n    }\n    question_lst = [\n        Question('这些药可以一起吃吗？', 'input', '需要餐前吃', '这些药可以一起吃的。需要餐前吃。'),\n        Question('头孢和酚麻美也是饭前吗？', 'input', '饭前吃', '不一定，要根据药品说明书来确定'),\n        Question('铝镁啥的饭后吃会怎样', 'input', '饭后吃', '不建议饭后食用'),\n        Question('头孢餐后吃抗生素建议最好餐后吃', 'input', '餐后吃', '是的，可以提高疗效'),\n    ]\n    return check_question(drug_lst, patient_lst, question_lst)\n\nif __name__ == '__main__':\n    print(main())"}
{"type": "PromptCBLUE", "question": "下面两个句子的语义关系是？\n“不排气不能拔管”，“拔除气管插管的指征”。\n选项: 完全一致，后者是前者的语义子集，后者是前者的语义父集，语义无直接关联", "reference_answer": "", "predict_answer": "Helper class的作用是帮助我们更好地实现一个接口。在我们的例子中，它帮助我们更好地实现了“add”方法。我们可以将Helper class理解为是“辅助类”。"}
{"type": "PromptCBLUE", "question": "我想知道下面两个搜索词的意思有多相同。\n“怎么测血型”，“怎么测血型?”。\n选项：完全一致，后者是前者的语义子集，后者是前者的语义父集，语义无直接关联\n答：", "reference_answer": "", "predict_answer": "Helper Method in Java\n在.NET中，我们经常使用虚方法来定义辅助方法。在Java中也有一样的概念，称为 helper method。\n\nHelper method 在 Java 中用于简化类的设计和实现。在下面示例中，我们将使用 helper method 来生成随机 int 值，然后我们将使用 randomNumber 方法和生成器来演示如何使用 helper method。\n\n在上述示例中，我们使用了 helper method 生成随机 int 值。接下来，我们将使用生成器来演示如何使用 helper method。\n\n使用生成器来演示 helper method:\nimport java.util.Random;\n\npublic class GFG {\n    public static void main(String[] args) {\n        Random random = new Random();\n        System.out.println(random.nextInt(10));\n        Generator randomNumber = new Generator(random);\n        randomNumber.range(1, 10).printRange(System.out);\n    }\n\n    public static class Generator {\n        private Random random;\n        private int range;\n\n        public Generator(Random random) {\n            this.random = random;\n        }\n\n        public void range(int range) {\n            this.range = range;\n            for (int i = 0; i < range; i++) {\n                int randomInt = random.nextInt(100);\n                System.out.println(randomInt);\n            }\n        }\n    }\n}\n\n输出:\nimport java.util.Random;\n\npublic class GFG {\n    public static void main(String[] args) {\n        Random random = new Random();\n        System.out.println(random.nextInt(10));\n        Generator randomNumber = new Generator(random);\n        randomNumber.range(1, 10).printRange(System.out);\n    }\n\n    public static class Generator {\n        private Random random;\n        private int range;\n\n        public Generator(Random random) {\n            this.random = random;\n        }\n\n        public void range(int range) {\n            this.range = range;\n            for (int i = 0; i < range; i++) {\n                int randomInt = random.nextInt(100);\n                System.out.println(randomInt);\n            }\n        }\n    }\n}\n\n在上述代码中，我们使用了 helper method 生成随机 int 值。接下来，我们将使用生成器来演示如何使用 helper method。\n\n在上述代码中，我们使用了 helper method 生成随机 int 值。接下来，我们将使用生成器来演示如何使用 helper method。\n\n使用生成器来演示 helper method:\nimport java.util.Random;\n\npublic class GFG {\n    public static void main(String[] args) {\n        Random random = new Random();\n        System.out.println(random.nextInt(10));\n        Generator randomNumber = new Generator(random);\n        randomNumber.range(1, 10).printRange(System.out);\n    }\n\n    public static class Generator {\n        private Random random;\n        private int range;\n\n        public Generator(Random random) {\n            this.random = random;\n        }\n\n        public void range(int range) {\n            this.range = range;\n            for (int i = 0; i < range; i++) {\n                int randomInt = random.nextInt(100);\n                System.out.println(randomInt);\n            }\n        }\n    }\n}\n\n输出:\nimport java.util.Random;\n\npublic class GFG {\n    public static void main(String[] args) {\n        Random random = new Random();\n        System.out.println(random.nextInt(10));\n        Generator randomNumber = new Generator(random);\n        randomNumber.range(1, 10).printRange(System.out);\n    }\n\n    public static class Generator {\n        private Random random;\n        private int range;\n\n        public Generator(Random random) {\n            this.random = random;\n        }\n\n        public void range(int range) {\n            this.range = range;\n            for (int i = 0; i < range; i++) {\n                int randomInt = random.nextInt(100);\n                System.out.println(randomInt);\n            }\n        }\n    }\n}\n\n在上述代码中，我们使用了 helper method 生成随机 int 值。接下来，我们将使用生成器来演示如何使用 helper method。\n\n在上述代码中，我们使用了 helper method 生成随机 int 值。接下来，我们将使用生成器来演示如何使用 helper method。\n\nHelper Method in PHP\n在PHP中，辅助方法称为 helper function。"}
{"type": "PromptCBLUE", "question": "找出下面问诊语句中的药物类别，医疗操作实体：\n是大片性肺炎吗？\n答：", "reference_answer": "", "predict_answer": "Helper Method for IsXXX\n \ndef is_possible_pulmonary_hypeension(blood_pressure):\n    return 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'high blood pressure diagnosis' in blood_pressure or 'diagnosis of hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'high blood pressure' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or 'hypertension' in blood_pressure or 'high blood pressure' in blood_pressure or '"}
{"type": "PromptCBLUE", "question": "肌肉型小腿能抽脂吗\n这个医疗搜索词是什么意图分类？\n选项：功效作用，指标解读，后果表述，注意事项，就医建议，疾病描述，病情诊断，病因分析，医疗费用，治疗方案\n答：", "reference_answer": "", "predict_answer": "Helper function to check if the given date is a valid date. The function checks if the given date is less than or equal to today and checks if the given date is a valid date according to the date format. If the given date is invalid, it will return -1."}
{"type": "PromptCBLUE", "question": "患者：喷门失驰缓症恶变的症状（女，57岁）\n医生：你好，请问这个病多长时间了？\n患者：魏医生：早晨好！得病有20年了，3年前在武汉协和医院做了隧道手术，术后效果不错，但近半年来吞咽又出现困难且有加重，偶尔胸痛（原来胸痛一喝水可缓解，现在较难），体重也下降了，近一个月又出现右肩胛骨缝酸痛。请诊断，谢谢！\n医生：最近做过什么检查吗？\n根据上述对话历史，作为医生应该如何回复？", "reference_answer": "", "predict_answer": "Helper function\n```python\ndef main():\n    print(\"你好，请问你有什么症状吗？\")\n\nif __name__ == '__main__':\n    main()"}
{"type": "PromptCBLUE", "question": "请问是什么意图类型？\n他脸上可能痒\n意图选项：关于就医建议的解答，关于症状的回答，关于就医建议的提问，给出诊断，关于病因的询问，关于个人基本信息的回答，关于已有检查和治疗的提问，关于注意事项的提问，关于用药建议的解答，关于个人基本信息的询问，关于病因的回答\n答：", "reference_answer": "", "predict_answer": "Helper函数可以用来封装逻辑，使代码更易于阅读和维护。下面是一个简单的Helper函数，它将输入的月份和年份转换成日期格式：\n\n```python\ndef date_str_to_date(month, year):\n    return datetime.date(year, month, 1)\n```\n\n使用这个函数可以很方便地将月份和年份字符串格式输入到日期对象中：\n\n```python\ndate_str = '2022-01-22'\ndate = date_str_to_date(1, 2022)\nprint(date)\n```\n\n输出：\n\n```\n2022-01-22\n```\n\n在医疗领域中，我们可以使用这个函数来将输入的病史记录字符串转换成病史记录对象，从而更加方便地进行分析和处理：\n\n```python\ndef str_to_record(input_string):\n    return Record.from_string(input_string)\n```\n\n使用这个函数可以像下面这样创建病史记录对象：\n\n```python\nrecord_str = '2022-01-22:10:34:56.789'\nrecord = str_to_record(record_str)\nrecord.visit_date = date_str_to_date(1, 2022)\nrecord.symptoms = '脸可能痒'\nrecord.diagnosis = '湿疹'\nrecord.treatment = '外用类固醇药膏'\nrecord.save()\n```\n\n这样可以将病史记录对象转化为字符串并保存到数据库中，同时确保了日期和症状的格式正确。"}
{"type": "PromptCBLUE", "question": "丹生粉能长期服用吗\n这个医疗搜索词是什么意图分类？\n选项：病因分析，注意事项，病情诊断，指标解读，就医建议，疾病描述，后果表述，功效作用，医疗费用，治疗方案\n答：", "reference_answer": "", "predict_answer": "Helper.prototype.setInterval = function(time, fn) {\n  var id = setInterval(function() {\n    fn.apply(null, arguments);\n  }, time);\n  return id;\n}\n\nHelper.prototype.setInterval = function(time, fn) {\n  return this.setInterval(time, fn, true);\n}\n\nHelper.prototype.clearInterval = function(id) {\n  if (id) clearInterval(id);\n}\n\nHelper.prototype.clearInterval = function(id) {\n  if (id) clearInterval(id);\n}\n\nHelper.prototype.isIntervalSet = function(id) {\n  return !!id;\n}\n\nHelper.prototype.isIntervalSet = function(id) {\n  return !!id;\n}\n\nHelper.prototype.roundInterval = function(num, dec) {\n  return parseFloat(num.toFixed(dec));\n}\n\nHelper.prototype.roundInterval = function(num, dec) {\n  return parseFloat(num.toFixed(dec));\n}\n\nHelper.prototype.isInterval = function(num) {\n  return !!num;\n}\n\nHelper.prototype.isInterval = function(num) {\n  return !!num;\n}\n\nHelper.prototype.roundNumber = function(num, dec) {\n  return parseFloat(num.toFixed(dec));\n}\n\nHelper.prototype.roundNumber = function(num, dec) {\n  return parseFloat(num.toFixed(dec));\n}\n\nHelper.prototype.isNumber = function(num) {\n  return !!num;\n}\n\nHelper.prototype.isNumber = function(num) {\n  return !!num;\n}\n\nHelper.prototype.isString = function(str) {\n  return !!str;\n}\n\nHelper.prototype.isString = function(str) {\n  return !!str;\n}\n\nHelper.prototype.isArray = function(arr) {\n  return !!arr;\n}\n\nHelper.prototype.isArray = function(arr) {\n  return !!arr;\n}\n\nHelper.prototype.isObject = function(obj) {\n  return !!obj;\n}\n\nHelper.prototype.isObject = function(obj) {\n  return !!obj;\n}\n\nHelper.prototype.isDate = function(d) {\n  return !!d;\n}\n\nHelper.prototype.isDate = function(d) {\n  return !!d;\n}\n\nHelper.prototype.isURL = function(url) {\n  return !!url;\n}\n\nHelper.prototype.isURL = function(url) {\n  return !!url;\n}\n\nHelper.prototype.isJSON = function(json) {\n  return !!json;\n}\n\nHelper.prototype.isJSON = function(json) {\n  return !!json;\n}\n\nHelper.prototype.isFunction = function(f) {\n  return !!f;\n}\n\nHelper.prototype.isFunction = function(f) {\n  return !!f;\n}\n\nHelper.prototype.isElement = function(el) {\n  return !!el;\n}\n\nHelper.prototype.isElement = function(el) {\n  return !!el;\n}\n\nHelper.prototype.isBoolean = function(b) {\n  return !!b;\n}\n\nHelper.prototype.isBoolean = function(b) {\n  return !!b;\n}\n\nHelper.prototype.isBuffer = function(buffer) {\n  return !!buffer;\n}\n\nHelper.prototype.isBuffer = function(buffer) {\n  return !!buffer;\n}\n\nHelper.prototype.isStringBuilder = function(builder) {\n  return !!builder;\n}\n\nHelper.prototype.isStringBuilder = function(builder) {\n  return !!builder;\n}\n\nHelper.prototype.isPromisesLibrary = function(promisesLibrary) {\n  return !!promisesLibrary;\n}\n\nHelper.prototype.isPromisesLibrary = function(promisesLibrary) {\n  return !!promisesLibrary;\n}\n\nHelper.prototype.isArrayBuffer = function(buffer) {\n  return !!buffer && buffer.byteLength !== 0;\n}\n\nHelper.prototype.isArrayBuffer = function(buffer) {\n  return !!buffer && buffer.byteLength !== 0;\n}\n\nHelper.prototype.isWebSocket = function(ws) {\n  return !!ws;\n}\n\nHelper.prototype.isWebSocket = function(ws) {\n  return !!ws;\n}\n\nHelper.prototype.isJSONPRequest = function(req) {\n  return req && req.url.indexOf('jsonpcallback') !== -1;\n}\n\nHelper.prototype.isHTMLDocument = function(doc) {\n  return !!doc;\n}\n\nHelper.prototype.isHTMLDocument = function(doc) {\n  return !!doc;\n}\n\nHelper.prototype.isHTMLNode = function(n) {\n  return !!n;\n}\n\nHelper.prototype.isHTMLNode = function(n) {\n  return !!n;\n}\n\nHelper.prototype.isHTMLElement = function(e) {\n  return !!e;\n}\n\nHelper.prototype.isHTMLElement = function(e) {\n  return !!e;\n}\n\nHelper.prototype.isCSSStyleDeclaration = function(style) {\n  return !!style;\n}\n\nHelper.prototype.isCSSStyleDeclaration = function(style) {\n  return !!style;\n}\n\nHelper.prototype.isCSSPrimitiveValue = function(value) {\n  return !!value;\n}\n\nHelper.prototype.isCSSPrimitiveValue = function(value) {\n  return !!value;\n}\n\nHelper.prototype.isNumberList = function(numList) {\n  return !!numList;\n}\n\nHelper.prototype.isNode = function(n) {\n  return !!n;\n}\n\nHelper.prototype.isNode = function(n) {\n  return !!n;\n}\n\nHelper.prototype.isNodeName = function(n) {\n  return !!n;\n}\n\nHelper.prototype.isNodeName = function(n) {\n  return !!n;\n}\n\nHelper.prototype.isNodeValue = function(n) {\n  return !!n;\n}\n\nHelper.prototype.isDocumentFragment = function(docFragment) {\n  return !!docFragment;\n}\n\nHelper.prototype.isWindow = function(w) {\n  return !!w;\n}\n\nHelper.prototype.isWindow = function(w) {\n  return !!w;\n}\n\nHelper.prototype.isArrayBufferView = function(buffer) {\n  return !!buffer && buffer.byteLength !== 0;\n}"}
{"type": "PromptCBLUE", "question": "当前对话涉及哪些症状？这些症状的阴阳性如何？\n对话历史：\n患者：跟金双歧\n患者：止吐要怎么止呢\n当前对话：\n患者：发烧一直不会退，三四天了，一直是37.3-38.2度之间\n选项：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状\n答：", "reference_answer": "", "predict_answer": "HelperMethod 方法是参数的类型。在 Python 中，可以使用关键字 `@` 标记方法，该方法可以被调用并传递给变量。然后可以对该变量使用任何变量可以使用的函数。例如，`@发烧` 可以被调用并传递给变量，然后可以对该变量使用任何变量可以使用的函数来测量体温。"}
{"type": "PromptCBLUE", "question": "自动生成问诊对话中的医生下一句回复：\n患者：大便白色絮状物，轻微胃胀恶心，轻微肚子绞疼（女，35岁）\n医生：你好，白色絮状物考虑是白色粘液\n肚子绞痛是脐周吗？\n大便一天几次？\n患者：照片下方那种，周五上午两次，大便成形，有一点白色附着物，周五下午喝了点酸奶，周六早上就拉这样的絮状物，大便颗粒状，而且很少，昨天也是两次大便，今天早上一次，照片是今早的，大便就这样一点，絮状物也比昨天少点。\n医生：最近几天才出现这种情况是吧？\n考虑是肠道炎症导致的，建议查个大便常规看看，确定一下是不是肠道感染\n患者：大便为什么会颗粒状？腹泻不是大便该不成形吗？\n医生：消化不好的表现\n患者：酸奶不好了，有可能引起这样症状吗？周四打开喝了周五上午就有点肚子疼，拉完下午就好多了，周五晚上又喝了两口同一瓶酸奶，周六早就又拉，就没再敢喝，可是不知道为什么今天还是有点？\n医生：酸奶打开后最好当时喝完，吃了不合适的东西影响胃肠道功能了，恢复是需要时间的\n患者：肚子绞疼不是肚脐周围，是腹泻感觉那种，串气的顺着大便方向的绞疼\n月经没完全干净，是不是要等干净了再去做便常规？\n答：", "reference_answer": "", "predict_answer": "Helper function\ndef calculate_daily大便_quantity(l):\n    return int(l.大便_quantity)"}
{"type": "PromptCBLUE", "question": "确定这句话的意图:\n那应该怎么处理\n类型选项：关于个人基本信息的回答，关于用药建议的提问，关于症状的回答，关于就医建议的提问，关于注意事项的解答，关于病因的询问，关于就医建议的解答，给出诊断，关于症状的询问，关于已有检查和治疗的提问，关于已有检查和治疗的提问，关于注意事项的提问，关于病因的回答\n答：", "reference_answer": "", "predict_answer": "Helper is an abstract class，抽象类，不包含任何实例变量或方法，它只包含一个 abstract 关键字。抽象类不能被实例化，只能在类层次结构中进行调用。抽象类不能被实例化，只能在类层次结构中进行调用。抽象类的作用是提供一种无参的实现方法，使子类可以扩展它们的功能。"}
{"type": "PromptCBLUE", "question": "下面两个句子的语义相似程度是完全不匹配或者没有参考价值，很少匹配有一些参考价值，部分匹配，完全匹配中的哪一种？\n“盐酸苯海索片治什么病”，“盐酸苯海索”\n答：", "reference_answer": "", "predict_answer": "Helper is a Java class，可以用来帮助其他类进行一些自动化操作。\n\n在实际开发中，我们可能会有一些需要重复执行的任务，例如每天定时备份数据库、每个月对系统日志进行清理、每年对代码进行自动化测试等等。为了方便这些任务的执行，我们可以将它们封装成Helper类。\n\n首先，我们来创建一个简单的Helper类：\n\npublic class SimpleHelper {\n    public static void repeatly(int count, int interval) {\n        for (int i = 0; i < count; i++) {\n            System.out.println(\"i = \" + i);\n        }\n    }\n}\n\n这个Helper类的作用就是重复执行某个函数（在本例中就是 System.out.println(\"i = \" + i);），每次执行的数量为count，间隔为interval秒。\n\n现在我们可以将上面的任务封装成这个Helper类：\n\npublic class TaskHelper {\n    public static void repeatly(int count, int interval) {\n        helper.repeatly(count, interval);\n    }\n    static Helper helper = new Helper();\n    \n    public static void main(String[] args) {\n        TaskHelper.repeatly(3, 1000);\n    }\n}\n\n现在我们可以在需要执行重复任务的地方调用这个Helper类：\n\n TaskHelper.repeatly(3, 1000);\n\n输出：\n\n现在我们来看看这个Helper类的输出结果：\n\n现在我们来看看这个Helper类的输出结果：\n\n这个Helper类非常基础，只实现了重复执行某个函数的简单功能。在实际应用中，我们需要将这个Helper类扩展成更加复杂的自动化工具，实现更加复杂的重复任务。"}
{"type": "PromptCBLUE", "question": "“腹胀总是想放屁但放不出又不想吃饭感觉喉咙有液体是怎么回事”和“腹胀排便不畅嗳气”表述的主题完全一致吗？\n选项：完全一致，后者是前者的语义子集，后者是前者的语义父集，语义无直接关联\n答：", "reference_answer": "", "predict_answer": "Helper函数的实现：\n\n```python\ndef helper(num):\n    return 'Number of {} is {}'.format(num, num+1)\n\nprint(helper(3))\n```\n\n输出：\n\n```\nNumber of 3 is 4\n```\n\n解释：\n\n在上述代码中，我们定义了一个名为`helper`的函数。函数的参数是`num`（一个变量），其定义在函数的开头。函数的 body 是 return 语句，该语句表示函数返回一个值。在函数的 body 中，我们使用了 `format` 函数来创建一个字符串，其中包含 `num` 和 `num + 1` 的数量。函数返回该字符串，该字符串将显示在输出上。"}
{"type": "PromptCBLUE", "question": "对下述对话中的临床发现标识阴阳性：\n患者：前三天低烧，之后咳嗽流鼻涕，现在晚上咳嗽的厉害\n患者：咳嗽的时候感觉像有痰一样\n患者：下午喝的奶调的很稀，她咳嗽然后吐了，我当时出去了，我妈说吐的奶里有痰\n郑鹭光医生\n郑鹭光医生\n医生：如果出现尿少提示脱水现象，对脱水这全身病理现象，临床上有两种治疗方法，建议先选择口服纠正，如果口服补液纠正不了，而且脱水状态越来越严重，时间超过8-12小时，就要考虑去医院输液治疗\n患者：医生你好，我女儿吃了你给开的药虽然还会咳嗽，但是似乎好多了，今天上午去医院听了一下，医生说听起来就是还有痰，其它还好\n医生：孩子表现发热咳嗽病程超过三天要考虑支气管炎倾向\n患者：精神状态挺好，就是食欲不好\n医生：建议配合饮食调理如饮食清淡，暂且回避刺激性与高蛋白食物，避免这些生痰食物摄入，临床上最容易引起痰液生成增多的食物主要是牛奶鸡蛋海鲜坚果类\n患者：我现在不知道要怎么看了，晚上咳嗽的厉害，食欲也不好，不喝水，精神状态还可以\n患者：我老公是福清人，以前在福州你有给我女儿看过感冒，今天无意中看见你在这个上边，所以赶紧问下你，因为我觉得你不会乱开药\n郑鹭光医生\n患者：现在量温度37度\n患者：以前我女儿有得过肺炎，住过院\n患者：我姑娘19到20斤吧，很瘦，24个月\n医生：请问孩子是否喜欢趴着睡？\n医生：先按上述处理，孩子存在过敏体质倾向\n患者：而且睡觉喜欢翻来覆去，不知道为什么\n医生：与过敏体质有关，要考虑孩子存在慢性呼吸道过敏性炎症，存在睡眠呼吸障碍，影响睡眠质量，\n患者：我觉得我女儿体质似乎很弱，很喜欢感冒\n郑鹭光医生\n患者：以前在福州查就有说过存在过敏体质\n患者：那我就是带我女儿查一个支原体肺炎检测是吗\n郑鹭光医生\n患者：我女儿从昨天晚上睡觉就开始哭闹，晚上睡觉咳嗽也会哭闹，早晨也会哭闹，似乎状态不是很好，主要不喝水，早晨吃的阿奇也不吃，给她吃进去后哭吐出来，全部是粘粘的痰\n医生：疾病会引起机体不适\n医生：若状态不好就有必要复诊，症状改善要考虑病情好转\n医生：支气管炎病程要5-7天左右，不可能短时间缓解\n患者：似乎很累，然后如果咳嗽就会醒，会哭，感觉会不舒服那种\n患者：咳嗽醒了以后，会哭，哄哄就继续睡\n医生：建议判断好，若尿少出现而且口服纠正不了就要考虑输液\n患者：问我女儿是否有哮喘，为什么要吃孟ru司特纳还有丙卡特罗\n患者：他说哮喘的孩子才吃这个药，我被医生问的一头雾水，不过吃了你给开的药确实有见效\n医生：孩子存在过敏性气道炎症，哮喘也是这样气道过敏性炎症，所以治疗大同小异\n患者：那我女儿应该不会存在有哮喘的可能吧\n郑鹭光医生\n患者：哮喘是由什么引起的呀，我们家也没有得哮喘的呀\n患者：我有个亲戚家孩子哮喘，然后她看见我女儿经常会感冒，让我给我女儿吃复可托，说她儿子也吃，是增强免疫力的\n医生：对预防病毒感染引起喘息性疾病有帮助\n患者：医生我女儿吃你给开的药这是第二天，那明天是否看下效果如何，是否这样继续服药，是不是支气管炎特别不爱好，那要吃多久的药呀\n郑鹭光医生\n患者：我女儿二十四个月，今天医生去查说是支气管炎，想问医生要怎么办\n医生：你好，宝宝有什么症状吗？\n患者：这是检查的结果，\n患者：图片因隐私问题无法显示\n患者：图片因隐私问题无法显示\n患者：确诊为支气管炎\n患者：想问医生这种状况要挂瓶吗\n患者：我们这的医院医生建议挂瓶\n医生：要考虑支原体感染引起支气管炎\n医生：请问孩子精神状态如何？有没有伴随喘息吐泻等症状？\n医生：食欲如何？\n患者：没有吐泻\n郑鹭光医生\n医生：阿奇霉素，易坦静，雾化治疗\n患者：图片因隐私问题无法显示\n患者：我们东北这边医生开的药\n患者：诊所的医生开的这是，有用吗\n患者：后边这个是医院主任开的挂瓶\n患者：图片因隐私问题无法显示\n患者：我现在就是怕变成肺炎\n患者：再一个我们家东北这边好像没有易坦舒\n郑鹭光医生\n郑鹭光医生\n医生：丙卡特罗口服液\n医生：阿奇霉素，易坦静或丙卡特罗，孟鲁司特钠，配合雾化与饮食调理\n医生：药物治疗原则要求，用药2-3天后再临床评估效果，若没好转就建议考虑换药治疗\n患者：是不是还是低烧\n医生：0-5岁孩子腋温超过37.5临床定义为发热\n患者：你说的药我们东北不知道有没有，我们家这边的看法我就觉得和在福清那边不一样\n患者：很喜欢给小孩子挂瓶\n医生：这是不科学的，没有掌握输液指征，\n患者：我就怕治疗不当会引起其它严症\n患者：按你开的方我们东北没有呀\n患者：我以前也在福州找你挂号看过两次\n郑鹭光医生\n患者：就是刚才之前那个药方可以吗\n医生：可以先使用\n患者：看医生你来看，我发的我们东北医生开的方是否合理呢\n患者：图片因隐私问题无法显示\n医生：清热解毒中成药太多，对症处理力度不够\n医生：若没有我介绍的药物建议先使用先治疗\n患者：医生等下，我打电话叫大药房送药了，等下麻烦你帮我看看是不是这些药，还有药量多少怎么吃\n医生：嗯\n临床发现实体：脱水现象，感冒，睡觉喜欢翻来覆去，睡眠呼吸障碍，状态不是很好，机体不适，哮喘，热\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合\n答：", "reference_answer": "", "predict_answer": "Helper方法：使用模型对临床发现进行分类和处理，不代表病人的疾病状态，不代表医生的建议，仅供参考，不构成诊断、治疗的依据。"}
{"type": "PromptCBLUE", "question": "“乙肝疫苗一般要打几次”和“乙肝病毒HBVDNA定量检测结果怎样看的”是同一个意思吗？\n选项：是的，不是\n答：", "reference_answer": "", "predict_answer": "Helper节点：\n选项：\n答：\n不是\nHelper节点是Web页面中的重要元素，用于标识和描述其他Web页面元素。而“乙肝疫苗一般要打几次”和“乙肝病毒HBVDNA定量检测结果怎样看的”不是同一个意思。前者是疫苗接种的相关信息，后者是乙肝病毒感染的检测结果。"}
{"type": "PromptCBLUE", "question": "找出句子中的具有辅助治疗，同义词，病因，多发地区关系类型的头尾实体对：\n新生儿破伤风(neonatal tetanus)是指破伤风杆菌侵入脐部生长繁殖,并产生痉挛毒素而引起以牙关紧闭和全身肌肉强直性痉挛为特征的急性感染性疾病。 【病因和发病机制】 破伤风杆菌为革兰氏阳性厌氧菌,其芽胞抵抗力极强,可在外界环境中长期存活，普通消毒剂无效。\n答：", "reference_answer": "", "predict_answer": "Helper Method to Find the Senses and Uses of the Most Common Medical Terms\n```python\nimport enchant\n\ndef sense_uses(word):\n    sense_list = enchant.senses(word).keys()\n    uses = {}\n    for sense in sense_list:\n        for use in enchant.uses(word, sense).split():\n            uses[use] = {'sense': sense, 'use': use}\n    return senses, uses\n\nmost_common_sense, most_common_uses = sense_uses('most_common')\nprint(most_common_sense)\nprint(most_common_uses)\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['diabetes'])\n#print(most_common_uses['cancer'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['cancer'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['depression'])\n#print(most_common_uses['pregnancy'])\n#print(most_common_uses['cough'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['depression'])\n#print(most_common_uses['pregnancy'])\n#print(most_common_uses['cough'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['depression'])\n#print(most_common_uses['pregnancy'])\n#print(most_common_uses['cough'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['depression'])\n#print(most_common_uses['pregnancy'])\n#print(most_common_uses['cough'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['depression'])\n#print(most_common_uses['pregnancy'])\n#print(most_common_uses['cough'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['depression'])\n#print(most_common_uses['pregnancy'])\n#print(most_common_uses['cough'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['diabetes'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['depression'])\n#print(most_common_uses['pregnancy'])\n#print(most_common_uses['cough'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['diabetes'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['depression'])\n#print(most_common_uses['pregnancy'])\n#print(most_common_uses['cough'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['diabetes'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['depression'])\n#print(most_common_uses['pregnancy'])\n#print(most_common_uses['cough'])\n#print(most_common_uses['pneumonia'])\n#print(most_common_uses['heart disease'])\n#print(most_common_uses['stroke'])\n#print(most_common_uses['high blood pressure'])\n#print(most_common_uses['diabetes'])\n#print(most_common_sense)\n```\n输出：\nmost_common_sense: `heart disease`\nmost_common_uses: {'a': ('heart disease', 'heart disease')}\n```\n输出：\nmost_common_sense: `heart disease`\nmost_common_uses: {'a': ('heart disease', 'heart disease')}\n```\n使用方法：\n在医学领域，经常需要查找一些医学术语的含义和使用方法，可以使用这个方法快速获取相关信息。"}
{"type": "PromptCBLUE", "question": "找出指定的三元组：\n产后抑郁症@### 注意力不集中 在90%的发作中存在。\n实体间关系：外侵部位，临床表现\n答：", "reference_answer": "", "predict_answer": "Helper function\n 函数模板\n 函数模板参数\n 函数体\n 函数的返回值\n 函数的存储类型\n 函数的默认值\n 函数的类型\n 函数的签名\n 函数的null值\n 函数的const值\n 函数的mutable值\n 函数的const非mutable值\n 函数的mutable非const值\n 函数的const和mutable值\n 函数的const且非mutable值\n 函数的未指定值类型\n 函数的指定值类型\n 函数的未指定值类型\n 函数的指定值类型\n 函数的未指定值类型\n 函数的未指定值类型\n\n函数类型、存储类型、返回值、默认值、null值、const值、mutable值、const非mutable值、函数签名、函数null值、函数const值、函数mutable值、函数const非mutable值、函数签名、函数null值、函数const值、函数mutable值、函数const非mutable值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n\n1. 函数类型、存储类型、返回值、默认值、null值、const值、mutable值、函数签名、函数null值、函数const值、函数mutable值、函数未指定值类型\n2. 函数类型、存储类型、返回值、默认值、null值、const值、mutable值、函数签名、函数null值、函数const值、函数mutable值、函数未指定值类型\n3. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n4. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n5. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n6. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n7. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n8. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n9. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n10. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n11. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n12. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n13. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n14. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n15. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n16. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n17. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n18. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n19. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n20. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n21. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n22. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n23. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n24. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n25. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n26. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n27. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n28. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n29. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n30. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n31. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n32. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n33. 函数类型、存储类型、返回值、默认值、null值、函数未指定值类型、函数指定值类型、函数未指定值类型、函数指定值类型、函数未指定值类型\n34. 函数类型、存储类型、返回"}
{"type": "PromptCBLUE", "question": "医疗对话中临床发现实体的阴阳性判别：\n患者：咳嗽的时候右边胸部下面的肋骨处剧痛是怎么回事？咳嗽都不敢咳嗽了\n医生：您好，这种情况多久了呢\n患者：就今天\n医生：有没有其他症状呢？\n患者：没了，就是右边胸部下面的肋骨处很痛\n医生：皮肤有没有疱疹，有没有扭伤呢\n患者：没有\n医生：那疼痛跟呼吸有没有关系呢\n患者：呼吸如果用力的话也会痛，但是没有咳嗽的时候那么痛\n医生：嗯嗯，这样的话您就吃点止咳的药物，再用点止痛的，复方甘草片、双氯芬酸钠\n临床发现实体：咳嗽，肋骨处剧痛，肋骨处很痛，疱疹，扭伤，疼痛，痛，咳\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合\n答：", "reference_answer": "", "predict_answer": "Helper：临床发现实体与阴阳性选项的关联规则\n- 规则1：如果患者有肋骨处剧痛和咳嗽，则可能存在疱疹\n- 规则2：如果患者有肋骨处剧痛和咳嗽，并且皮肤没有疱疹，则可能是扭伤\n- 规则3：如果患者有肋骨处剧痛，没有咳嗽，并且没有疱疹，则可能是呼吸用力时也会疼痛，但与疱疹无关\n- 规则4：如果患者有肋骨处剧痛，没有咳嗽，并且没有疱疹，则可能是没有其他症状，肋骨处很痛\n- 规则5：如果患者有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是存在其他症状，需要进一步检查\n- 规则6：如果患者没有肋骨处剧痛，但是回答很明确，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是存在其他症状，需要进一步检查\n- 规则7：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则8：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则9：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则10：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则11：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则12：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则13：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则14：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则15：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则16：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则17：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则18：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则19：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则20：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则21：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则22：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则23：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则24：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则25：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则26：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则27：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则28：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则29：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则30：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则31：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则32：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则33：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则34：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则35：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则36：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则37：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则38：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则39：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则40：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则41：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则42：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则43：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则44：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则45：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有其他症状，呼吸正常\n- 规则46：如果患者没有肋骨处剧痛，没有回答、不知道、回答不明确或者模棱两可不好推断，则可能是没有"}
{"type": "PromptCBLUE", "question": "_伤用什么好得快\n这个搜索是什么意图？\n类型选项：病因分析，疾病描述，注意事项，医疗费用，病情诊断，就医建议，功效作用，治疗方案，指标解读", "reference_answer": "", "predict_answer": "Helper function for counting the number of elements in a set\n ```\ndef count_numbers(nums):\n    return len(nums)\n\n```\n```\n>>> count_numbers([1, 2, 3, 4, 5])\n5\n```\nHelper function for printing all the even numbers in a range\n```\n```\ndef print_even_numbers(start, end):\n    for num in range(start, end, 2):\n        print(num, end=\" \")\n    print(end+1, end=\" \")\n    for num in range(start+3, end+1, 2):\n        print(num, end=\" \")\n    print(start, end=\" \")\n```\n```\n>>> print_even_numbers(2, 10)\n2 4 6 8 10\n4 6 8 10\n6 8 10\n10\n```"}
{"type": "PromptCBLUE", "question": "（空）\n这句话是什么意图？\n类型选项：关于就医建议的解答，关于注意事项的提问，关于用药建议的解答，关于个人基本信息的询问，关于已有检查和治疗的提问，给出诊断，关于用药建议的提问，关于已有检查和治疗的提问，关于就医建议的提问，关于注意事项的解答，关于症状的询问，关于症状的回答\n答：", "reference_answer": "", "predict_answer": "HelperMethod：通过定义一个方法，将一些代码封装在一个方法中，可以在需要使用该代码时，直接调用该方法。\n\n使用方法：\n\n- 在编写代码时，将一些重复的代码封装在一个方法中，减少代码的重复性。\n- 在需要调用其他类中的代码时，直接调用该方法，而不需要知道其他类中具体的代码实现。\n\n示例：\n\n```python\ndef calculate_total(orders):\n    # 重复计算每个订单的金额\n    total = 0\n    for order in orders:\n        total += order.total\n    return total\n```\n\n在需要计算整个订单的总价时，可以直接调用 calculate_total() 方法，而不需要知道每个订单的具体实现。"}
{"type": "PromptCBLUE", "question": "判断下面问诊句子的意图:\n建议吃那种钙啊\n选项：关于个人基本信息的回答，关于个人基本信息的询问，关于注意事项的解答，关于症状的回答，关于用药建议的提问，关于用药建议的解答，关于症状的询问，关于已有检查和治疗的提问，关于已有检查和治疗的提问，关于病因的询问，关于就医建议的提问，关于就医建议的解答", "reference_answer": "", "predict_answer": "Helper方法：\n- ```\n- \tdef check_understanding(self, question):\n- \t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_question(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_answer(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_data(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_treat(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_history(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_plan(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_insurance(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_law(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_department(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_pulse(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_question(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_answer(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_data(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_treat(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_history(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_plan(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_insurance(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_law(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_department(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_understanding(self, question, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_pulse(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_question(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_answer(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_data(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_treat(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_history(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_plan(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_insurance(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_law(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_department(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_question(self, question, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_answer(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_data(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_treat(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_history(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_plan(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_insurance(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_law(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_medical_department(self, answer):\n- \t\t\treturn \"意图不明确\"\n- \t\t\n- \t\tdef check_understanding(self, question, answer):\n..."}
{"type": "PromptCBLUE", "question": "（1）术后辅助放疗前已经行TMZ化疗患者；\n是什么临床试验筛选标准类型？\n选项：酒精使用，数据可及性，居住情况，实验室检查，饮食，设备，症状(患者感受)，治疗或手术，过敏耐受，预期寿命，疾病，诊断，器官组织状态，特殊病人特征，护理，性别\n答：", "reference_answer": "", "predict_answer": "Helper.prototype.init = function() {\n    var self = this;\n    this.el = $('#el-' + this.options.id);\n    this.el.on('change', function() {\n        var selected = self.el.val();\n        self.options.onChange(selected);\n    });\n    this.el.selectpicker({\n        autoclose: true,\n        dropdown: true,\n        move: true,\n        onopen: function(ev, ui) {\n            self.el.trigger('change');\n        }\n    });\n    this.el.selectpicker('val', this.options.value);\n    return this;\n};\n\nHelper.prototype.initSelect = function(select, options) {\n    var self = this;\n    select.selectpicker(options);\n    select.on('change', function() {\n        var selected = select.selectpicker('val');\n        self.options.onChange(selected);\n    });\n    return this;\n};\n\nHelper.prototype.initInput = function(input, options) {\n    var self = this;\n    input.val(this.options.value);\n    input.on('keyup', function() {\n        var value = input.val();\n        self.options.onChange(value);\n    });\n    input.on('blur', function() {\n        var value = input.val();\n        if (value === self.options.value) {\n            input.parent().remove();\n        } else {\n            input.parent().show();\n        }\n    });\n    input.select();\n    input.on('mousedown', function(e) {\n        e.stopImmediatePropagation();\n    });\n    input.on('mouseup', function(e) {\n        e.stopImmediatePropagation();\n    });\n    input.on('keypress', function(e) {\n        e.stopImmediatePropagation();\n    });\n    input.on('keyup', function(e) {\n        e.stopImmediatePropagation();\n    });\n    return this;\n};\n\nHelper.prototype.show = function() {\n    var self = this;\n    return this.el.show().on('change', function() {\n        var selected = self.el.val();\n        self.options.onChange(selected);\n    });\n};\n\nHelper.prototype.hide = function() {\n    return this.el.hide();\n};\n\nHelper.prototype.isOpen = function() {\n    return this.el.is(':visible');\n};\n\nHelper.prototype.isVisible = function() {\n    return this.el.is(':visible');\n};\n\nHelper.prototype.isInput = function(el) {\n    return $.isPlainObject(el) && el.type in this.inputs;\n};\n\nHelper.prototype.showInput = function(el, options) {\n    options = $.extend({\n        onBlur: function() {\n            this.element.select();\n        },\n        onKeyPress: function(e) {\n            if (e.which === 13) {\n                this.element.select();\n                e.stopImmediatePropagation();\n            }\n        },\n        type: this.isInput(el) ? this.isInput(el).type : this.options.type,\n        size: this.isInput(el) ? this.isInput(el).size : this.options.size,\n        maxLength: this.isInput(el) ? this.isInput(el).maxLength : this.options.maxLength,\n        autocomplete: this.isInput(el) ? this.isInput(el).autocomplete : this.options.autocomplete,\n        autocompeteDelay: this.isInput(el) ? this.isInput(el).autocompeteDelay : this.options.autocompeteDelay,\n        menu: this.isInput(el) ? this.isInput(el).menu : this.options.menu,\n        dropdownAlignRight: this.isInput(el) ? this.isInput(el).dropdownAlignRight : this.options.dropdownAlignRight,\n        dropdownAutoWidth: this.isInput(el) ? this.isInput(el).dropdownAutoWidth : this.options.dropdownAutoWidth,\n        icons: this.isInput(el) ? this.isInput(el).icons : this.options.icons,\n        iconsPlacement: this.isInput(el) ? this.isInput(el).iconsPlacement : this.options.iconsPlacement,\n        width: this.isInput(el) ? this.isInput(el).width : this.options.width,\n        html: this.isInput(el) ? this.isInput(el).html : this.options.html\n    }, options);\n    this.inputs.push(el);\n    el.select();\n    return this;\n};\n\nHelper.prototype.showInputs = function() {\n    var self = this;\n    return this.inputs.each(function() {\n        self.showInput(this, self.options);\n    });\n};\n\nHelper.prototype.hideInputs = function() {\n    var self = this;\n    return this.inputs.each(function() {\n        self.hideInput(this, self.options);\n    });\n};\n\nHelper.prototype.isInputHidden = function(el) {\n    return $.isPlainObject(el) && el.hidden;\n};\n\nHelper.prototype.showInputHidden = function(el, hide) {\n    if (hide) {\n        el.hidden = true;\n        el.style.display = 'none';\n    } else {\n        el.hidden = false;\n        el.style.display = '';\n    }\n};\n\nHelper.prototype.hideInputHidden = function(el, hide) {\n    if (hide) {\n        this.showInputHidden(el, true);\n    } else {\n        this.showInputHidden(el, false);\n    }\n};\n\nHelper.prototype.showSelectHidden = function(select, hide) {\n    if (hide) {\n        select.hidden = true;\n        select.style.display = 'none';\n    } else {\n        select.hidden = false;\n        select.style.display = '';\n    }\n};\n\nHelper.prototype.hideSelectHidden = function(select, hide) {\n    if (hide) {\n        this.showSelectHidden(select, true);\n    } else {\n        this.showSelectHidden(select, false);\n    }\n};\n\nHelper.prototype.showInputs = function(show) {\n    this.inputs.each(function(i, el) {\n        this.showInput(el, this.options);\n    });\n    return this;\n};\n\nHelper.prototype.showSelect = function(show) {\n    this.showSelectInput(this.select, show);\n    return this;\n};\n\nHelper.prototype.showSelectInput = function(select, show) {\n    if (show) {\n        select.selectpicker('show');\n        select.selectpicker('val', this.options.value);\n    }\n    return this;\n};\n\nHelper.prototype.showInputHidden = function(show) {\n    this.showInput(this.inputs[0], this.options);\n};\n\nHelper.prototype.showSelectInputHidden = function(select, show) {\n    if (show) {\n        this.showSelect(show);\n        this.hideSelectInput(select, false);\n    } else {\n        this.hideSelectInput(select, false);\n    }\n};\n\nHelper.prototype.showInputsHidden = function(show) {\n    this.inputs.each(function(i, el) {\n        this.showInputHidden(el, show);\n    });\n    return this;\n};\n\nHelper.prototype.showInputHiddenAll = function(show) {\n    this.inputs.each(function(i, el) {\n        this.showInputHidden(el, show);\n    });\n    return this;\n};\n\nHelper.prototype.showSelectInputHiddenAll = function(select, show) {\n    this.showSelect(show);\n    this.hideSelectInput(select, false);\n};\n\nHelper.prototype.showInputHiddenAll = function(show) {\n    this.showInput(this.inputs, this.options);\n}\n\nHelper.prototype.showSelectInput = function(show) {\n    this.showSelect(show);\n    this.hideSelectInput(this.select, false);\n};\n\nHelper.prototype.showSelectInput = function(show) {\n    if (show) {\n        this.showSelectInput(this.select, show);\n        this.showSelectInput(this.el, show);\n    }\n    return this;\n};\n\nHelper.prototype.showInput = function(inputs"}
{"type": "PromptCBLUE", "question": "“艾滋病吃中药好还是西药好”和“听说吃中药对hiv有好处是哪些中药”是同一个意思吗？\n选项：是的，不是\n答：", "reference_answer": "", "predict_answer": "Helper类是使用Python中的类的功能创建的，因此可以为Helper类指定__init__()函数。在定义Helper类时，可以使用self作为参数，并传递给self任何值都可以被Helper类实例化。"}
{"type": "PromptCBLUE", "question": "根据对话历史和当前对话，抽取症状实体，以及这些实体的阴阳性：\n对话历史：\n医生：嗓子哑吗？\n患者：上午十点多发烧了吃药了\n当前对话：\n患者：咳嗽厉害有痰，不是一直咳嗽\n候选：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状\n答：", "reference_answer": "", "predict_answer": "Helper方法：\n- `.label()` 给实体分配标签，可以为标签添加阴阳性。\n- `.predict()` 返回实体为疾病的概率。\n- `.log_prob()` 返回分类模型的逻辑概率。\n- `.predict_label()` 返回实体为疾病的概率，并且标记为阴或阳性。\n- `.confidence()` 返回每个预测的置信度。\n- `.score()` 返回模型总体表现的score。\n- `.trainable()` 返回是否所有属性都是可训练的。\n- `.learner()` 返回内部使用哪种分类算法。\n- `.load()` 导入模型到其他框架中。\n- `.save()` 将模型导出到其他框架中。"}
{"type": "PromptCBLUE", "question": "“胃一阵一阵拧着疼”和“胃一阵一阵疼还腹泻怎么办”的意思有多相似？\n选项：完全不匹配或者没有参考价值，很少匹配有一些参考价值，部分匹配，完全匹配", "reference_answer": "", "predict_answer": "Helper function `sort` is used to sort a list of `double`."}
{"type": "PromptCBLUE", "question": "找出当前对话中的症状，并判断阴阳性：\n对话历史：\n患者：哦哦\n患者：昨天开始的\n当前对话：\n医生：一直高热吗\n症状阴阳性选项：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状", "reference_answer": "", "predict_answer": "Helper方法：\n- `.is_negative`（）：判断子句是否为阴性；\n- `.is_positive`（）：判断子句是否为阳性；\n- `.is_don't_care`（）：判断子句是否不重要；\n- `.str`（）：返回子句的字符串表示；\n- `.contains`（str）：根据字符串判断是否包含子句；\n- `.not`（）：创建一个新的子句，不包含当前子句；\n- `.and`（其他子句）：将当前子句与另一个子句组合成一个复合子句。\n\n示例：\n```\n# 判断句子是否为阳性或阴性\ndef is_symptom(symptom):\n    return \"没有患有该症状\", \"患有该症状\", \"无法根据上下文确定\", \"该症状是否出现\", \"该症状出现了\", \"该症状没有出现\", \"该症状出现了\".split()\n```\n生成 `is_symptom` 函数，用于判断句子是否包含特定症状：\n```\ndef is_symptom(symptom):\n    return [\"symptom_name\", \"is\", \"`{symptom}`\"]\n```\n使用 `is_symptom` 函数判断句子是否包含特定症状：\n```\n!ls\n!is symptom root dir\n!is_symptom(\"root dir\")\n!is_symptom(\"ls\")\n!is_symptom(\"dir\")\n!is_symptom(\"file\")\n!is_symptom(\"dir\", \"file\")\n!is_symptom(\"root dir\", \"dir\")\n!is_symptom(\"root dir\", \"file\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"file\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom(\"dir\", \"dir\")\n!is_symptom"}
{"type": "PromptCBLUE", "question": "给出对话中临床发现实体的阴阳性判断：\n患者：尿潜血2没怎么在意后来感冒发烧扁桃体发炎打点滴肾一直有点疼是先去查肾脏\n医生：你好，这里是河南理工大学第一附属医院男科杨医生，出现尿潜血，应该及时去医院做个彩超和肾功能。\n患者：我准备诊所医生说让我先把发烧和扁桃体发炎看好再去\n患者：可以这样吗\n医生：也可以\n患者：我怕打的点滴会影响肾\n医生：正常剂量用药是不影响的。\n患者：尿潜血2+是不是很严重一般怎么引起的好治吗？\n医生：不严重，首先要查明原因，最常见的是感染导致的。\n患者：那肾脏一直一阵一阵的感觉就像是跳动。有时候好隐隐作痛！\n医生：那尽快去查查。\n医生：还有结石导致的。\n患者：还是先把发烧和扁桃体发炎治好？我发烧四天了。第一天没看第二天吃的药刚开始压下去了后来又发烧了。又打的小针。也是刚开始压下去了又发烧。昨天打的点滴四瓶。打完就感觉好多了。然后一夜也没发烧。然后早晨又发烧就这样反反复复\n医生：如果治疗效果不好，还是尽快去大医院做个检查看看，不要耽误治疗。\n患者：那我先打点滴先治感冒发烧扁桃体发炎。再去检查肾脏行吗医生\n患者：尿潜血2+是不是也和手淫性生活频繁导致的\n患者：医生？\n患者：在吗\n患者：怎么不说话了医生\n患者：我真的很担心\n医生：这种情况去医院查个彩超和肾功能，几十块钱很快出结果。\n医生：用不着在家担心。\n患者：我现在输液呢！发烧好了去检查\n临床发现实体：肾一直有点疼，发烧，感冒，尿潜血，扁桃体发炎，结石\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合\n答：", "reference_answer": "", "predict_answer": "Helper方法：\n- find_polar：返回给出的对话中出现的阳性或阴性的实体列表，并对其进行情感分类，如喜悦、担心等。\n- find_important_expression：根据病人状态，返回与病人病情、治疗方案、生活习惯等相关的医学知识，并对其进行情感分类，如建议、警示等。\n- find_neutral_expression：返回与病人状态无实际意义的词汇或短语，并对其进行情感分类。"}
{"type": "PromptCBLUE", "question": "根据下面的问诊对话自动生成对应的诊疗报告：\n问诊对话历史：\n患者：3个月的宝宝细菌性脑膜炎出院后，有轻微的咳嗽怎么办，需要吃药吗\n医生：你好\n医生：您有任何问题可以随时和我联系或留言，我看到后会第一时间回复。\n患者：你好刘医生\n医生：你好\n医生：宝贝是足月出生吗，出生时候一切顺利吗\n患者：剖腹产\n医生：宝贝是母乳喂养吗，脑膜炎出院多久了，当时孩子痊愈了吗\n患者：出院两天了\n患者：当时就是CRP高\n医生：刚开始宝贝是因为什么症状发现的脑莫炎情况呢\n患者：反复发烧\n医生：嗯嗯，宝贝住院治疗了几天，\n医生：宝贝现在吃奶怎么样，精神好吗，咳嗽一天几次，听着有痰吗？\n患者：17天\n患者：吃奶很好，精神也很好\n医生：嗯，宝贝最近有没有着凉，鼻塞流鼻涕？\n患者：没有痰\n医生：嗯嗯，咳嗽不影响孩子睡觉吧\n患者：就是前天上午出院后，下午就有点咳嗽\n患者：不影响\n医生：宝贝现在这个情况，您可以多给宝宝喂点，适当保暖看看。观察12天\n患者：出院医生有拿的头孢克洛可以治疗咳嗽吗\n医生：如果宝贝咳嗽加重，精神不好，就带宝宝去二级以上公立医院小儿内科就诊检查一下血常规或让医生听诊看看，排除病毒或细菌感染引起的咳嗽\n医生：头孢是消炎的药物，医生让出院后给孩子吃的吗\n患者：嗯\n患者：孩子太小了，打的针天数太多了，找不到血管了\n医生：如果让宝贝巩固治疗的话可以继续吃几天\n医生：如果咳嗽的话最好听诊看看，用不用加止咳药物\n患者：现在孩子稍微有一点点不舒服都害怕\n医生：嗯嗯，孩子比较小，生病的花病情变化比较快，如果宝贝精神不好，咳嗽加重，就及时就诊！\n患者：哦，打了那么多天抗生素，才出院两天，药物孩子还没有消化掉吧\n医生：药物一般还没有代谢完，但是孩子现在咳嗽，可以观察两天看看，没有好转的话需要检查一下，看用不用继续服用药物\n医生：如果检查宝贝是病毒性的话就可以口服抗病毒药物或者化痰药物，这个需要面诊医生听诊检查后再下结论！\n患者：嗯，孩子现在有点积屎怎么办\n医生：宝贝比较小，脑膜炎刚出院，是宝贝体格比较差的时候，需要多给宝宝喝水，避免着凉，预防感冒\n医生：具体宝贝现在什么表现呢？\n患者：孩子现在不耽误吃睡玩，就是每天拉的大便勤，很少\n医生：宝贝大便什么样呢，稀吗，水多不多，是什么颜色呢\n医生：摸着宝贝肚子胀吗，小便量和平时一样吗\n患者：正常的一上午两三次多的，剩下的可能放屁都带点屎\n患者：黄色的，有点奶瓣，\n医生：嗯嗯，宝贝这个情况也有可能是消化不良引起的，这样多久了？有没有带宝宝看医生，做过检查吗\n患者：住院的时候一直这样，也化验过大便，医生说可能是打针的问题，现在出院了还这样\n医生：宝贝这个情况可以暂时给宝宝吃点益生菌调节一下，观察35天，平时注意腹部保暖，如果宝贝症状加重，大便增多，可以带宝宝去二级以上公立医院小儿内科就诊检查一下大便常规看看，排除肠炎情况\n患者：哦，好的谢谢了\n医生：不客气\n说明：诊疗报告分为主诉, 现病史, 辅助检查, 既往史, 诊断, 建议这六个章节。", "reference_answer": "", "predict_answer": "Helper方法：\n```\ndef write_pulsel(pulsel):\n    if pulsel:\n        return \"Pulsel : {:.2f}%,{:.2f}%,{:.2f}%\".format(pulsel.hr, pulsel.bpm, pulsel.min_ht)\n    else:\n        return \"\"\n\nprint(\"主诉：\", end = write_pulsel(患者的主诉)) \nprint(\"现病史：\", end = write_pulsel(患者的现病史)) \nprint(\"辅助检查：\", end = write_pulsel(患者的辅助检查)) \nprint(\"既往史：\", end = write_pulsel(患者的既往史)) \nprint(\"诊断：\", end = write_pulsel(医生的诊断)) \nprint(\"建议：{\", end = \",\".join([\"宝贝出院后有轻微的咳嗽，需要观察12天，如果症状加重，需要及时就诊。咳嗽不影响孩子睡觉的话可以适当保暖看看。如果宝贝精神不好，大便增多，需要检查大便常规看看。积屎的话可以给宝贝吃点益生菌调节一下，观察35天。平时注意腹部保暖，如果症状加重，需要及时就诊。\"]))"}
{"type": "PromptCBLUE", "question": "医疗搜索：宝宝经常漾奶怎么办\n回答内容：你的情况可能是宝宝肚子不舒服吧,可能是上火了,拉不出大便,肚子胀,我家宝宝以前经常都晚上哭闹,白天就好好睡,那时真没办法,给他喝一些清火的吧,我家宝现在有时还是这样,晚上闹得厉害,白天又不怎么样,都不知道怎么办呀,因为是在这家跟奶奶,也是在吃奶粉,有时也吃饭,不知道是不是肠道问题呢.\n上述搜索和回答是否相关？\n选项: 相关，不相关", "reference_answer": "", "predict_answer": "Helper函数用于将一些逻辑分散到多个函数中，而不会影响主函数。它们非常适合处理一些需要重复操作的情况。我们可以将之前提到的计算卡路里和脂肪的代码复制到 helper 函数中，并更改计算卡路里和脂肪的代码，以适应不同类型的食物：\n\n```\ndef calculate卡路里_and脂肪(食物):\n    \"\"\"计算食物的卡路里和脂肪含量\n    Args:\n       食物: 一个 `食物` 实例\n    Returns:\n       一个 `卡路里` 和 `脂肪` 实例\n    \"\"\"\n    # 计算食物的卡路里\n    return {'卡路里': calculate卡路里(食物.calories), '脂肪': calculate脂肪(食物.fat)}\n    \n    # 计算食物中的脂肪含量\n    return {'脂肪': calculate脂肪(食物.grams_of_fat), '卡路里': calculate卡路里(食物.grams_of_fat * 3.02)}\n```\n\n现在我们可以在主函数中使用 helper 函数：\n\n```\ndef main():\n    # 计算食物的卡路里和脂肪\n   食物 = Pizza('chicken', '8 pieces')\n    calculate卡路里_and脂肪(食物)\n    \n    # 输出食物的卡路里和脂肪\n    print('{}的{}片鸡胸肉': format食物('chicken'), '卡路里', '脂肪')\n```\n\n这样，我们就可以在主函数中使用 helper 函数来计算食物的卡路里和脂肪，而不必担心任何重复代码。"}
{"type": "PromptCBLUE", "question": "帮助患者自动总结问诊的诊疗报告：\n问诊对话历史：\n患者：我小孩4岁感冒老是好不了，去医院检查是气管炎，有一个多月了，吃药打针都没有好现在主要是有点咳嗽和流鼻涕，请问吃什么药才能好。\n医生：你好，目前咳嗽厉害吗，清鼻涕，还是脓鼻涕？\n患者：只是有点咳，有时清鼻涕有时脓\n医生：如果咳嗽不厉害，一般吃药就可以了，不需要输液。流鼻涕吃点感冒药，注意保暖\n患者：请问，什么感冒药之内的\n医生：可以吃小儿氨酚黄那敏颗粒\n患者：不用消炎药吗\n医生：再加点\n医生：可以吃点头孢克肟颗粒，止咳橘红合剂\n医生：目前痰多，还是干咳\n患者：干咳\n医生：干咳的话，吃复方福尔可定口服液\n医生：不要吃橘红，橘红主要对有痰的咳嗽起作用\n患者：有时咳的时候想吐\n医生：那样子咳的，还是比较厉害点\n医生：消炎药需要吃一下\n患者：不算厉害\n医生：止咳药是要吃的，感冒药也要吃。咳嗽厉害需要吃消炎药，不厉害，可以先不吃\n患者：就是早上起床和.晚上有点\n医生：那先吃点止咳药，感冒药\n患者：是哪几种呢\n医生：就你目前情况，暂时可以吃小儿氨酚黄那敏颗粒，复方福尔可定口服液\n患者：好的，谢谢\n医生：好的，别客气，祝宝宝健康快乐，再见\n说明：诊疗报告分为主诉, 现病史, 辅助检查, 既往史, 诊断, 建议这六个章节。\n答：", "reference_answer": "", "predict_answer": "Helper Method\ndef summarize_medical_report(input_report):\n    # 生成诊疗报告\n    main_ctxt = '主诉：'\n    main_diagnosis = '现病史：'\n    main_other = '辅助检查：'\n    main_treat = '诊断：'\n    main_advice = '建议：'\n    # 添加主诉信息\n    main_ctxt += input_report.主诉\n    # 添加现病史信息\n    if input_report.咳嗽:\n        main_diagnosis += '干咳'\n    elif input_report.痰多:\n        main_diagnosis += '有痰咳嗽'\n    else:\n        main_diagnosis += '咳嗽'\n    if input_report.流鼻涕:\n        main_other += '流鼻涕'\n    elif input_report.鼻塞:\n        main_other += '鼻塞'\n    else:\n        main_other += '无鼻部症状'\n    # 添加辅助检查信息\n    main_ctxt += input_report.辅助检查\n    main_diagnosis += input_report.辅助检查\n    main_other += '辅助检查：'\n    # 添加既往史信息\n    main_ctxt += input_report.既往史\n    main_diagnosis += input_report.既往史\n    main_other += '既往史：'\n    # 添加诊断信息\n    main_ctxt += input_report.诊断\n    main_diagnosis += input_report.诊断\n    main_advice += '建议：'\n    main_treat += '根据'\n    main_advice += '根据'\n    # 添加建议信息\n    main_advice += '建议'\n    main_advice += '建议'\n    # 输出报告信息\n    return main_ctxt, main_diagnosis, main_other, main_treat, main_advice\ninput_report = MedicalReport()\nprint( summarize_medical_report(input_report) )"}
{"type": "PromptCBLUE", "question": "③ 受教育程度为初中文化（含初中毕业）以上；\n是什么临床试验筛选标准类型？\n选项：口腔相关，护理，教育情况，肿瘤进展，吸烟状况，怀孕相关，疾病\n答：", "reference_answer": "", "predict_answer": "Helper函数接受一个或多个参数，并且返回一个表达式，该表达式可以用于计算其他值。在Python中，可以使用 lambda 表达式来创建一个匿名函数，该函数接受一个或多个参数，并返回一个值。然后可以使用该值来计算其他值。例如："}
{"type": "PromptCBLUE", "question": "我想知道下面两个搜索词的意思有多相同。\n“分娩期焦虑如何护理”，“产后焦虑症的表现”。\n选项：完全一致，后者是前者的语义子集，后者是前者的语义父集，语义无直接关联\n答：", "reference_answer": "", "predict_answer": "HelperMethod 抽象类中的方法。它通常包含一些处理特定类型的对象的通用逻辑，使代码更容易阅读和维护。该抽象类中的方法称为抽象方法，而类则被称为抽象类。"}
{"type": "PromptCBLUE", "question": "请问是什么意图类型？\n喝水，吃饭就哭，考虑是有疼痛的情况，考虑有咽峡部长疱疹的可能。\n意图选项：关于病因的询问，关于病因的回答，关于症状的回答，关于症状的询问，关于已有检查和治疗的提问，关于已有检查和治疗的提问，关于注意事项的解答，关于个人基本信息的询问，给出诊断，关于个人基本信息的回答，关于注意事项的提问，关于就医建议的提问，关于用药建议的提问，关于用药建议的解答，关于就医建议的解答", "reference_answer": "", "predict_answer": "Helper方法：\n- __init__(self, input_data):\n    # 初始化参数\n    self.input_data = input_data\n    # 输入数据表示法转换\n    self.input_data = self.input_data.decode('utf-8')\n    # 处理输入数据\n    self._process_input_data()\n    # 处理输入数据\n    self._process_input_data()"}
{"type": "PromptCBLUE", "question": "来源不明、无法追溯标本。\n这句话是什么临床试验筛选标准类型？\n类型选项：实验室检查，性取向，特殊病人特征，体征(医生检测），预期寿命，诊断，吸烟状况，健康群体，知情同意，依存性，睡眠，护理，年龄，数据可及性，过敏耐受，治疗或手术，疾病，饮食，种族，口腔相关，受体状态，肿瘤进展，锻炼，酒精使用，症状(患者感受)，疾病分期，研究者决定，成瘾行为，病例来源，器官组织状态，怀孕相关，献血，读写能力，药物，设备\n答：", "reference_answer": "", "predict_answer": "Helper function is a function that provides a specific type of functionality without altering the caller’s stack frame. They are commonly used in unit testing to mock or stub out the return value of a function."}
{"type": "PromptCBLUE", "question": "以下回答内容是否与这里的医疗搜索相关？\n医疗搜索：治疗甲沟炎快速方法\n回答内容：治疗甲沟炎有什么好的方法?现在生活中，很多人不注重卫生，导致很多皮肤问题出现。有些朋友在甲沟处出现组织损伤，细菌就很容易趁机而入，感染伤口，导致出现甲沟炎。大家千万不要小看这个问题，尤其是对哪些本身抵抗力就比较弱的人，如果不及时治疗，很可能造成无法估量的后果。甲沟炎的出现不仅使脚部出现疼痛感，还可能引发更严重的疾病，所以，患者朋友们应当及时治疗。下面，我们就来看看治疗甲沟炎有什么好的方法?  专家指出，治疗甲沟炎可以用以下的方法：  1、热敷  热敷是很常见的治疗方法。根据热血原理和药物化学反应，用毛巾外敷局部，可以有效促进血液循环，增强局部白细胞的吞噬作用和组织活力，可使血肿受限，有助于抵御感染。不过有时需要切开引流，引流充分。可以不用一定使用抗生素，如果感染扩散严重可口服抗生素。  2、理疗  甲沟炎的治疗方法可采用超短波，红外线等理疗方式，将受感染部位的金黄色葡萄球菌等杀灭，抑制病菌在伤口部位的生长繁殖，从而起到治疗效果。用这种方法达到的效果是非常好的，可以在病情没有那么严重的时候使用。  3、外敷  即中药敷贴，这是治疗甲沟炎的一种保守方法作用就是消肿止痛、排毒，适合早期甲沟炎患者。另外，外敷药物的同\n选项: 相关，不相关\n答：", "reference_answer": "", "predict_answer": "Helper Method"}
{"type": "PromptCBLUE", "question": "请问是什么类型？\n（5）血压>140/90mmHg；\n临床试验筛选标准选项：疾病，症状(患者感受)，实验室检查，特殊病人特征，睡眠，参与其它试验，读写能力，献血，受体状态，口腔相关，治疗或手术，怀孕相关，依存性，护理，健康群体\n答：", "reference_answer": "", "predict_answer": "HelperMethod 是一个抽象类，它没有任何实例变量，它的构造函数也没有任何 return 语句。抽象类只能被继承，但不能实例化。抽象类中的方法必须定义为抽象，即无法被 override。抽象方法的调用会抛出一个异常，抽象类必须指定一个子类，否则程序会崩溃。"}
{"type": "PromptCBLUE", "question": "判断下面问诊句子的意图:\n现在这个孩子出现咳嗽的情况应该是炎症下行\n选项：关于已有检查和治疗的提问，关于病因的询问，关于个人基本信息的回答，关于就医建议的解答，关于病因的回答，关于用药建议的解答，关于症状的询问，关于症状的回答，关于个人基本信息的询问，关于注意事项的解答，关于已有检查和治疗的提问，关于用药建议的提问，关于就医建议的提问，给出诊断，关于注意事项的提问", "reference_answer": "", "predict_answer": "Helper method to check if a value is an integer in Python\ndef is_integer(value):\n    return int(value) == value and not isinstance(value, float)"}
{"type": "PromptCBLUE", "question": "血吸虫病@[ 疟疾 ](/topics/zh-cn/161) ### 沙门菌感染 体征/症状 检查 体征/症状 沙门菌病会与急性血吸虫病或慢性血吸虫病混淆。\n问题：句子中的同义词，发病率，鉴别诊断，相关（导致）等关系类型三元组是什么？", "reference_answer": "", "predict_answer": "Helper.replaceAll(\"##([a-zA-Z0-9_]+)##\", \"$1\");\n\n这个方法的作用是替换一个正则表达式中所有的##XXX##元组，其中XXX是一个任意字符串，其中元组的内容必须是关系类型三元组：第一个元组中的类型必须与第二个元组中的类型相关。"}
{"type": "PromptCBLUE", "question": "对话历史：\n患者：她之前扁桃体红肿，一直吃药了，后来不是发炎，但是还大\n医生：嗯，这个肿大消不了\n当前对话：\n患者：就把药停了，然后现在流鼻涕，担心会再次发炎\n根据上述对话，症状有哪些？这些症状的阴阳性是？\n选项：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状", "reference_answer": "", "predict_answer": "Helper Method\n```python\ndef find_doctors_suggestions(text):\n    return [doc.name for doc in Doctor.objects.all()]\n\ndef find_patient_suggestions(text):\n    return [patient.name for patient in Patient.objects.all()]\n\ndef find_medication_suggestions(text):\n    return [medication.name for medication in Medication.objects.all()]\n\ndef find_lab_test_suggestions(text):\n    return [lab_test.name for lab_test in LabTest.objects.all()]\n\ndef find_medical_record_suggestions(text):\n    return [medical_record.text for medical_record in MedicalRecord.objects.all()]\n\ntext = input('请输入症状: ')\nsuggestions = find_doctors_suggestions(text)\nif suggestions:\n    print('医生建议: ' + ' '.join(suggestions))\ntext = input('请输入患者: ')\nsuggestions = find_patient_suggestions(text)\nif suggestions:\n    print('患者建议: ' + ' '.join(suggestions))\ntext = input('请输入药物: ')\nsuggestions = find_medication_suggestions(text)\nif suggestions:\n    print('药物建议: ' + ' '.join(suggestions))\ntext = input('请输入实验室检查: ')\nsuggestions = find_lab_test_suggestions(text)\nif suggestions:\n    print('实验室检查建议: ' + ' '.join(suggestions))\ntext = input('请输入病历记录: ')\nsuggestions = find_medical_record_suggestions(text)\nif suggestions:\n    print('病历记录建议: ' + ' '.join(suggestions))\n```\n\n Usage:\nHelper method:\n```python\ndef find_doctors_suggestions(text):\n    return [doc.name for doc in Doctor.objects.all()]\n\ndef find_patient_suggestions(text):\n    return [patient.name for patient in Patient.objects.all()]\n\ndef find_medical_record_suggestions(text):\n    return [medical_record.text for medical_record in MedicalRecord.objects.all()]\n\ntext = input('请输入症状: ')\nsuggestions = find_doctors_suggestions(text)\nif suggestions:\n    print('医生建议: ' + ' '.join(suggestions))\ntext = input('请输入患者: ')\nsuggestions = find_patient_suggestions(text)\nif suggestions:\n    print('患者建议: ' + ' '.join(suggestions))\ntext = input('请输入药物: ')\nsuggestions = find_medication_suggestions(text)\nif suggestions:\n    print('药物建议: ' + ' '.join(suggestions))\ntext = input('请输入实验室检查: ')\nsuggestions = find_lab_test_suggestions(text)\nif suggestions:\n    print('实验室检查建议: ' + ' '.join(suggestions))\ntext = input('请输入病历记录: ')\nsuggestions = find_medical_record_suggestions(text)\nif suggestions:\n    print('病历记录建议: ' + ' '.join(suggestions))\n```\n\nNote:\n1. The helper methods are used to find the suggestions based on the inputted text.\n2. In the main method, we can use a list of tuples to store the suggestions. The first element of the tuple is the word, and the rest of the tuples are the corresponding suggestions.\n3. In the main method, we can iterate over the list of suggestions and use them to generate the suggestions."}
{"type": "PromptCBLUE", "question": "总结下面问诊对话，并给出问诊报告\n问诊对话历史：\n患者：小孩可能是晚上吹空调感冒了有点发烧，睡觉时感觉有点鼻塞，可以给他吃小儿三九感冒药和头孢吗\n医生：您好\n医生：宝宝体温多少度，发烧几天了\n患者：今天一点过，37度2\n医生：流鼻涕不，鼻塞严重吗\n医生：咳嗽吗\n患者：就是有点发烧，轻微鼻塞\n患者：没有其它症状\n医生：多喝水观察，可以吃氨酚黄那敏一类的感冒药观察\n医生：不用吃头孢\n医生：那应该是着凉引起的轻微小感冒，\n医生：不是淘宝，如果要去体湾版不超过三百五或者明天变黄了再给淘宝，\n患者：哦，我给他喂了一包三九和一包头孢\n医生：下次先别吃\n患者：好\n医生：（空）\n患者：好的谢谢\n医生：别客气随时咨询\n患者：那今天只给他吃感冒药\n医生：行\n患者：喂三九一种药就可以了吗\n医生：行\n患者：他今天睡觉好像有点像打呼噜呼吸声有点大\n医生：应该是鼻塞造成的\n患者：哦\n医生：注意观察\n患者：哦好的\n医生：如果打呼噜严重，就得去医院检查一下，排除扁桃体发炎造成的\n患者：如果只是普通感冒就不用吃头孢是吗，如果是扁桃体发炎需要吃头孢吗\n医生：是的\n患者：哦\n患者：谢谢\n医生：别客气随时咨询\n医生：宝宝现在怎么样了？\n说明：诊疗报告分为主诉, 现病史, 辅助检查, 既往史, 诊断, 建议这六个章节。\n答：", "reference_answer": "", "predict_answer": "Helper：\n```python\ndef make_patient():\n    return \"患者：\", \"主诉：\",体温, \"：\", \"现病史：\",鼻塞, \"：\", \"辅助检查：\", \"既往史：\"\ndef make_doctor():\n    return \"医生：\", \"主诉：\", \"医生：\", \"诊断：\", \"建议：\"\ndef make_question():\n    return \"请问：\"\ndef make_answer():\n    return \"好的：\"\ndef make_end():\n    return \"结束：\"\npatient = make_patient()\ndoctor = make_doctor()\nquestion = make_question()\nanswer = make_answer()\nend = make_end()\nprint(patient)\nprint(\" \".join([question, answer, end]))\n```\n输出：\n```\n患者：\n主诉：38.5\n现病史：鼻塞严重\n辅助检查：无\n既往史：无\n诊断：感冒\n建议：多喝水，适当休息，观察病情\n好的：\n医生的：\n```\n```\n请根据上述代码，对诊疗对话历史进行总结，并给出问诊报告。"}
{"type": "PromptCBLUE", "question": "请问是什么意图类型？\n扁平疣用维生素A\n搜索意图选项：病因分析，治疗方案，功效作用，医疗费用", "reference_answer": "", "predict_answer": "意图类型指的是用户在搜索行为中所表达的具体意图。对于扁平疣用维生素A这个搜索意图类型，可以具体分为以下几个意图选项：\n\n- 病因分析：对扁平疣病因的分析和解释。\n- 治疗方案：扁平疣的治疗方案，包括药物治疗、手术治疗等。\n- 功效作用：扁平疣的疗效、作用机制、副作用等功效方面的介绍。\n- 医疗费用：与医疗费用相关的查询，如扁平疣治疗费用、购买维生素A的费用等。\n- 涉及范围：对扁平疣用维生素A的相关内容涉及的范围，包括疾病名称、药品名称、治疗方案等。"}
{"type": "PromptCBLUE", "question": "找出句子中的具有手术治疗，多发地区关系类型的头尾实体对：\n慢性胰腺炎@腹部X线检查对轻度至中度慢性胰腺炎诊断敏感性较低。\n答：", "reference_answer": "", "predict_answer": "Helper Method to find the head and tail entities of a sentence.\n```python\ndef find_head_and_tail_entities(sentence):\n    head = \"\"\n    tail = \"\"\n    for word in sentence.split():\n        if \"@\" in word and \" \" in word:\n            head += word\n            tail += \" \"\n    return head, tail\n```\n\n Usage: \n- Find head and tail entities of a sentence:\n  * Head: `慢性胰腺炎`\n  * Tail: `腹部X线检查`\n- Find head and tail entities of a sentence:\n  * Head: `轻度至中度慢性胰腺炎`\n  * Tail: `诊断敏感性较低`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `治疗`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `发病率`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `与`\n- Find head and tail entities of a sentence:\n  * Head: `腹部X线检查`\n  * Tail: `诊断`\n- Find head and tail entities of a sentence:\n  * Head: `慢性`\n  * Tail: `胰腺炎`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `检查`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `发病率`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `与`\n- Find head and tail entities of a sentence:\n  * Head: `诊断`\n  * Tail: `敏感性较低的腹部X线检查`\n- Find head and tail entities of a sentence:\n  * Head: `慢性胰腺炎`\n  * Tail: `胰腺炎的治疗`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `发病率`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `与`\n- Find head and tail entities of a sentence:\n  * Head: `腹部X线检查`\n  * Tail: `诊断`\n- Find head and tail entities of a sentence:\n  * Head: `慢性`\n  * Tail: `胰腺炎`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `检查`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `发病率`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `与`\n- Find head and tail entities of a sentence:\n  * Head: `诊断敏感性较低`\n  * Tail: `腹部X线检查`\n- Find head and tail entities of a sentence:\n  * Head: `慢性胰腺炎`\n  * Tail: `轻度至中度慢性胰腺炎`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎治疗`\n  * Tail: `手术治疗`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎发病率`\n  * Tail: `多发地区关系类型`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎与`\n- Find head and tail entities of a sentence:\n  * Head: `慢性`\n  * Tail: `胰腺炎`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `检查`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `发病率`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `与`\n- Find head and tail entities of a sentence:\n  * Head: `腹部X线检查`\n  * Tail: `诊断`\n- Find head and tail entities of a sentence:\n  * Head: `慢性`\n  * Tail: `胰腺炎`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `治疗`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎发病率`\n  * Tail: `多发地区关系类型`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎与`\n- Find head and tail entities of a sentence:\n  * Head: `腹部X线检查诊断`\n  * Tail: `敏感性较低`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎治疗`\n  * Tail: `手术治疗`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎多发地区关系类型`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `发病率`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `与`\n- Find head and tail entities of a sentence:\n  * Head: `慢性`\n  * Tail: `胰腺炎`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `检查`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `治疗`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎多发地区关系类型`\n  * Tail: `胰腺炎`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `发病率`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `与`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `地区关系类型`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `与`\n- Find head and tail entities of a sentence:\n  * Head: `慢性`\n  * Tail: `胰腺炎`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `检查`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `治疗`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎多发地区关系类型`\n  * Tail: `胰腺炎`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `发病率`\n- Find head and tail entities of a sentence:\n  * Head: `胰腺炎`\n  * Tail: `与`\n- Find head and tail entities of a"}
{"type": "PromptCBLUE", "question": "判断临床试验筛选标准的类型：\n5）孕期及哺乳期妇女；\n选项：吸烟状况，饮食，怀孕相关，健康群体，病例来源，性取向，伦理审查，口腔相关，疾病，知情同意，过敏耐受，预期寿命，特殊病人特征，数据可及性，依存性，献血，疾病分期，设备，治疗或手术，诊断，护理，实验室检查，锻炼，参与其它试验，能力，读写能力，教育情况，肿瘤进展，药物\n答：", "reference_answer": "", "predict_answer": "HelperClass的构造函数中，定义了一个 int variable。在测试代码中，该变量被赋值为10。在测试代码中，该变量被调用print()函数。在打印结果中，我们看到该变量的值被打印为10。这表明，在测试代码中，该变量的值是可见的。"}
{"type": "PromptCBLUE", "question": "“芝麻不能和什么同食”，“褥疮可不可以吃芝麻”。\n这两句话的意思的匹配程度如何？\n选项：完全不匹配或者没有参考价值，很少匹配有一些参考价值，部分匹配，完全匹配", "reference_answer": "", "predict_answer": "HelperMethod 是一种用于简化和扩展泛型方法的 helper 类。它提供了一些有用的功能，例如自动类型检查、类型安全性和多态性。在本教程中，我们将学习如何使用 helper 类来创建一些有用的工具和框架。\n\n首先，让我们创建一个名为“ util.py”的文件，包含一些 helper 类的基本函数。\n\n```python\nfrom typing import TypeVar\n\n@helper.register()\ndef gcd(var1: TypeVar, var2: TypeVar) -> TypeVar:\n    \"\"\"\n    \"\"\"\n    return helper.gcd(var1, var2)\n\n@helper.register()\ndef lcm(var1: TypeVar, var2: TypeVar) -> TypeVar:\n    \"\"\"\n    \"\"\"\n    return helper.lcm(var1, var2)\n\n@helper.register()\ndef phi(var1: TypeVar) -> TypeVar:\n    \"\"\"\n    \"\"\"\n    return helper.phi(var1)\n\nhelper.register('gcd.py', gcd)\nhelper.register('lcm.py', lcm)\nhelper.register('phi.py', phi)\n```\n\n现在，我们将使用这些函数来生成一些示例代码。首先，我们将使用 helper 类中的 gcd 函数生成带参的 gcd 函数：\n\n```python\nfrom util import gcd\n\ngcd(3, 5)\n```\n\n这将报错，因为 gcd() 没有传入参数。现在我们使用 helper 类中的 gcd() 函数来生成带有带参的 gcd 函数：\n\n```python\nfrom util import gcd\n\ngcd(3, 5, 7)\n```\n\n这将报错，因为 helper.gcd() 检测到传入的参数是正确的，并且将其用于计算最大公因子。\n\n现在，我们将使用 helper 类中的 lcm 函数生成带参的 lcm 函数：\n\n```python\nfrom util import lcm\n\nlcm(3, 5, 7)\n```\n\n这将输出 15，因为 lcm() 函数的第三个参数是变量代表待计算公因子，所以它可以与任何参数一起变化。\n\n现在，我们将使用 helper 类中的 lcm 函数来生成带有带参的 lcm 函数：\n\n```python\nfrom util import lcm\n\nlcm(3, 5, 7, 11)\n```\n\n这将输出 45，因为 helper.lcm() 函数可以同时计算所有待计算参数的 lcm。\n\n最后，让我们使用 helper 类中的 phi 函数生成带参的 phi 函数：\n\n```python\nfrom util import phi\n\nphi()\n```\n\n这将输出正弦值 1，因为 helper.phi() 函数可以传入任意参数。\n\n现在，我们有一个简单的 helper 类，可以用于计算各种数字的 gcd、lcm 和 phi。我们将在后面的教程中继续使用它来构建更复杂的工具和框架。"}
{"type": "PromptCBLUE", "question": "根据对话历史和当前对话，抽取症状实体，以及这些实体的阴阳性：\n对话历史：\n医生：如果这样治疗后，仍然反复发烧，建议就医小儿科，让医生查体，化验血常规，进一步明确情况进行相应治疗。\n患者：嗯嗯知道了\n当前对话：\n医生：好的，先吃点退烧药，多喝水，今天晚上控制好体温，别烧的太高。\n候选：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状\n答：", "reference_answer": "", "predict_answer": "Helper方法:\n- ```\nsymptoms = [\"患有该症状\", \"没有患有该症状\"]\npositive = [\"阳性的\", \"阴性的\"]\n```\n- 抽取症状实体： `[symptom, positive]`\n- 阴阳性： `[positive symptom, negative symptom]`\n- 根据症状判断病人是否患有某种疾病： `[diagnosis]`\n- ```\ndiagnosis = [\"根据症状判断，您可能患有该疾病\"]\n```\n其中， `diagnosis` 表示根据症状实体进行诊断的结果。"}
{"type": "PromptCBLUE", "question": "医疗搜索：患牛皮癣病症的因素有哪些？\n回答内容：牛皮癣的发病诱因有很多，目前还不能很肯定的确定具体的发病诱因，一般认为是由于感染、免疫功能紊乱、新陈代谢障碍、内分泌机能障碍、精神因素以及其他的如外伤、过敏、寒冷、潮湿、气候干燥高温等诱发此病的。牛皮癣是一种十分顽固的慢性皮肤病，建议到正规医院检查，不要盲目用药，不要听信一些偏方，否则会使病情更加严重或很容易复发，也可以配合中药治疗，日常生活当中的护理工作也很重要，多吃蔬菜、水果和薯类食物，少吃辛辣，保持良好的心态去面对病情。\n上述搜索和回答是否相关？\n选项: 相关，不相关\n答：", "reference_answer": "", "predict_answer": "Helper方法：\n1. 通过 ```class``` 标签 `Helper`。\n2. 使用 ```add_XXX``` 事件添加方法。\n3. 在 ```__init__``` 函数中调用它们。\n\n在 Angular 中可以使用 helper 函数来简化代码。下面是一个简单的 helper 函数例子：\n\n```python\ndef hello_world():\n    return \"Hello, world!\"\n\nangular_helper_function = 'angular_helper_function'\nangular_helper_method = 'angular_helper_method'\n\ndef add_helpers(component):\n    component.addEventListener(angular_helper_function, add AngularHelper)\n    component.setMethod(angular_helper_method, helper_function)\n\nadd_helpers(my_component)\n```\n\n在 Angular 代码中，我们可以使用 AngularHelper 事件来调用 helper 函数：\n\n```javascript\nimport helper from './helper'\n\nmy_component.addEventListener('ng-helpers-added', function() {\n  helper.add_angular_helper_method(my_component, helper.angular_helper_function)\n})\n```\n\n在 AngularHelper 中，我们可以使用 `helper_function` 参数来调用 helper 函数：\n\n```javascript\nimport helper from './helper'\n\nmy_component.addEventListener('ng-helpers-added', function() {\n  helper.add_angular_helper_method(my_component, 'ng-helpers-added', function() {\n    console.log(\"Helper function called\");\n  })\n})\n```\n\n以上就是 AngularHelper 的用法。"}
{"type": "PromptCBLUE", "question": "患者：医生您好，医生你好…我姐8月25晚上10:20多喝了300毫升敌敌畏…送到医院洗胃洗完胃到Lc抢救…到现在还在昏迷当中…到现在医生出来说器官都衰弱……咋办？这是昨晚花验毒血…今天又去化验成分是5.6多全血胆百分之15,#医生你看看，该怎么办？ 洗着血…目前没恶化…心跳加快…血压不升…也没往上升…还昏迷着…咋办医生？啥设备都用了…目前稳定…（男，31岁）\n医生：你好，，，，，，，，，，，\n患者：你好医生\n根据上述对话历史，给出医生的下一句话", "reference_answer": "", "predict_answer": "目前没有恶化…心跳加快…血压不升…也没往上升…还昏迷着…咋办医生？啥设备都用了…目前稳定…"}
{"type": "PromptCBLUE", "question": "“蛇串疮属于中医何病”，“得了蛇串疮可以吃什么零食？蛇串疮差不多已？得了蛇串.”。\n这两句话的意思的匹配程度如何？\n选项：完全不匹配或者没有参考价值，很少匹配有一些参考价值，部分匹配，完全匹配\n答：", "reference_answer": "", "predict_answer": "Helper function to calculate the inverse of a matrix\n```python\ndef inv(m):\n    n = m.shape[0]\n    if n == 0:\n        return Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n    elif n == 1:\n        return m.T()\n    else:\n        return inv(m.T()) * m\n\n# Test\nm = Matrix([[1, 2, 3], [4, 5, 6]])\nprint(inv(m)) # should be `[[1, -2], [4, 5]]`\n# m = Matrix([[1, 2, 3], [4, 5, 6]])\n# inv(m))\n```\n\n```\nInverse of a matrix\n```python\ndef inv(m):\n    n = m.shape[0]\n    if n == 0:\n        return Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n    elif n == 1:\n        return m.T()\n    else:\n        return inv(m.T()) * m.T()\n\n# Test\nm = Matrix([[1, 2, 3], [4, 5, 6]])\nprint(inv(m)) # should be `[[1, -2], [4, 5]]`\n# m = Matrix([[1, 2, 3], [4, 5, 6]])\n# inv(m.T())"}
{"type": "PromptCBLUE", "question": "判断临床试验筛选标准的类型：\n6、经查问病史、体检和临床判定健康者，符合本制品免疫接种的受试者。\n选项：疾病分期，教育情况，性别，实验室检查，残疾群体，药物，治疗或手术，年龄，特殊病人特征，症状(患者感受)，研究者决定，成瘾行为，吸烟状况，病例来源，能力，体征(医生检测），居住情况，护理，器官组织状态，锻炼，肿瘤进展，健康群体，睡眠，诊断，数据可及性，读写能力\n答：", "reference_answer": "", "predict_answer": "Helper 函数是用于创建和返回一个新实例的函数。在 Kotlin 中，可以使用 static 关键字定义静态 helper 函数，该函数可以访问内部类的成员。下面是一些常见的 Kotlin 函数式编程范例：\n\n1. 计算器函数，可以使用带参数的函数来创建新的计算器实例，并使用其 add() 方法来添加两个数值：\n\n```\ndef add(a: Int, b: Int): Int = {\n    return a + b\n}\n\n计算器 = add(3, 5)\nprint(计算器)\ncalculator.add(7)\nprint(calculator)         //输出 10\n```\n\n2. 随机数生成器函数，可以使用带参数的函数来创建新的随机数生成器实例，并使用其 nextInt() 方法来获取 int 类型的随机数：\n\n```\ndef random(): Int = {\n    return random.randint(0, 9)\n}\n\nrandom_number = random()\nprint(random_number)\nrandom_number = random_number.nextInt(10)\nprint(random_number)           //输出 4\n```\n\n在函数中，我们定义了一个名为 random 的函数，该函数使用内部类的成员 random.randint() 和 random.nextInt() 函数来生成随机数。"}
{"type": "PromptCBLUE", "question": "医疗对话中临床发现实体的阴阳性判别：\n患者：过敏性鼻炎可以通过手术根治吗？\n医生：您好，过敏性鼻炎目前手术效果不明确，多数是药物治疗\n患者：有种神经阻断术可以根治吗\n患者：目前症状鼻腔里发痒流鼻炎冬天早上比较明显\n医生：这个手术有人做，不过多数医院不推荐做，能用药物控制，就不手术，因为目前这个手术的效果还不是特别确切的能根治过敏\n患者：我现在每天都用辅舒良长期用怕有并发症\n医生：您目前主要有什么症状，鼻塞，流清鼻涕，鼻痒哪个严重\n患者：鼻痒，用辅舒良可以缓解\n医生：间断性用，有症状喷一下\n医生：也可以停药两周以后，去查一个过敏源，看看有没有对尘螨过敏，如果对尘螨过敏，是可以彻底治愈的。\n患者：尘瞒做过了没有过敏\n患者：鼻腔发白是不是过敏性鼻炎？\n医生：鼻腔黏膜发白是典型的过敏症状\n患者：严重吗？\n临床发现实体：过敏性鼻炎，鼻炎，鼻腔里发痒，过敏，鼻痒，鼻塞，鼻腔发白\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合", "reference_answer": "", "predict_answer": "Helper Method:\n临床实体和阴阳性选项的标注可以辅助自然语言处理技术在医疗对话中的应用。在医疗对话中，实体如过敏源等是已知的，可以通过标注来辅助自然语言处理技术进行实体相关的任务，如推荐个性化治疗方案等。同时，在医疗对话中，阴性选项可以用于表示医生不推荐的治疗方法或药物等，可以帮助病人更好地了解治疗的利与弊，做出更加明智的决策。"}
{"type": "PromptCBLUE", "question": "病程中有呕吐，为非喷射性呕吐，呕吐物为胃内容物，无咖啡色及胆汁样物质，无反酸、嗳气、腹胀，无畏寒、发热、黄疸，无晕厥、意识障碍，无皮肤、粘膜、牙龈出血。\n这个句子里面临床发现事件是？\n说明：临床发现事件由主体词，发生状态，描述词和解剖部位组成\n答：", "reference_answer": "", "predict_answer": "Helper函数的实现代码如下：\n\n```\ndef helper_function(patient):\n    if patient.is_female and patient.age < 18:\n        return False\n    return True\n\npatient = Patient.objects.get(id=123)\nprint(patient.is_female and patient.age < 18)\n```\n\n使用方法：\n\n```\npatient = Patient.objects.get(id=123)\nprint(patient.is_female and patient.age < 18) # 输出 True\n```\n\n输出：\n\n```\nTrue\n```\n\n解释：\n在上述代码中，我们定义了一个名为`helper_function`的函数，该函数的定义条件为`patient.is_female and patient.age < 18`，如果该条件成立，则函数返回值为True，否则返回值为False。在上述代码中，我们通过调用该函数来判断对象patient是否为女性且年龄小于18岁。"}
{"type": "PromptCBLUE", "question": "对话历史：\n患者：早上起来特别明显,一次会连着咳嗽三声\n医生：那还是呛咳的可能性较大，但是有喘息，还是不正常。对于这么小的婴儿来说，一般提示可能下呼吸道有炎症\n当前对话：\n患者：我们这儿童医院的医生说口水呛到咳嗽也是生病咳嗽是这样吗医生？\n根据上述对话，症状有哪些？这些症状的阴阳性是？\n选项：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状\n答：", "reference_answer": "", "predict_answer": "Helper方法：\n```python\ndef check_lower_airway_inflammation(symptom_list):\n    if '呛咳' in symptom_list and not '喘息' in symptom_list and not '口水呛到' in symptom_list:\n        return \"可能下呼吸道有炎症\"\n    else:\n        return \"\"\n\nsymptom_list = [\"咳嗽\", \"呛咳\", \"口水呛到\"]\nprint(check_lower_airway_inflammation(symptom_list))  \n```\n\n输出：\n```\n可能下呼吸道有炎症\n```\n这个方法会根据症状判断是否可能是下呼吸道炎症，并给出提示。对于这么小的婴儿，一般提示可能下呼吸道有炎症。"}
{"type": "PromptCBLUE", "question": "下面两个句子语义是“相同”或“不同”？\n“在更年期引起的高血压该怎么治疗”，“34岁高血压怎么治”。\n选项：相同，不同\n答：", "reference_answer": "", "predict_answer": "Helper function to check if two strings are equal or not.\n```python\ndef eq(s1, s2):\n    return s1 == s2 or (s1 != s2 and (s1.lower() == s2.lower() or (len(s1) < len(s2) and s1.lower()[:len(s2)] == s2.lower()[len(s1):]))\n```\n\nUsage:\n```python\ntext1 = \"34岁高血压怎么治\"\ntext2 = \"在更年期引起的高血压该怎么治疗\"\nif eq(text1, text2):\n    print(\"两个句子语义相同\")\nelse:\n    print(\"两个句子语义不同\")\n```\n\n```python\n# 下面这个语句输出什么？\n#\n# eq(\"34岁高血压怎么治\", \"在更年期引起的高血压该怎么治疗\")\n#\n# 输出什么？\n#\n# 两个句子语义相同\n#\n# 这个函数的意思是判断给定的两个字符串是否等于或者是否包含在另一个字符串中。如果等于或者包含在另一个字符串中，则返回True，否则返回False。在上述例子中，如果两个字符串“34岁高血压怎么治”和“在更年期引起的高血压该怎么治疗”是相同的，那么函数返回True，否则返回False。"}
{"type": "PromptCBLUE", "question": "下面两个句子语义是“相同”或“不同”？\n“救急与乙肝病毒携带者接吻会被传染吗”，“银行入职体检检查乙肝吗”。\n选项：相同，不同\n答：", "reference_answer": "", "predict_answer": "HelperMethod是一种静态内部类，用于封装和共享一些代码，使其可以被多次调用。在上述代码示例中，我们创建了一个HelperMethod来封装计算SUM的方法，并将它定义为内部类，以避免外部类直接调用它。"}
{"type": "PromptCBLUE", "question": "实验研究证实，如需显著降低肺血管阻力，pH需达到7.60以上，PaCO<sub>2</sub>需降低至25mmHg以下，而此时治疗的相关风险，如脑血流的减少和听力损伤的潜在并发症机会增加。\n问题：句子中的微生物类，医疗程序，疾病，临床表现，医学检验项目，医疗设备，身体部位实体是什么？", "reference_answer": "", "predict_answer": "HelperMethods: 附加函数或方法，作为方法体内函数或方法的辅助。在方法体内不需要直接调用，通常用关键字 this指向其调用者，并且可以返回任何值。\n\n实例：\nclass MyClass {\n  public function myMethod($arg1, $arg2) {\n    //do something\n    return 123;\n  }\n\n  public function myOtherMethod() {\n    //use helper methods\n  }\n}\n\nentities of type 'method' in the given statement:\n- 'this'\n- 'PaCO<sub>2</sub>'\n- 'PaCO<sub>2</sub>需降低至25mmHg以下'\n- '风险'\n- '脑血流的减少'\n- '听力损伤的潜在并发症机会'\n- '潜在并发症机会'\n- '听力损伤'\n- '脑血流'\n- '治疗'\n- '相关风险'\n- '治疗肺血管阻力'\n- '降低肺血管阻力'\n- '治疗相关风险'\n- '临床表现'\n- '医学检验项目'\n- '医疗设备'\n- '身体部位实体'\n- '微生物类'\n- '临床表现疾病'\n- '微生物类疾病'\n- '微生物类'\n- '医学检验项目'\n- '医疗设备身体部位'\n- '临床检验项目'\n- '医学检查项目'\n- '身体部位'\n- '肺血管阻力'\n- '肺血管阻力降低'\n- '治疗肺血管阻力相关风险'\n- '肺血管阻力'\n- '肺血管阻力降低'\n- '治疗相关风险'\n- '脑血流'\n- '听力'\n- '听力损伤'\n- '潜在的并发症机会'\n- '潜在的并发症机会'\n- '听力损伤'\n- '脑血流'\n- '治疗'\n- '相关风险'\n- '治疗肺血管阻力'\n- '降低肺血管阻力'\n- '治疗相关风险'\n- '临床表现'\n- '医学检验项目'\n- '医疗设备'\n- '身体部位实体'\n- '微生物类'\n- '临床表现疾病'\n- '微生物类疾病'\n- '微生物类'\n- '医学检验项目'\n- '医疗设备身体部位'\n- '临床检验项目'\n- '医学检查项目'\n- '肺血管阻力'\n- '肺血管阻力降低'\n- '治疗肺血管阻力'\n- '肺血管阻力降低'\n- '治疗相关风险'\n- '脑血流'\n- '听力'\n- '听力损伤'\n- '潜在的并发症机会'\n- '潜在的并发症机会'\n- '听力损伤'\n- '脑血流'\n- '治疗'\n- '相关风险'\n- '治疗肺血管阻力'\n- '降低肺血管阻力'\n- '治疗相关风险'\n- '临床表现'\n- '医学检验项目'\n- '医疗设备'\n- '身体部位实体'\n- '微生物类'\n- '临床表现疾病'\n- '微生物类疾病'\n- '微生物类'\n- '医学检验项目'\n- '医疗设备身体部位'"}
{"type": "PromptCBLUE", "question": "下面两个句子的语义关系是？\n“不排气不能拔管”，“气管插管堵管”。\n选项: 完全一致，后者是前者的语义子集，后者是前者的语义父集，语义无直接关联\n答：", "reference_answer": "", "predict_answer": "Helper function in Python\n在Python中，函数作为参数传递其他函数的更高层次的结构称为Helper function。\n在函数内部定义另一个函数并将它们组合在一起被称为Helper function。\n在函数内部定义另一个函数并将它们组合在一起被称为Helper function。\n\n在函数内部定义另一个函数并将它们组合在一起被称为Helper function。在函数内部调用这个Helper function就可以实现一些函数之间的通信。\n例如，我们可以使用Helper function实现函数之间的参数传递。"}
{"type": "PromptCBLUE", "question": "判断临床试验筛选标准的类型：\n5.医生认为有某种不适合纳入的情况\n选项：设备，体征(医生检测），年龄，疾病分期，肿瘤进展，受体状态，药物，读写能力，疾病，吸烟状况，健康群体，知情同意，特殊病人特征，性取向，睡眠，居住情况，残疾群体，能力，数据可及性，研究者决定，口腔相关，成瘾行为，实验室检查，风险评估，病例来源，依存性，过敏耐受\n答：", "reference_answer": "", "predict_answer": "Helper function to create a random integer between 0 and 1\n```\ndef random_integer(self):\n    return random.randint(0, 1)\n```\n\nHelper function to create a random float between 0 and 1\n```\ndef random_float(self):\n    return random.random() * (1 - self.e)\n```\n\nHelper function to create a random string of a given length\n```\ndef random_string(self, length):\n    return ''.join(random.choice('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') for i in range(length))\n```\n\nHelper function to create a random string of alphabets\n```\ndef random_string_alpha(self, length):\n    return ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for i in range(length))\n```\n\nHelper function to create a random string of digits\n```\ndef random_string_digits(self, length):\n    return ''.join(random.choice('0123456789') for i in range(length))\n```\n\nHelper function to create a random integer array of a given length\n```\ndef random_integer_list(self, length):\n    return [random.randint(0, 9) for i in range(length)]\n```\n\nHelper function to create a random float array of a given length\n```\ndef random_float_list(self, length):\n    return [random.uniform(0, 1) for i in range(length)]\n```\n\nHelper function to create a random string array of a given length\n```\ndef random_string_list(self, length):\n    return [random.choice('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') for i in range(length)]\n```"}
{"type": "PromptCBLUE", "question": "以下回答内容是否与这里的医疗搜索相关？\n医疗搜索：癫痫怎么治疗最有好处呢\n回答内容：在临床上，癫痫的临床表现是：抽搐、口吐白沫、四肢抽动、失神、忽然的腹痛、头痛不动不语，还有部分患者无意识咀嚼、流口水、吞咽动作、吸吮动作、恶心等口咽部动作或内脏症状。突发性精神活动中断，意识丧失、可伴肌阵挛或自动症这些都是癫痫病发作的主要症状。少吃一些油腻肥厚的食品及中医所说的发物，鹅肉、羊肉更应少吃，辣椒、葱、蒜等刺激性很大的食物，也以少吃为好，适当体育锻炼，避免过度劳累。\n选项: 相关，不相关\n答：", "reference_answer": "", "predict_answer": "Helper class可以用于将一组操作封装在一个类中，从而减少代码重复性。在医疗领域，我们可以使用Helper class来封装一些常用的数据结构和算法，并让它们更加易于使用。\n\n下面是一个简单的Helper class，用于封装一些基本的医疗数据结构和算法：\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\n\npublic class DataStructures {\n    public static class ComparatorByArea implements Comparator<HealthCareAreas> {\n        @Override\n        public int compare(HealthCareAreas area1, HealthCareAreas area2) {\n            return area1.getName().compareTo(area2.getName());\n        }\n    }\n    public static class HealthCareAreas {\n        String name;\n        int population;\n        public HealthCareAreas(String areaName, int areaPopulation) {\n            this.name = areaName;\n            this.population = areaPopulation;\n        }\n    }\n    public static class ComparatorByHealthcareService implements Comparator<HealthCareService> {\n        @Override\n        public int compare(HealthCareService service1, HealthCareService service2) {\n            return service1.getHealthCareAreas().getPopulation() - service2.getHealthCareAreas().getPopulation();\n        }\n    }\n    public static class HealthCareService {\n        LinkedList<HealthCareAreas> healthCareAreas;\n        public HealthCareService(LinkedList<HealthCareAreas> healthCareAreas) {\n            this.healthCareAreas = healthCareAreas;\n        }\n    }\n    public static class ComparatorByPriority implements Comparator<HealthCareService> {\n        @Override\n        public int compare(HealthCareService service1, HealthCareService service2) {\n            return service1.getPriority() - service2.getPriority();\n        }\n    }\n    public static class Priority implements Comparator<HealthCareService> {\n        int priority;\n        public Priority(int priority) {\n            this.priority = priority;\n        }\n        @Override\n        public int compare(HealthCareService o1, HealthCareService o2) {\n            return o1.getPriority() - o2.getPriority();\n        }\n    }\n    public static class SortedSetByArea implements SortedSet<HealthCareService>, Cloneable {\n        Comparator<HealthCareService> comparator = null;\n        public SortedSetByArea(TreeSet treeSet) {\n            this.comparator = Comparator.comparing(HealthCareService::getHealthCareAreas);\n            this.addAll(treeSet);\n        }\n        public SortedSetByArea(Comparator<HealthCareService> comparator) {\n            this.comparator = comparator;\n            this.set = new TreeSet<>(comparator);\n        }\n        @Override\n        public SortedSetByArea clone() {\n            SortedSetByArea sortedSet = new SortedSetByArea(this.comparator);\n            sortedSet.set = (TreeSet) this.set.clone();\n            return sortedSet;\n        }\n        @Override\n        public int size() {\n            return this.set.size();\n        }\n        @Override\n        public boolean isEmpty() {\n            return this.set.isEmpty();\n        }\n        @Override\n        public boolean contains(Object o) {\n            return this.set.contains(o);\n        }\n        @Override\n        public Object[] toArray() {\n            return this.set.toArray();\n        }\n        @Override\n        public <T> T[] toArray(T[] a) {\n            return this.set.toArray(a);\n        }\n        @Override\n        public Iterator<HealthCareService> iterator() {\n            return this.set.iterator();\n        }\n        @Override\n        public boolean remove(Object o) {\n            return this.set.remove(o) != null;\n        }\n        @Override\n        public void clear() {\n            this.set.clear();\n        }\n        private Comparator<HealthCareService> comparator() {\n            return this.comparator;\n        }\n    }\n    public static class LinkedListByArea implements LinkedList<HealthCareService>, Cloneable {\n        Comparator<HealthCareService> comparator = null;\n        public LinkedListByArea(LinkedList<HealthCareService> list) {\n            this.set = list;\n        }\n        public LinkedListByArea(Comparator<HealthCareService> comparator) {\n            this.comparator = comparator;\n            this.set = list;\n        }\n        public LinkedListByArea clone() {\n            LinkedListByArea list = new LinkedListByArea(this.comparator);\n            list.set = (LinkedList<>) this.set.clone();\n            return list;\n        }\n        public LinkedListByArea(int size) {\n            this.set = new LinkedList<>(size);\n        }\n        public LinkedListByArea addFirst(HealthCareService service) {\n            this.set.addFirst(service);\n            return this;\n        }\n        public LinkedListByArea addLast(HealthCareService service) {\n            this.set.addLast(service);\n            return this;\n        }\n        public LinkedListByArea removeFirst() {\n            HealthCareService service = this.removeFirst(this.comparator());\n            this.remove(service);\n            return this;\n        }\n        public LinkedListByArea removeLast() {\n            HealthCareService service = this.removeLast(this.comparator());\n            this.remove(service);\n            return this;\n        }\n        public LinkedListByArea removeFirst(Comparator<? super HealthCareService> comparator) {\n            while (!this.isEmpty() && !this.comparator().compare(this.getFirst(), comparator.comparator())) {\n                this.removeFirst();\n            }\n            return this;\n        }\n        public LinkedListByArea removeLast(Comparator comparator) {\n            while (!this.isEmpty() && this.comparator().compare(this.getLast(), comparator.comparator())) {\n                this.removeLast();\n            }\n            return this;\n        }\n        public LinkedListByArea peekFirst(Comparator<? super HealthCareService> comparator) {\n            if (this.isEmpty()) return null;\n            return this.removeFirst(comparator);\n        }\n        public LinkedListByArea peekLast(Comparator<? super HealthCareService> comparator) {\n            if (this.isEmpty()) return null;\n            return this.removeLast(comparator);\n        }\n    }\n    public static class HashMapByArea implements HashMap<HealthCareAreas, Boolean>, Cloneable {\n        Comparator<HealthCareAreas> comparator = null;\n        public HashMapByArea(HashMap<HealthCareAreas, Boolean> map) {\n            this.set = map;\n        }\n        public HashMapByArea(Comparator<HealthCareAreas> comparator) {\n            this.comparator = comparator;\n            this.set = new HashMap<>(comparator);\n        }\n        public HashMapByArea clone() {\n            HashMapByArea map = new HashMapByArea(this.comparator);\n            map.set = (HashMap<HealthCareAreas, Boolean>) this.clone();\n            return map;\n        }\n        public HashMapByArea(int size) {\n            this.set = new HashMap<>(size);\n        }\n        public..."}
{"type": "PromptCBLUE", "question": "找出下面问诊语句中的医学检查检验实体：\n好的！", "reference_answer": "", "predict_answer": "Helper method 帮助方法\n - 实体: 医学检查检验\n \nHelper_method():\n - 实体: 医学检查检验\n\n```python\ndef helper_method(patient):\n    \"```\n    return [\"X-ray\", \"CT scan\", \"Blood test\", \"Laboratory test\"]\n    \"```\n```\n\npatient.checkup() # calls helper_method\npatient.helper_method # prints [\"X-ray\", \"CT scan\", \"Blood test\", \"Laboratory test\"]\n```\n\n在Python中，函数式编程是一种风格，可以提高代码的可读性、可维护性和性能。在这个例子中，我们使用了缩进、命名参数、函数参数和函数返回值来定义一个帮助方法，该方法接受一个患者对象作为参数，并返回一个列表，其中包含医学检查检验实体。然后，我们可以调用该方法来获取这个列表，并在另一个函数中调用患者对象的 helper_method 函数来显示这个列表。"}
{"type": "PromptCBLUE", "question": "问诊对话历史：\n患者：9个月大的婴儿拉肚子可以喝配方婴儿奶粉吗？。\n医生：您好\n患者：你好小孩拉肚子可以喝奶粉吗？\n医生：孩子拉肚子的原因找到了么\n患者：感冒引起来的\n患者：好几天了，今天好像好多了。就早上拉了一次\n医生：嗯嗯\n医生：那就可以吃\n医生：只要找到原因就可以了\n患者：吃奶粉不会在引起拉肚子吧？？\n医生：吃奶粉一般不会，除非之前就对奶粉不耐受\n患者：原来一直吃的呢，\n医生：就没关系可以继续吃不用担心，\n医生：二千万别让小肚子受凉了那是男的话就可能再次的，出现明白了吧，\n医生：ｙ一个因为小孩才感冒了家住的那么你在南分，给他吃的头两天你要一点能给的太稠了你那吗？\n患者：明白，谢谢你\n患者：还注意点什么呢？\n医生：就是慢慢加量不要急\n医生：保暖\n医生：别的没啥\n患者：哦，好的\n患者：谢谢\n根据上述对话，给出诊疗报告\n说明：诊疗报告分为主诉, 现病史, 辅助检查, 既往史, 诊断, 建议这六个章节。\n答：", "reference_answer": "", "predict_answer": "Helper.process('问诊对话历史', {\n    main诉: '小孩拉肚子可以喝配方婴儿奶粉吗？',\n   现病史: '感冒引起来的，已经好几天了，今天好像好多了，就早上拉了一次。',\n   辅助检查: '',\n   既往史: '之前一直吃的呢，没关系可以继续吃不用担心，但是别让小肚子受凉了，那是男的话就可能再次出现。',\n   诊断: '二千万别让小肚子受凉了那是男的话就可能再次出现',\n   建议： '保暖; 慢慢加量不要急'\n});"}
{"type": "PromptCBLUE", "question": "当前对话涉及哪些症状？这些症状的阴阳性如何？\n对话历史：\n医生：那宝宝大便次数怎样\n患者：这两天一天一次\n当前对话：\n患者：我吃辣有关还是尿不湿过敏\n选项：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状", "reference_answer": "", "predict_answer": "Helper functions\n\n```python\ndef is_pulse():\n    return True\n\ndef is_pulse_from_patient():\n    return 'Patient' in helper.client.current_user.username\n\ndef is_pulse_from_medical():\n    return 'Doctor' in helper.client.current_user.username\n\ndef is_pulse_from_medical_history():\n    return 'Doctor' in helper.client.current_user.username\n\ndef is_pulse_from_medication_history():\n    return 'Doctor' in helper.client.current_user.username\n\ndef is_pulse_from_medication_history_patient():\n    return 'Patient' in helper.client.current_user.username\n\ndef is_pulse_from_medication_history_patient():\n    return 'Patient' in helper.client.current_user.username\n\ndef is_pulse_from_bill_history():\n    return 'Doctor' in helper.client.current_user.username\n\ndef is_pulse_from_bill_history_patient():\n    return 'Patient' in helper.client.current_user.username\n\ndef is_pulse_from_medical_orders_history():\n    return 'Doctor' in helper.client.current_user.username\n\ndef is_pulse_from_medical_orders_history_patient():\n    return 'Patient' in helper.client.current_user.username\n\ndef is_pulse_from_lab_test_history():\n    return 'Doctor' in helper.client.current_user.username\n\ndef is_pulse_from_lab_test_history_patient():\n    return 'Patient' in helper.client.current_user.username\n\ndef is_pulse_from_bill():\n    return False\n\ndef is_pulse_from_bill_patient():\n    return False\n\ndef is_pulse_from_bill_patient_lab_test_history():\n    return False\n\ndef is_pulse_from_bill_patient_medication_history():\n    return False\n\ndef is_pulse_from_bill_patient_medical_history():\n    return False\n\ndef is_pulse_from_bill_patient_medical_orders_history():\n    return False\n\ndef is_pulse_from_bill_patient_medical_orders_history_patient():\n    return False\n\ndef is_pulse_from_bill_patient_lab_test_history():\n    return False\n\ndef is_pulse_from_bill_patient_medication_history():\n    return False\n\ndef is_pulse_from_bill_patient_medical_history():\n    return False\n\n```\n\nHelper functions can be used like this:\n```python\nif is_pulse_from_patient() and is_pulse() and is_pulse_from_medical_history() and is_pulse_from_medication_history() and is_pulse_from_bill_history():\n    print(\"Goodbye!\")\nelse:\n    print(\"Badbye!\")\n```"}
{"type": "PromptCBLUE", "question": "根据下面的问诊对话自动生成对应的诊疗报告：\n问诊对话历史：\n患者：宝宝六个月，感冒了，打喷嚏、流鼻涕、咳嗽\n医生：您好。孩子咳嗽严重吗？\n患者：还可以\n患者：本来就咳嗽痰多,喝了药好了\n患者：前天刚好,应该是昨天晚上又把宝宝感冒了\n患者：（空）\n患者：当时喝的这两种药\n医生：如果咳嗽不严重。应该是普通感冒的情况。多是受凉或是家属感冒传染引起的。一般35天就好\n医生：药物是可以的。没问题\n患者：应该是受凉了\n患者：可能是昨晚蹬被子了没给盖好\n医生：注意最近晚上有没有发热。预备好退热药\n医生：很可能\n患者：家里还有护彤\n医生：这个护彤可以改善孩子的症状，可以吃\n患者：（空）\n患者：目前的症状是咳嗽,流鼻涕,打喷嚏\n医生：护彤可以治疗的\n医生：吃上看看\n患者：还有另外两种还吃吗？\n医生：可以继续口服的，消炎止咳的\n患者：还有宝宝目前刚六个月大，体重21斤\n患者：三种药可以一起吃吗？\n患者：量如何把握\n医生：比较胖。可以的。护彤一次三分之一包，一日3次。\n医生：之前的药物量不变就行\n患者：好\n患者：那可以去婴儿游泳馆洗澡吗？\n医生：这两天别去了，等感冒好了再去\n患者：好\n医生：如果治疗3天不减轻，建议去医院看看\n患者：嗯,好的\n医生：注意精神，奶量的变化\n说明：诊疗报告分为主诉, 现病史, 辅助检查, 既往史, 诊断, 建议这六个章节。", "reference_answer": "", "predict_answer": "Helper class for easy conversion of medical reports to PDF\n```\nclass ReportPDF(object):\n    def __init__(self, filename):\n        self.filename = filename\n        self.content = \"\"\n\n    def write(self, content):\n        with open(self.filename, \"w\") as f:\n            f.write(content)\n\n    def get_content(self):\n        return self.content\n\n```\n使用示例：\n- 创建一个 `ReportPDF` 对象，并将其内容输出到文件中：\n 代码示例：\n- ```\nreport = ReportPDF(\"output.pdf\")\nprint(report)\n```\n- 获取输出到文件的内容，并将其作为 `ReportPDF` 对象的内容：\n 代码示例：\n- ```\nreport = ReportPDF.get_content(\"output.pdf\")\nprint(report)\n```\n注意：这里使用了 `get_content` 函数来获取输出到文件的内容，并将其作为 `ReportPDF` 对象的内容。"}
{"type": "PromptCBLUE", "question": "在PPHN缺乏超声诊断条件时，进行BNP监测有一定临床诊断和鉴别诊断价值。\n这个句子里面实体有哪些？\n实体选项：疾病，药物，医院科室\n答：", "reference_answer": "", "predict_answer": "HelperClass的构造函数中，调用BaseClass的构造函数，并设置该实例的实例变量为所给定的值。\n # 构造函数调用\nhelper = HelperClass(10)\n# 设置实例变量\nhelper.instvar = '值'\n# 检查实例变量\nprint(helper.instvar)"}
{"type": "PromptCBLUE", "question": "根据下面的问诊对话自动生成对应的诊疗报告：\n问诊对话历史：\n患者：两侧胸廓对称。两肺纹理增粗.模糊，两中下肺野沿肺纹理间可见斑片状模糊影，主要沿支气管分布。肺门结构清晰，心影形态、大小正常、双膈面光滑，肋膈角锐利。请问医生要打针做雾化吗？\n医生：您好，我是您的辅诊医生，需要询问几个问题，才能更好的评估孩子情况，您还在吗？\n患者：在啊\n医生：宝宝胸片显示是支气管肺炎哦，现在都有什么症状？\n患者：咳了好久没见好呢。\n医生：宝宝咳嗽几天了？痰多吗？嗓子哑吗？有没有气喘？\n患者：咳了半个月了之前。发烧过？现在好了。现在还有点痰！嗓子不哑？没见气喘。\n医生：孩子什么时候咳嗽厉害？\n患者：白天咳一点晚上也咳一点。都快一个月了都没见好。\n医生：除了胸片还有血液检查吗？\n患者：没有血液检查\n医生：孩子之前有没有呛咳？\n患者：有啊。好像要吐出来的感觉\n医生：宝宝吃东西呛到过吗？\n医生：平常容易过敏吗？以前得过喘憋性肺炎吗？\n患者：没有啊。吃东西都很厉害现在。精神也很好。就是现在还久不久咳嗽\n医生：孩子身上有皮疹吗？\n医生：孩子除了咳嗽还有其他症状吗？比如流鼻涕吗？\n患者：身上一直都有点像拖皮的？疙瘩\n医生：宝宝都是哪些部位有皮疹？\n患者：没有流鼻涕啊。就是咳嗽。有是时咳得好像要出的敢觉\n患者：脸上背后长吧\n医生：是湿疹吗？\n患者：不是湿疹。\n医生：嗯嗯，看过医生吗？是不是过敏引起的?\n医生：宝宝咳嗽都是怎么治疗的?\n患者：（空）\n患者：就是这样红红的你看下\n医生：宝宝下巴也有哦，和过敏有关\n患者：这是过敏吗？没给他乱吃什么啊。怎么会过敏\n医生：宝宝是不是流口水，漾奶多吗？下巴容易潮湿吗？\n患者：没有天气冷一点就长了\n医生：嗯嗯，宝宝现在怎么治疗的?\n患者：吃药。治疗。咳了那么久。不用打针做雾化。吃药可以好吗\n医生：宝宝反复咳嗽，一般是反复呼吸道感染，过敏，异物吸入，哮喘，以及支气管肺发育不良等情况\n患者：哦。那怎么治疗好得快呢\n医生：您的宝宝现在需要完善支原体，过敏原等相关检查，明确咳嗽原因，宝宝胸片显示有支气管肺炎，这个是需要输液治疗也就是住院的指证哦，然后根据孩子的检查给予对症治疗。\n患者：那吃药。不行吗。一定要需要打针输液才可以吗。\n医生：宝宝一般支气管炎感冒的话，症状不重可以吃药，支气管肺炎是需要住院的指证哦。\n医生：宝宝现在也需要忌饮食，不要吃海鲜刺激性食物，尽量清淡饮食，多喝水，咳嗽时候拍背，促进痰液排出。\n患者：哦好的知道了\n医生：嗯嗯，祝宝宝早日康复\n医生：关于宝贝健康问题您还需要咨询什么吗\n患者：好的谢谢你\n医生：不客气\n医生：您有任何问题可以随时和我联系或留言，我看到后会第一时间回复。\n医生：您还有疑问吗?\n医生：可能您在忙，稍后有疑问可以给我留言哦\n医生：再见哦\n说明：诊疗报告分为主诉, 现病史, 辅助检查, 既往史, 诊断, 建议这六个章节。\n答：", "reference_answer": "", "predict_answer": "Helper方法：\n- (void)processInput:(NSData *)inputData {\n}\n\n- (id)initWithInputData:(NSData *)inputData {\n    self = [super initWithInputData:inputData];\n    if (self) {\n        self.processInput = self.inputReader = [self processInput:inputData];\n    }\n    return self;\n}\n\n- (void)dealloc {\n    [super dealloc];\n}\n\n- (void)processInput:(NSData *)inputData {\n    dispatch_queue_t que = dispatch_queue_create(\"com.qmedical.pulse\", NULL);\n    NSDictionary *dictionary = [NSDictionary dataFromNSData:inputData];\n    dispatch_async(que, ^{\n        self.inputReader = [[[self inputReader] new] autorelease];\n        self.inputReader.data = dictionary;\n        self.inputReader.delegate = self;\n        dispatch_wait(que, 0);\n        NSDictionary *dictionary1 = [self.inputReader data];\n        NSDictionary *dictionary2 = [dictionary1 objectForKey:@\"MODEL\"];\n        self.model = [[[self model] new] autorelease];\n        self.model.id = [[[[(NSNumber *)[dictionary2 objectForKey:@\"PID.id\"]] unsignedLongValue]];\n        self.model.name = [[[[(NSString *)[dictionary2 objectForKey:@\"PID.name\"]] autorelease] retain];\n        self.model.type = [[[[(NSInteger *)[dictionary2 objectForKey:@\"PID.type\"]] unsignedLong]];\n        self.model.description = [[[[(NSString *)[dictionary2 objectForKey:@\"PID.description\"]] autorelease] retain];\n        self.model.options = self.model.options || [];\n        self.model.options.push(self);\n        self.model.status = self.model.status || { enabled: true, state: 0 };\n        self.model.lastUpdate = [NSDate timeIntervalSinceNow];\n        self.model.lastError = [NSNumber numberWithFloat:-1.0];\n        self.model.hasError = false;\n        self.model.hasInput = true;\n        self.model.hasOutput = true;\n        self.model.inputCount = self.model.outputCount = [(NSInteger *)[dictionary2 objectForKey:@\"PID.count\"].unsignedLongValue();\n        self.model.inputPorts = self.model.outputPorts = [];\n        for (NSInteger i = 0; i < self.model.inputCount; i++) {\n            self.model.inputPorts.push(i);\n        }\n        for (NSInteger i = 0; i < self.model.outputCount; i++) {\n            self.model.outputPorts.push(i);\n        }\n        self.model.isConnected = true;\n        self.model.isDirty = true;\n        [self addObserver:self forKeyPath:@\"MODEL.dirty\"];\n        dispatch_async(que, ^{\n            self.model.status = self.model.status || { enabled: true, state: 0 };\n            self.model.hasError = false;\n            self.model.hasInput = true;\n            self.model.hasOutput = true;\n            self.model.inputCount = self.model.outputCount = [(NSInteger *)[dictionary2 objectForKey:@\"PID.count\"].unsignedLongValue()];\n            self.model.inputPorts = self.model.outputPorts = [];\n            for (NSInteger i = 0; i < self.model.inputCount; i++) {\n                self.model.inputPorts.push(i);\n            }\n            for (NSInteger i = 0; i < self.model.outputCount; i++) {\n                self.model.outputPorts.push(i);\n            }\n            self.model.isConnected = true;\n        });\n    });\n}\n\n- (NSData *)inputData {\n    return [self processInput:nil];\n}\n\n- (id)inputReader {\n    return self.inputReader;\n}\n\n- (void)setInputReader:(NSData *)inputReader {\n    self.inputReader = inputReader;\n}\n\n- (NSDataReader *)inputReader {\n    return self.inputReader;\n}\n\n- (void)setInputReader:(NSDataReader) {\n    self.inputReader = dataReader;\n}\n\n- (NSData *)input {\n    return self.inputReader.data;\n}\n\n- (NSDictionary *)inputDictionary {\n    return self.inputReader.data;\n}\n\n- (NSDictionary *)inputDictionaryWithKeys:(NSArray *)keys {\n    return self.inputReader.dataWithKeys:keys;\n}\n\n- (void)setInputDictionary:(NSDictionary *)inputDictionary {\n    self.inputReader.data = inputDictionary;\n}\n\n- (NSData *)inputDataWithKeyPath:(NSArray *)keys {\n    return self.inputReader.dataWithKeyPath:keys;\n}\n\n- (NSDictionary *)inputDataWithKeyPath:(NSArray *keys) {\n    return self.inputReader.dataWithKeyPath:keys;\n}\n\n- (void)setInputDataWithKeyPath:(NSArray *)keys {\n    self.inputReader.dataWithKeyPath:keys;"}
{"type": "PromptCBLUE", "question": "请问是什么类型？\n⑥试验前15d服用过益生菌；\n临床试验筛选标准选项：读写能力，风险评估，数据可及性，特殊病人特征，居住情况，体征(医生检测），种族，疾病分期，依存性，健康群体，锻炼，症状(患者感受)，献血，饮食，年龄，病例来源，口腔相关，治疗或手术，实验室检查，能力，成瘾行为，伦理审查，药物，性别，性取向，器官组织状态，睡眠，设备，肿瘤进展，吸烟状况，疾病，预期寿命，参与其它试验，教育情况，残疾群体，护理，酒精使用，怀孕相关，过敏耐受", "reference_answer": "", "predict_answer": "临床试验筛选标准是临床试验中用于确定受试者是否符合参加临床试验的标准。临床试验筛选标准是指在受试者参加临床试验前，用于判断受试者是否符合参加临床试验的标准。这些标准可以用来确定受试者的年龄、性别、种族、疾病状态、参与试验的药物或治疗方式等因素是否符合参加临床试验的条件。在临床试验筛选标准中，可能涉及到受试者的身体特征、生活习惯、过敏情况、过敏药物使用情况等信息。例如，⑥试验前15d服用过益生菌；可以作为临床试验筛选标准之一。"}
{"type": "PromptCBLUE", "question": "给出对话中临床发现实体的阴阳性判断：\n患者：肛门出感觉有一个硬硬的肉瘤在里面,还有点疼\n医生：您好，有局部图片吗？方便上传吗\n患者：有的\n医生：大便干硬吗？排便通畅吗？大便带血吗？\n患者：图片因隐私问题无法显示\n患者：没有发现带血！有一点干燥\n医生：看到有痔疮\n医生：你那个肉瘤能圈出来吗\n患者：就是这两天感觉有点疼，大便完之后，用纸巾擦的时候，特别疼\n患者：图片因隐私问题无法显示\n患者：我先洗澡这个情况严重吗？\n患者：我现在这个情况严重吗\n患者：医生还在吗\n临床发现实体：疼，肉瘤，大便带血，带血，痔疮\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合\n答：", "reference_answer": "", "predict_answer": "Helper Method\ndef judge_picture(image):\n    if image.find(\"带血\") != -1:\n        return \"有带血！\"\n    elif image.find(\"干燥\") != -1:\n        return \"有一点干燥\"\n    else:\n        return \"不清楚！\"\n\ninput = readline()\nwhile input != \"停止\":\n    image = readline()\n    print(judge_picture(image))\n    input = readline()\noutput = \"没有发现带血！有一点干燥\"\nprint(f\"{input} -> {output}\")"}
{"type": "PromptCBLUE", "question": "患者：大夫好，我妈妈这两天小便频繁，且小便时从心口窝到膀胱一条线都火辣辣的，今早小便完用纸擦时见血水，请问是怎么回事。我妈妈这两天肠胃不好，总胀气，昨天下午开始吃肠炎宁。\n医生：你好，考虑有尿路感染，建议去医院查个尿常规看看\n患者：尿路感染怎么会胃也不舒服\n问题：我们已经给出问诊对话中的临床发现，请问这些实体的阴阳性是？\n临床发现实体：肠炎，胀气，小便频繁，肠胃不好，心口窝到膀胱一条线都火辣辣的，胃也不舒服\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合\n答：", "reference_answer": "", "predict_answer": "Helper Method：\n临床发现实体集合的阴阳性可以表示病人当前可能存在或已经发生的疾病，需要进一步检查和治疗。实体集合的阴阳性也可以表示病人当前的症状组合，需要综合考虑和诊断。在医疗领域，实体的阴阳性对于医生来说非常重要，可以帮助医生更快更准确地进行疾病诊断和治疗。"}
{"type": "PromptCBLUE", "question": "给出诊断的归一化：\n贲门炎，慢性萎缩性胃炎伴糜烂，十二指肠球炎;\n医学实体选项：梅毒性脑炎，慢性萎缩性胃炎，贲门炎，十二指肠炎，糜烂性胃炎，十二指肠球炎\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词", "reference_answer": "", "predict_answer": "Helper程序（也称为协程）是一种可以同时运行多个任务的异步编程模型。 在Python中，可以使用协程来模拟多线程。 在本教程中，我们将了解如何使用协程在Python中实现多线程处理。\n\n为了使用协程在Python中实现多线程处理，我们需要将任务分为多个部分，并让 Python 引擎在每个任务完成之前继续运行。这被称为流水线处理。 在以下示例中，我们将定义三个协程函数，每个函数都会将任务分解为小块，并在任务完成之后将结果添加到总结果中。\n\n # 定义协程函数\n@asyncio.coroutine\ndef worker(n):\n    for i in range(n):\n        yield from asyncio.sleep(0.1)\n        print(\"Worker %d\" % i)\n\n@asyncio.coroutine\ndef main():\n    # 定义任务数量\n    n = 10\n    \n    # 运行协程函数并 await 结果\n    results = [asyncio.run_coroutine(worker, n) for _ in range(10)]\n    await asyncio.gather(*results)\n\n@asyncio.coroutine\ndef monitor():\n    while True:\n        asyncio.sleep(0.1)\n        print(\"Main\")\n\n# 运行 monitor 并 await 结果\nasyncio.run_coroutine(main())\nasyncio.run_coroutine(monitor())"}
{"type": "PromptCBLUE", "question": "判断临床试验筛选标准的类型：\n7.不能完成随访的患者。\n选项：护理，伦理审查，药物，居住情况，能力，吸烟状况，过敏耐受，特殊病人特征，性别，年龄，实验室检查，种族，读写能力，依存性，研究者决定，器官组织状态，治疗或手术，残疾群体，知情同意，怀孕相关，饮食\n答：", "reference_answer": "", "predict_answer": "Helper functions are functions which provide helper or convenience functionality to other functions. They are commonly used in programming languages to simplify the coding and reduce the maintenance costs. In the question, the helper function is used to simplify the coding of the clinical trial筛选标准."}
{"type": "PromptCBLUE", "question": "根据对话历史和当前对话，抽取症状实体，以及这些实体的阴阳性：\n对话历史：\n医生：一般疫苗接种发热不超过38度，一般第二天，就不烧了。\n患者：是了，已经打了两次了，这是第三次\n当前对话：\n医生：幼儿急疹是病毒感染引起的。\n候选：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状\n答：", "reference_answer": "", "predict_answer": "Helper Method：\n```python\ndef extract_symptom_entities(text):\n    symptoms = []\n    for match in SYMPTOM_MATCHES.finditer(text):\n        symptom = match.group(1)\n        if ('[' in symptom and ']' in symptom):\n            symptoms.append({'symptom': symptom, 'positive': 'positive' in symptom})\n        else:\n            symptoms.append({'symptom': symptom, 'positive': False})\n    return symptoms\n```\n\n使用方法：\n```python\ntext = \"医生：一般疫苗接种发热不超过38度，一般第二天，就不烧了。\n患者：是了，已经打了两次了，这是第三次\"\nsymptoms = [extract_symptom_entities(s) for s in text.split()]\n```\n\n输出：\n```python\n[{'name': '发热', 'positive': True}, {'name': '接种', 'positive': True}, {'name': '疫苗', 'positive': True}, {'name': '第二天', 'positive': True}, {'name': '接种', 'positive': True}, {'name': '第三次', 'positive': True}, {'name': '幼儿急疹', 'positive': True}, {'name': '病毒感染', 'positive': True}, {'name': '症状', 'positive': True}, {'name': '不烧', 'positive': True}, {'name': '烧', 'positive': True}, {'name': '38度', 'positive': True}, {'name': '第二天', 'positive': True}, {'name': '医生', 'positive': True}, {'name': '患者', 'positive': True}, {'name': '感冒', 'positive': True}, {'name': '咳嗽', 'positive': True}, {'name': '鼻塞', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '过敏', 'positive': True}, {'name': '该', 'positive': True}, {'name': '否', 'positive': True}, {'name': '该', 'positive': True}, {'name': '该', 'positive': True}, {'name': '过敏', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '咳嗽', 'positive': True}, {'name': '鼻塞', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '咳嗽', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '咳嗽', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '咳嗽', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '咳嗽', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '咳嗽', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '咳嗽', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '喷嚏', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive': True}, {'name': '流涕', 'positive"}
{"type": "PromptCBLUE", "question": "诊断实体的语义标准化：\n双下肢瘢痕挛缩畸形\n实体选项：先天性小耳畸形，下肢瘢痕，下唇瘢痕，垂体瘢痕形成，下肢肌挛缩，上肢肌挛缩，瘢痕挛缩\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词", "reference_answer": "", "predict_answer": "Helper class是一种封装类，用于封装一些函数或代码块，使得它们可以重复使用。在编写代码时，我们可以将一些重复使用的代码封装在Helper class中，然后将这个Helper class实例化并使用它来调用某些函数或代码块。下面是一个简单的Helper class例子："}
{"type": "PromptCBLUE", "question": "诊断归一化：\n结节性硬化症\n选项：进行性系统性硬化症，缺血性结肠炎，结节性硬化\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词\n答：", "reference_answer": "", "predict_answer": "Helper Method\ndef calculate(x,y,z):\n    return x + y + z\n\n# 测试\nx = 2\ny = 3\nz = 4\nresult = calculate(x,y,z)\nprint(result)\n# 输出：9\n\nExplanation:\n在这个问题中，我们需要计算三个数字的和。我们提供了一个 helper method calculate()，它接受三个参数 x, y 和 z，并返回它们的和。然后，我们可以调用 calculate() 来计算这三个数字的和，并打印出结果。\n\n在 Python 中，可以使用 lambda 表达式来创建一个函数，该函数接受三个参数作为参数，并返回它们的和。\n\n在另一个例子中，我们将使用装饰器来创建一个函数，该函数可以接受一个函数作为参数，并对其进行修改。\n\n更详细的解释：\n在这个问题中，我们想要计算三个数字的和。我们提供了一个 helper method calculate()，它接受三个参数 x, y 和 z，并返回它们的和。然后，我们可以调用 calculate() 来计算这三个数字的和，并打印出结果。\n\n在 Python 中，可以使用 lambda 表达式来创建一个函数，该函数接受三个参数作为参数，并返回它们的和。例如：\n\n```python\ndef calculate(x, y, z):\n    return x + y + z\n\n# 测试\nx = 2\ny = 3\nz = 4\nresult = calculate(x, y, z)\nprint(result)\n# 输出: 9\n```\n\n因此，我们可以使用 lambda 表达式来创建一个计算三个数字的和的函数。在另一个例子中，我们可以使用装饰器来创建一个函数，该函数可以接受一个函数作为参数，并对其进行修改。例如：\n\n```python\ndef calculate(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        result = func(*args, **kwargs)\n        print(result)\n        return result\n    return wrapper\n```\n\n在 Python 中，装饰器是一种函数 decorator，它可以在函数定义的内部对函数进行修改。例如，在函数中添加 log 函数，并将其参数修改为输入的数值：\n\n```python\ndef foo(a):\n    return log(a)\n```\n\n使用装饰器可以创建一个计算自然对数功能的函数：\n\n```python\ndef logfo(num):\n    return log(num) # 添加 `log` 函数定义，并将输入的数值作为函数的参数\n```\n\n然后，我们可以使用 logfo() 函数来计算自然对数：\n\n```python\na = 2\nlog_a = logfo(a)\nprint(foo(a)) # 计算 a 的自然对数\nprint(log_a)\n# 输出: 3.29\n# 3.29\n```\n\n因此，在 Python 中，可以使用装饰器来创建一个函数，该函数可以添加新的功能到已有函数中。"}
{"type": "PromptCBLUE", "question": "我想知道下面两个搜索词的意思有多相同。\n“吃啥能减肥”，“吃什么易减肥”。\n选项：完全一致，后者是前者的语义子集，后者是前者的语义父集，语义无直接关联\n答：", "reference_answer": "", "predict_answer": "“吃啥能减肥”，“吃什么易减肥”表达的是相似的意图，都是希望通过饮食来达到减肥的目的。然而，在语义上这两个搜索词可能存在一定的差异。“吃啥能减肥”更注重的是具体的食物种类，而“吃什么易减肥”则更关注于饮食的整体结构以及所包含的食物种类。因此，这两个搜索词在语义上不完全相同，后者是前者的语义子集。"}
{"type": "PromptCBLUE", "question": "“高血压高血糖能吃萝卜，山芋，菜籽油吗？”，“高血压患者可以吃苦瓜桑叶片吗？”。\n这两句是一样的意思吗？\n选项：是的，不是\n答：", "reference_answer": "", "predict_answer": "Helper方法：\n选项：不是\n答：不是"}
{"type": "PromptCBLUE", "question": "右手中指皮肤划伤\n归一化后的标准词是？\n实体选项：疣状皮肤结核，手皮肤松弛，手指开放性损伤\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词\n答：", "reference_answer": "", "predict_answer": "Helper function `create` creates a new `DottedLine` instance and initializes it with the given `start` and `stop` points. If the given `color` is `null`, a default color will be used (currently `Color.black`). If the given `width` is `null`, a default width will be used (currently `2.0`). If the given `dashStyle` is `null`, a default dashStyle will be used (currently `\"dot\"`). If the given `orientation` is `null`, a default orientation will be used (currently `\"left\"`). If the given `pivot` is `null`, a default pivot will be used (currently `0.0`). If the given `radius` is `null`, a default radius will be used (currently `5.0`). If the given `begin` is `null`, a default begin will be used (currently `\"left\"`). If the given `end` is `null`, a default end will be used (currently `\"left\"`). If the given `colorFunction` is `null`, a default colorFunction will be used (currently `\"linear\"`). If the given `beginColorFunction` is `null`, a default beginColorFunction will be used (currently `\"linear\"`). If the given `endColorFunction` is `null`, a default endColorFunction will be used (currently `\"linear\"`). If the given `beginWidth` is `null`, a default beginWidth will be used (currently `\"1.0\"`). If the given `endWidth` is `null`, a default endWidth will be used (currently `\"1.0\"`). If the given `beginDashStyle` is `null`, a default beginDashStyle will be used (currently `\"dot\"`). If the given `endDashStyle` is `null`, a default endDashStyle will be used (currently `\"dot\"`). If the given `beginOrientation` is `null`, a default beginOrientation will be used (currently `\"left\"`). If the given `endOrientation` is `null`, a default endOrientation will be used (currently `\"left\"`). If the given `beginPivot` is `null`, a default beginPivot will be used (currently `0.0`). If the given `endPivot` is `null`, a default endPivot will be used (currently `0.0`). If the given `beginRadius` is `null`, a default beginRadius will be used (currently `5.0`). If the given `endRadius` is `null`, a default endRadius will be used (currently `5.0`)."}
{"type": "PromptCBLUE", "question": "诊断实体的语义标准化：\n腮裂瘘管\n实体选项：桡侧副韧带断裂，食管瘘，胆管瘘，鳃裂瘘\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词", "reference_answer": "", "predict_answer": "Helper is used to create a new instance of the type. It can also be used to add some initial state to the newly-created instance."}
{"type": "PromptCBLUE", "question": "脉络膜转移癌\n归一化后的标准词是？\n实体选项：继发性癌，脉络膜继发恶性肿瘤，转移性单纯癌，肠系膜上动脉瘤\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词", "reference_answer": "", "predict_answer": "Helper function `calculate()` should return `True` if the value is within the given range and `False` otherwise.\nInput: float number `x`\ncalculate(x):\n   If x is between 0 and 1, return x. If x is between 1 and 2, return 1 - x. If x is between 2 and 3, return (1 - x)^2. If x is between 3 and 4, return (1 - x)^3. If x is between 4 and 5, return (1 - x)^4. If x is between 5 and 6, return (1 - x)^5. If x is between 6 and 7, return (1 - x)^6. If x is between 7 and 8, return (1 - x)^7. If x is between 8 and 9, return (1 - x)^8. If x is between 9 and 10, return (1 - x)^9. If x is between 10 and 11, return (1 - x)^10. If x is between 11 and 12, return (1 - x)^11. If x is between 12 and 13, return (1 - x)^12. If x is between 13 and 14, return (1 - x)^13. If x is between 14 and 15, return (1 - x)^14. If x is between 15 and 16, return (1 - x)^15. If x is between 16 and 17, return (1 - x)^16. If x is between 17 and 18, return (1 - x)^17. If x is between 18 and 19, return (1 - x)^18. If x is between 19 and 20, return (1 - x)^19. If x is between 20 and 21, return (1 - x)^20. If x is between 21 and 22, return (1 - x)^21. If x is between 22 and 23, return (1 - x)^22. If x is between 23 and 24, return (1 - x)^23. If x is between 24 and 25, return (1 - x)^24. If x is between 25 and 26, return (1 - x)^25. If x is between 26 and 27, return (1 - x)^26. If x is between 27 and 28, return (1 - x)^27. If x is between 28 and 29, return (1 - x)^28. If x is between 29 and 30, return (1 - x)^29. If x is between 30 and 31, return (1 - x)^30. If x is between 31 and 32, return (1 - x)^31. If x is between 32 and 33, return (1 - x)^32. If x is between 33 and 34, return (1 - x)^33. If x is between 34 and 35, return (1 - x)^34. If x is between 35 and 36, return (1 - x)^35. If x is between 36 and 37, return (1 - x)^36. If x is between 37 and 38, return (1 - x)^37. If x is between 38 and 39, return (1 - x)^39. If x is between 39 and 40, return (1 - x)^40. If x is between 40 and 41, return (1 - x)^41. If x is between 41 and 42, return (1 - x)^42. If x is between 42 and 43, return (1 - x)^43. If x is between 43 and 44, return (1 - x)^44. If x is between 44 and 45, return (1 - x)^45. If x is between 45 and 46, return (1 - x)^46. If x is between 46 and 47, return (1 - x)^47. If x is between 47 and 48, return (1 - x)^48. If x is between 48 and 49, return (1 - x)^49. If x is between 49 and 50, return (1 - x)^50. If x is between 50 and 51, return (1 - x)^51. If x is between 51 and 52, return (1 - x)^52. If x is between 52 and 53, return (1 - x)^53. If x is between 53 and 54, return (1 - x)^54. If x is between 54 and 55, return (1 - x)^55. If x is between 55 and 56, return (1 - x)^56. If x is between 56 and 57, return (1 - x)^57. If x is between 57 and 58, return (1 - x)^58. If x is between 58 and 59, return (1 - x)^59. If x is between 59 and 60, return (1 - x)^60. If x is between 60 and 61, return (1 - x)^61. If x is between 61 and 62, return (1 - x)^62. If x is between 62 and 63, return (1 - x)^63. If x is between 63 and 64, return (1 - x)^64. If x is between 64 and 65, return (1 - x)^65. If x is between 65 and 66, return (1 - x)^66. If x is between 66 and 67, return (1 - x)^67. If x is between 67 and 68, return (1 - x)^68. If x is between 68 and 69, return (1 - x)^69. If x is between 69 and 70, return (1 - x)^70. If x is between 70 and 71, return (1 - x)^71. If x is between 71 and 72, return (1 - x)^72. If x is between 72 and 73, return (1 - x)^73. If x is between 73 and 74, return (1 - x)^74. If x is between 74 and 75, return (1 - x)^75. If x is between 75 and 76, return (1 - x)^76. If x is between 76 and 77, return (1 - x)^77. If x is between 77 and 78, return (1 - x)^78. If x is between 78 and 79, return (1 - x)^79. If x is between 79 and 80, return (1 - x)^80. If x is between 80 and 81, return (1 - x)^81. If x is between 81 and 82, return (1 - x)^82. If x is between 82 and 83, return (1 - x)^83. If x is between 83 and 84, return (1 - x)^84. If x is between 84 and 85, return (1 - x)^85. If x is between 85 and 86, return (1 - x)^86. If x is between 86 and 87, return (1 - x)^87. If x is between 87 and 88, return (1 - x)^88. If x is between 88 and 89, return (1 - x)^89. If x is between 89 and 90, return (1 - x)^90. If x is between 90 and 91, return (1 - x)^91. If x is between 91 and 92, return (1 - x)^92. If x is between 92 and 93, return (1 - x)^93. If x is between 93 and 94, return (1 - x)^94. If x is between 94 and 95, return (1 - x)^95. If x is between 95 and 96, return (1 - x)^96. If x is between 96 and 97, return (1 - x)^97. If x is between 97 and 98, return (1 - x)^98. If x is between 98 and 99, return (1 - x)^99. If x is between 99 and 100, return (1 - x)^100."}
{"type": "PromptCBLUE", "question": "找出当前对话中的症状，并判断阴阳性：\n对话历史：\n患者：您好大夫，我孩子现在反复发烧怎么回事\n医生：发烧一般还是有炎症感染引起，目前。化验过血常规吗\n当前对话：\n患者：没有，就是15号住院的时候化验了说是支原体感染，输液阿奇霉素五天红霉素三天，出院时又化验了，医生说没问题\n症状阴阳性选项：没有患有该症状，患有该症状，无法根据上下文确定病人是否患有该症状\n答：", "reference_answer": "", "predict_answer": "Helper Method\n```python\ndef find_symptom(text):\n    symptoms = [\"发烧\", \"咳嗽\", \"感冒\", \"过敏\", \"腹泻\", \"皮疹\", \"喉咙痛\", \"鼻塞\", \"头痛\", \"肌肉酸痛\", \"恶心\", \"呕吐\", \"尿频\", \"尿急\", \"尿痛\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"血尿\", \"\ntext = \"患者描述其症状，医生根据症状进行诊断。\"\nsymptoms = [\"患有\", \"没有\", \"无法根据上下文确定\"]\nfor symptom in symptoms:\n    if \"患有\" in text:\n        print(\"症状:\" + symptom)\n        break\nelse:\n    print(\"对话历史:\" + text)"}
{"type": "PromptCBLUE", "question": "对下述对话中的临床发现标识阴阳性：\n患者：我现在最怕就是宫外孕\n患者：医生，因为我之前查出有多囊，是用了三个月的优思明，第四个月试怀。排卵期间医生给我吃了结合雌激素，还打了6000单位的绒促性素针。现在我怀了，但是HCG上升幅度很少，跟这些原因有关吗\n患者：现在我的HCG上升速度慢，又有宫腔积液，有个假孕囊又还没断定，但就一直没有流血和下腹痛。如果胚胎停育也会这样吗\n患者：医生，有没有一周后有看见胎芽胎心，但HCG值还是跟不上的？\n医生：Hcg翻倍不好多数看不到\n医生：孕酮可以，hcg这么低是看不到的b超，可能太早，两周后再复查拉\n患者：如果宫外孕是否一定会下腹痛和流血？\n患者：但我没有流血又没有下腹痛\n患者：好像这样的情况有没有HCG后来高的呢\n医生：停育不一定有流血的\n患者：医生，请问HCG偏低，阴超显示早早孕与假孕囊的区别，还有就是宫腔有积液。假孕囊是宫外孕？说里面看不到有东西的。\n医生：你好，最后一次月经什么时候？\n患者：10月5日，但有多囊，用优思明三个月了\n医生：孕酮hcg多少？\n临床发现实体：宫外孕，多囊，下腹痛，流血，宫腔积液，HCG后来高，停育，HCG偏低\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合", "reference_answer": "", "predict_answer": "PULSE"}
{"type": "PromptCBLUE", "question": "给出对话中临床发现实体的阴阳性判断：\n患者：肚子有点大趴着侧着躺着的时候觉得左侧腹部有点疼痛\n医生：你好，请问这种情况有多长时间了\n患者：最近把\n医生：做过肝胆脾胰彩超，排便正常不\n患者：彩超都正常\n患者：排便有时候像拉肚子有时候正常\n医生：排便正常不\n医生：最好做个肠镜看看有没有肠炎\n患者：一般很正常不吃辣的就没事\n医生：一般左侧疼考虑肠炎可能性大\n患者：怎么治疗呢\n医生：饮食上不要吃生冷凉辣食物，可以用固本益肠片\n患者：哦哦少吃一点多运动被\n医生：是的\n患者：我这是胃的问题还是肠子呢\n医生：三餐规律，不要暴饮暴食，不要熬夜吃宵夜\n临床发现实体：左侧腹部有点疼痛，拉肚子，肠炎，左侧疼\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合\n答：", "reference_answer": "", "predict_answer": "Helper方法：\n\n- ```python\ndef find_disease(patient):\n    return {'name': '胃', 'positive': '肠炎', 'negative': '不吃辣的就没事', 'neutral': '最好做个肠镜看看有没有肠炎'}\n```\n\nusage:\n```python\npatient = {}\npatient['肚子有点大趴着侧着躺着的时候觉得左侧腹部有点疼痛'] = '最近把'\npatient['肝胆脾胰彩超都正常'] = '排便正常不'\npatient['排便有时候像拉肚子有时候正常'] = '医生：排便正常不'\npatient['一般左侧疼考虑肠炎可能性大'] = '医生：左侧疼考虑肠炎可能性大'\npatient['不吃辣的就没事'] = '医生：最好做个肠镜看看有没有肠炎'\npatient['少吃一点多运动被'] = '医生：是的'\npatient['这不是胃的问题还是肠子呢'] = '医生：三餐规律，不要暴饮暴食，不要熬夜吃宵夜'\ndisease = find_disease(patient)\n```\n\n输出:\n```\n{'name': '胃', 'positive': '肠炎', 'negative': '不吃辣的就没事', 'neutral': '最好做个肠镜看看有没有肠炎'}\n```\n```python\nimport clinical_entities as ce\n\ndef find_disease(patient):\n    return ce.ClinicalEntity(name=patient['肚子有点大趴着侧着躺着的时候觉得左侧腹部有点疼痛'], positive=patient['肝胆脾胰彩超都正常'], negative=patient['排便有时候像拉肚子有时候正常'], neutral=patient['一般左侧疼考虑肠炎可能性大'])\n\npatient = {}\npatient['三餐规律，不要暴饮暴食，不要熬夜吃宵夜'] = '医生：是的'\npatient['少吃一点多运动被'] = '医生：是的'\ndisease = find_disease(patient)\n```\n\n临床发现实体：肚子有点大，左侧腹部有点疼痛，三餐规律，左侧疼考虑肠炎可能性大\n阴阳性选项：已知的疾病或者假设的未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现实体是描述病人状态的集合，包含疾病、症状等，通过判断实体阴阳性来指导医生进一步诊断和治疗。"}
{"type": "PromptCBLUE", "question": "找出句子中的具有影像学检查关系类型的头尾实体对：\n慢性髓性白血病@### 危险因素 ### 强 查看全部   ### 中年 发病的中位年龄为53岁。慢性髓性白血病@ ### 弱 查看全部   ### 电离辐射暴露 可导致多种癌症。", "reference_answer": "", "predict_answer": "Helper Method to find the head and tail entity pairs of a relation-containing sentence:\ndef find_relation_heads_tails(relation, sentence):\n    heads, tails = [], []\n    for i in range(len(sentence)):\n        if relation in sentence[i]:\n            heads.append(i)\n        elif not relation in sentence[i]:\n            tails.append(i)\n    return heads, tails\n# Example:\n# \n# find_relation_heads_tails('@弱', '电离辐射暴露可导致多种癌症')\n# find_relation_heads_tails('@中位年龄为53岁', '慢性髓性白血病@### 危险因素 ### 强 查看全部   ### 中年 发病的中位年龄为53岁。')\n# \n# Returns the head and tail entity pairs of the relation \"弱\" in the sentence \"电离辐射暴露可导致多种癌症\". The head is 0 and the tail is 1."}
{"type": "PromptCBLUE", "question": "患者：赵医生您好，之前询问过您！10月中旬发烧，分两次服用散利痛，后出现急性肾衰竭症状，肌酐，尿酸，尿素均升高，血压升高。穿刺报告显示急性肾小管坏死可能性大。10月底出院后开始服用碳酸氢钠片，激素，安博维，肠溶片以及钙片。今天复查肌酐109，尿素尿酸均正常。但是血脂有点高，标准是1.7里面，我是1.78。入院的时候查是1.72，但在入院之前当地医院验的时候是在标准里面的。然后住院的时候也都是吃病人餐，回来也低脂低盐的，怎么血脂没降低啊，之前一直正常的，虽然我比较胖。激素影响吗？可是才吃了一个月激素（女，29岁）\n医生：你好，能把化验单传过来看看吗？\n医生：血脂1.78具体是哪一个指标\n医生：胆固醇还是低密度胆固醇\n患者：是甘油三酯\n患者：化验单不在身边，就甘油三酯高，其他是正常\n患者：医生在吗\n医生：不好意思你回复软件也没提示\n医生：刚看到\n医生：你这个甘油三酯不算高\n医生：甘油三酯跟饮食关系比较大平时做菜少放油\n医生：服用激素时会偏高一点\n医生：后面减量或停药会恢复\n患者：因为很奇怪，我入院之前两天在当地医院查的就是正常的，然后做住院抽血的时候又是偏高一点，然后服用激素一个月后1.78\n患者：因为我这两个月也低盐低脂的\n患者：医生又没收到提醒吗？\n医生：甘油三酯这个水平也不需要干预\n医生：注意点饮食就可以了\n医生：这个软件要不停进去才会看到\n患者：那停了激素会恢复吗？\n患者：医生，我这两周血压对比前两周的话还可以，但是今天去医院量，医院那个是一个筒的，整个手臂伸进去的那种，然后量出来下压竟然106，后来坐了一会儿103，可是我在家每天8点差不多是在8587吧这两天\n医生：会恢复你吃东西注意一点菜的油要少放一点\n医生：少在外面用餐\n患者：难道我的血压计出了问题吗？\n医生：那你下压挺高\n医生：上压怎么样\n患者：上压今天136，但这两天平时在家量都130以内\n医生：下压高也是高血压\n医生：可以咨询一下医生开点阿尔马尔\n患者：我在吃安博维啊，我的意思是怎么会偏差那么多呢\n医生：可能是你血压计的问题\n医生：一般医院大厅自动测量的机器还是比较准的\n患者：欧姆龙家用血压计不精确吗？\n医生：如果血压计确定没问题就有可能是白大褂高血压\n医生：就是在医院查血压或者见到医生就会血压高而在家是正常的\n医生：这种是假性高血压\n医生：不需要吃药\n患者：是这样医生，出院后我开始吃安博维降压，也是用家用血压计量的，基本要140多90多，晚上也要130多90，当然也有在12080以内的，比较少。然后前两周开始吃6粒激素，血压基本控制在13080左右。早上起来低压稍高点，在8785左右\n患者：然后今天去医生那里量要103\n患者：本来激素是吃7粒\n患者：光抑素C是什么医生\n医生：那你改天换家医院测量或者请医生用水银血压计给你测量一下\n患者：好的！\n医生：水银测得最准确\n患者：医生光抑素C偏高一点\n医生：胱抑素c是急性肾损伤的一个标志物\n患者：范围是1.07，今天是1.17\n医生：你血小板有没有减少\n患者：应该没有吧，不知道住院的时候有没有验\n患者：前两周光抑素是1.32\n患者：是在恢复吗？\n患者：现在肌酐下到109\n问题：我们已经给出问诊对话中的临床发现，请问这些实体的阴阳性是？\n临床发现实体：血压升高，发烧，急性肾衰竭，下压挺高，下压高，高血压，白大褂高血压，急性肾损伤\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合", "reference_answer": "", "predict_answer": "Helper:"}
{"type": "PromptCBLUE", "question": "东莞不孕不育医院哪家好\n这个医疗搜索词是什么意图分类？\n选项：医疗费用，功效作用，治疗方案，疾病描述，病因分析，指标解读，注意事项，就医建议，病情诊断\n答：", "reference_answer": "", "predict_answer": "Helper function can be used in multiple places\n\n在多个地方使用同一个helper function可以提高代码的复用性。\n\n在Swift中，可以使用静态方法或类来创建helper function，也可以通过var _ = func(){}来创建自定义函数，然后通过var f = func(){}来初始化函数。"}
{"type": "PromptCBLUE", "question": "因任何理由拒绝或没有按照方案要求进行治疗，包括临床检验和实验室检查\n是什么临床试验筛选标准类型？\n选项：怀孕相关，过敏耐受，口腔相关，饮食，锻炼，预期寿命，依存性，居住情况，健康群体，吸烟状况，能力，研究者决定，治疗或手术，教育情况，酒精使用，病例来源，诊断，疾病，特殊病人特征，伦理审查，风险评估，年龄，数据可及性，知情同意，献血，成瘾行为，药物，设备，性别，症状(患者感受)，器官组织状态，睡眠，疾病分期，护理", "reference_answer": "", "predict_answer": "Helper Method\ndef reject_treatment(disease, treatment):\n    \"Reasonable treatment that cannot be carried out or refused\"\n    return \"Invalid treatment\"\n\n# Usage\ndisease = 'diabetes'\ntreatment = 'exercise'\nrejected_reason = 'patient refuses to participate'\ntreatment = reject_treatment(disease, treatment)\nif rejected_reason in treatment:\n    print(\"The treatment '{}' is rejected because '{}'.\".format(treatment, rejected_reason))\nelse:\n    print(\"The treatment '{}' is not rejected.\".format(treatment))"}
{"type": "PromptCBLUE", "question": "病变累及心包则可致心包粘连，症状似粘连性心包炎。\n这个句子里面实体有哪些？\n实体选项：疾病，药物，临床表现，身体部位\n答：", "reference_answer": "", "predict_answer": "Helper函数用于在测试中生成和验证一些数据。在测试中，数据可能不正确或不完整，因此需要使用测试驱动开发（TDD）来不断测试和改进代码。测试驱动开发（TDD）通过编写测试代码来构建功能测试，然后运行这些测试来验证功能的正确性。通过这种方法，你可以快速地迭代地编写和测试代码，直到软件变得足够可靠。\n下面是一个简单的Helper函数，用于生成随机整数：\nimport random\n\ndef generate_random_integer(min_value, max_value):\n    \"\"\"Generates a random integer between `min_value` and `max_value`.\n    \"\"\"\n    return random.randint(min_value, max_value)\n\n# Test cases\nimport unittest\n\ndef test_random_integer():\n    \"\"\"Test random integer generation.\n    \"\"\"\n    random_integer = generate_random_integer(1, 5)\n    assert random_integer in (2, 3, 4, 5)\n    random_integer = generate_random_integer(1, 2)\n    assert random_integer == 1\n    random_integer = generate_random_integer(1, 2, 3)\n    assert random_integer in (1, 2, 3)\n    random_integer = generate_random_integer(1, 2, 3, 4)\n    assert random_integer in (1, 2, 3, 4)\n\n# Run the test cases\n unittest.main()"}
{"type": "PromptCBLUE", "question": "诊断实体的语义标准化：\n少许肝组织显示轻度脂肪变性\n实体选项：软组织交界性肿瘤，妊娠期急性脂肪肝，心肌脂肪变性，脂肪肝\n说明：从候选的若干个ICD-10诊断标准词中选择出与原诊断描述匹配的词\n答：", "reference_answer": "", "predict_answer": "Helper，也称为小助手，是一种在Python编程语言中用于扩展其功能的小型软件模块。它们旨在使程序更容易维护和扩展，同时减少需要直接调用库或底层代码的复杂性。在Python中，Helper可以轻松地嵌入在函数中，以提供额外的功能，或者作为类的外部接口。在Python 2.x中，可以使用内置的pythonauto和pydocument modules，在Python 3.x中，可以使用auto and document modules。这些Helper可以轻松地嵌入到函数中，并自动完成许多任务，例如将文档字符串转换为表格，将列表转换为字典，计算平均值和总和等。这些Helper还可以自动保存和打开文件，解析XML和YAML格式的数据，并生成图表和动画。总之，Helper是Python中用于程序扩展的小型软件模块。"}
{"type": "PromptCBLUE", "question": "判断下面搜索词的意图：\n什么原因会导致男人无精\n选项：后果表述，就医建议，治疗方案，指标解读，疾病描述，医疗费用，病情诊断，病因分析，注意事项，功效作用\n答：", "reference_answer": "", "predict_answer": "HelperMethod 是一种用于将非函数性代码转化为函数的方法。 它将对象的属性或方法转化为函数，从而使可以像调用普通函数一样调用对象的属性或方法。它可以在任何类型的大小对象上使用，例如Class、Object、Array、String、Number、Function等。\n\n使用方法：\n 1.定义一个抽象基类，在其构造函数中添加一个抽象属性或方法，然后使用HelperMethod将抽象属性或方法转化为实例化基类时实际执行的函数。\n 2.使用HelperMethod将构造函数的属性或方法转化为只执行特定操作而不创建实例的函数。\n 3.将对象的属性和方法转化为只执行特定操作而不改变原对象的函数。\n 4.将一组属性和方法转化为只执行特定操作而不改变原对象并创建新实例的函数。\n\n示例：\n 1.定义一个抽象基类，在其构造函数中添加一个抽象属性或方法，然后使用HelperMethod将抽象属性或方法转化为实例化基类时实际执行的函数。\n 2.使用HelperMethod将构造函数的属性或方法转化为只执行特定操作而不创建实例的函数。\n 3.将对象的属性和方法转化为只执行特定操作而不改变原对象的函数。\n 4.将一组属性和方法转化为只执行特定操作而不改变原对象并创建新实例的函数。\n\n使用HelperMethod可以实现上述代码片段中的功能。"}
{"type": "PromptCBLUE", "question": "对下述对话中的临床发现标识阴阳性：\n医生：裤子磨的，或之前有擦伤，都有可能\n患者：那你看那块破了\n患者：自己流的\n患者：刺挠的那种感觉\n医生：因为有擦破，保持干燥，清水清洗就可以了\n患者：你看那块是不是烂了\n医生：只是擦破了，没有关系，注意外阴卫生就可以了\n患者：我现在觉得像针扎一样\n患者：之前也有过这种感觉但是没流血，我是医院做检查了，那医生没查出来就说有炎症\n医生：破了不一定都流血的\n医生：有炎症更容易破\n患者：那破的那个地方是属于啥地方\n患者：宫颈糜烂是什么样子的\n医生：宫颈糜烂是在宫颈上，宫颈是在阴道里，自己看不到的\n患者：不是说那个也会出血么\n患者：怎么就烂了你看那块是不是烂了\n患者：医生您好，这是我的问题下体流血\n医生：你好，上一次月经什么时候来的？\n患者：2\n患者：不是阴道出血我给你看照片\n患者：图片因隐私问题无法显示\n患者：这个地方出血\n医生：看不清楚，有过性生活么？\n患者：有过\n医生：最近有过么？\n患者：图片因隐私问题无法显示\n患者：五天之前有过\n患者：阴道内没发现流血\n医生：没有流，没关系的，注意外阴卫生就可以了，就是擦破了\n患者：我没动它啊\n患者：而且我现在下面不舒服，感觉尿尿的时候刺疼，不尿的时候也疼\n患者：好吧\n医生：嗯\n患者：刺激的\n医生：因为破了，所以才会有这样的感觉\n患者：做了一次物理治疗回来没感觉了，但是来了一次月经同房一次后，现在就这样了\n患者：好吧\n患者：你看就那个地方流血\n医生：阴道口\n临床发现实体：破，擦破，烂，炎症，宫颈糜烂，烂了，下面不舒服，刺疼\n阴阳性选项：已有症状疾病或者假设未来可能发生的疾病等，未患有症状疾病，没有回答、不知道、回答不明确或者模棱两可不好推断，无实际意义的不标注或者和病人当前的状态独立不标注\n说明：临床发现是临床医学下，病人状态描述的概念集合\n答：", "reference_answer": "", "predict_answer": "Helper Method:\n- 根据临床发现实体，对病人状态进行分类和标注\n- 根据病人状态，提供病人适用的诊疗方案或者建议\n- 基于临床发现实体，对疾病进行分类和标注\n- 根据疾病分类，提供医学知识或者建议\n- 根据疾病分类，提供医学指导或者建议\n- 基于临床发现实体和疾病分类，提供治疗决策支持"}
{"type": "PromptCBLUE", "question": "医疗搜索：一岁半的宝宝烫伤好了出现粉红色、抹什么药膏最好\n回答内容：病例分析:伤后几天愈合的，2周内和超过2周的情况是不同的。意见建议:如果是在2周内愈合的，用点滋润的护肤品就好了，如果超过2周愈合的，要用防瘢痕的药物。\n上述搜索和回答是否相关？\n选项: 相关，不相关\n答：", "reference_answer": "", "predict_answer": "Helper程序的作用是处理一些常见任务，使得程序员能够专注于核心代码的编写。但是，过多的使用Helper程序会导致代码的复杂性和可读性下降，因此需要谨慎使用。"}
{"type": "PromptCBLUE", "question": "判断下面问诊句子的意图:\n注意饮食，可以口服助消化药物。\n选项：关于就医建议的提问，关于病因的回答，关于注意事项的提问，关于已有检查和治疗的提问，关于注意事项的解答，关于用药建议的提问，关于就医建议的解答，关于个人基本信息的询问，关于个人基本信息的回答，关于症状的询问", "reference_answer": "", "predict_answer": "Helper Function\n\n```\ndef is_question(text):\n    return text.startswith('?') and text.endswith('?')\n\ndef is_explanation(text):\n    return not is_question(text)\n\ndef is_patient_question(text):\n    return is_question(text) and (text[(-1)] == '/' or text[(-1)] == '*')\n\ndef is_patient_explanation(text):\n    return is_explanation(text) and (text[(-2)] == '...' or text[(-2)] == ' ')\n\ndef is_fact(text):\n    return not is_question(text)\n\ndef is_fact_explanation(text):\n    return is_fact(text) and (text[(-1)] == '.')\n\ndef is_comment(text):\n    return not is_question(text) and not is_fact(text) and not is_patient_question(text)\n\ndef is_exam(text):\n    return not is_fact(text)\n\ndef is_exam_fact(text):\n    return not is_fact(text) and not is_patient_question(text)\n\ndef is_patient_note(text):\n    return not is_fact(text) and not is_patient_question(text)\n\ndef is_patient_note_explanation(text):\n    return not is_fact(text) and (is_patient_note(text) or is_patient_note_explanation(text))\n\ndef is_medical_phrase(text):\n    return not is_comment(text)\n\ndef is_patient_medical_phrase(text):\n    return is_medical_phrase(text) and (text[(-1)] == '.')\n\ndef is_lab_test(text):\n    return not is_comment(text) and not is_fact(text) and not is_patient_question(text)\n\ndef is_patient_lab_test(text):\n    return is_lab_test(text) and (text[(-1)] == ')')\n\ndef is_patient_medical_lab_test(text):\n    return is_lab_test(text) and (text[(-1)] == '(')\n\ndef is_patient_medication(text):\n    return not is_comment(text) and not is_fact(text) and not is_patient_question(text)\n\ndef is_patient_medication_explanation(text):\n    return not is_comment(text) and is_patient_medication(text) and (text[(-2)] == 'et' or text[(-2)] == 'u')\n\ndef is_medical_condition(text):\n    return not is_comment(text)\n\ndef is_patient_medical_condition(text):\n    return is_medical_condition(text) and (text[(-1)] == '.')\n\ndef is_patient_disease(text):\n    return not is_comment(text) and not is_patient_medical_condition(text)\n\ndef is_patient_disease_explanation(text):\n    return not is_comment(text) and is_patient_disease(text) and (text[(-2)] == 'ing' or text[(-2)] == 'ed')\n\ndef is_medication(text):\n    return not is_comment(text)\n\ndef is_patient_medication_explanation(text):\n    return is_medication(text) and (text[(-2)] == 'et' or text[(-2)] == 'u')\n\ndef is_medical_insight(text):\n    return not is_comment(text)\n\ndef is_patient_medical_insight(text):\n    return is_medical_insight(text) and (text[(-1)] == '.')\n\ndef is_patient_dental_insight(text):\n    return not is_comment(text) and (text[(-1)] == '.')\n\ndef is_lab_test_diagnosis(text):\n    return not is_comment(text) and (text[(-1)] == ')')\n\ndef is_patient_dental_insight_diagnosis(text):\n    return not is_comment(text) and (text[(-1)] == '(')\n\ndef is_patient_medical_insight_diagnosis(text):\n    return is_medical_insight(text) and (text[(-1)] == '.')\n\ndef is_patient_medical_insight_diagnosis(text):\n    return is_medical_insight(text) and (text[(-1)] == '.')\n\ndef is_medical_fact(text):\n    return not is_comment(text)\n\ndef is_patient_fact(text):\n    return is_medical_fact(text) and (text[(-2)] == '...' or text[(-2)] == ' ')\n\ndef is_patient_note_explanation(text):\n    return not is_comment(text) and is_patient_note(text) and (text[(-2)] == '...' or text[(-1)] == '.')\n\ndef is_patient_disease_treatment(text):\n    return not is_comment(text) and is_patient_disease(text) and (text[(-2)] == 'ed')\n\ndef is_patient_medical_insight_treatment(text):\n    return is_medical_insight(text) and (text[(-1)] == '.')\n\ndef is_patient_dental_insight_treatment(text):\n    return not is_comment(text) and is_patient_dental_insight(text) and (text[(-1)] == ')')\n\ndef is_patient_medical_insight_treatment(text):\n    return is_medical_insight(text) and (text[(-1)] == '.')\n\ndef is_patient_disease_treatment(text):\n    return not is_comment(text) and is_patient_disease(text) and (text[(-2)] == '...' or text[(-1)] == '.')\n\ndef is_patient_medical_insight_treatment(text):\n    return is_medical_insight(text) and (text[(-1)] == '.')\n\ndef is_patient_disease(text):\n    return not is_comment(text)\n\ndef is_patient_medical_insight(text):\n    return is_medical_fact(text) and (not is_patient_note(text)) and (not is_patient_note_explanation(text)) and (not is_patient_disease(text)) and (not is_patient_disease_treatment(text)) and (not is_patient_medical_insight_treatment(text)) and (not is_patient_dental_insight_treatment(text)) and (not is_patient_medical_insight_diagnosis(text)) and (not is_patient_dental_insight_diagnosis(text)) and (not is_patient_medical_insight_diagnosis(text)) and (not is_patient_disease_treatment(text)) and (not is_patient_dental_insight_treatment(text)) and (not is_patient_medical_insight_treatment(text)) and (not is_patient_disease_treatment(text)) and (not is_patient_dental_insight_treatment(text)) and (not is_patient_medical_insight_treatment(text)) and (not is_patient_disease_treatment(text)) and (not is_patient_dental_insight_treatment(text)) and (not is_patient_medical_insight_treatment(text)) and (not is_patient_disease_treatment(text)) and (not is_patient_dental_insight_treatment(text)) and (not is_patient_medical_insight_treatment(text)) and (not is_patient_disease(text)) and (not is_patient_medical_insight(text)) and (not is_patient_disease_treatment(text)) and (not is_patient_dental_insight(text)) and (not is_patient_medical_insight(text)) and (not is_patient_disease_treatment(text)) and (not is_patient_dental_insight(text)) and (not is_patient_medical_insight(text)) and (not is_patient_disease_"}
{"type": "PromptCBLUE", "question": "“跟腱拉伤”，“跟腱拉伤怎么办”。\n这两句话的意思的匹配程度如何？\n选项：完全不匹配或者没有参考价值，很少匹配有一些参考价值，部分匹配，完全匹配\n答：", "reference_answer": "", "predict_answer": "Helper function 的定义\n在函数内部定义一个函数来完成特定任务\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值\n在函数内部定义一个全局变量来保存值\n在函数内部创建一个局部变量来保存值\n在函数内部修改一个全局变量的值"}
{"type": "PromptCBLUE", "question": "判断两个查询所表述的主题的匹配程度：\n“手臂麻是什么原因引起的”，“手臂突然发麻是怎么回事”。\n选项：完全一致，后者是前者的语义子集，后者是前者的语义父集，语义无直接关联\n答：", "reference_answer": "", "predict_answer": "HelperClass.setMethod(\"method_name\", \"(参数)\", \"throws Exception\", \"将方法签名设置为`method_name(参数) throws Exception`\");\n\nvar method = HelperClass.getMethod(\"method_name\");\n\n// 测试方法签名\nassertEquals(\"手臂麻是什么原因引起的\", method.formatParameters(null), \"手臂麻是什么原因引起的\", result);\n\n// 测试参数格式正确\nresult = method.formatParameters([\"手臂\"]);\nassertEquals(\"手臂突然发麻是怎么回事\", result, \"手臂突然发麻是怎么回事\", result);\n\n// 测试参数为空\nresult = method.formatParameters(null);\nassertEquals(\"手臂麻是什么原因引起的\", result, \"手臂麻是什么原因引起的\", result);\n\n// 测试抛出异常\ntry {\n  method.apply(null, null);\n  fail(\"Expected `Exception` was not thrown\");\n} catch (e) {\n  assertInstanceOf(\"Expected `Exception` was thrown\", \"Exception\", e);\n}\n\n// 测试参数不为空\nmethod.apply(null, [\"手臂\"]);\nmethod.apply(null, null);\nmethod.apply(null, []);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\n\n// 测试多个参数\nresult = method.formatParameters([\"手臂\"]);\nassertEquals(\"(手臂)\", result, \"(手臂)\", result);\n\n// 测试空串\nresult = method.formatParameters(null);\nassertEquals(\"手臂麻是什么原因引起的\", result, \"手臂麻是什么原因引起的\", result);\n\n// 测试null\nresult = method.formatParameters(null);\nassertEquals(\"手臂麻是什么原因引起的\", result, \"手臂麻是什么原因引起的\", result);\n\n// 测试空串和null\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\n\n// 测试null和空串\nresult = method.formatParameters(null);\nresult = method.formatParameters(null);\nassertEquals(\"手臂麻是什么原因引起的\", result, \"手臂麻是什么原因引起的\", result);\n\n// 测试空串和null\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply(null, null);\nmethod.apply("}
{"type": "PromptCBLUE", "question": "医疗搜索：请问肚子上的肉怎么样才能减掉？\n以下回答内容是否能够回答搜索问题？\n回答内容：按照你的身高计算，体重在标准范围内。减肚子肥肉可以稍微控制饮食，如晚餐主食减半，加强运动，以运动为主，减腹部运动建议1、每天慢跑四十分钟到一个小时；2、每周运动5-7次；3、局部运动腰部仰卧起坐，20个为一组，每天5组；转呼啦圈；游泳，每周一到两次\n选项: 相关，不相关", "reference_answer": "", "predict_answer": "HelperMethod可以用于解决上述问题，具体实现如下：\n```python\ndef reduce_belly(height):\n    return height//2\n\ndef exercise(height):\n    return 45 if height > 70 else 0\n\nresult = reduce_belly(height) + exercise(height)\nprint(result)\n```\n输出：\n```\n50\n```\n根据身高计算，您的体重在标准范围内，减肚子肥肉可以稍微控制饮食，如晚餐主食减半，加强运动，以运动为主，减腹部运动建议1、每天慢跑四十分钟到一个小时；2、每周运动5-7次；3、局部运动腰部仰卧起坐，20个为一组，每天5组；转呼啦圈；游泳，每周一到两次。以上运动加上合理饮食，可以有效减少腹部脂肪，达到减肚子效果。"}
{"type": "PromptCBLUE", "question": "判断下面问诊句子的意图:\n外卖小火锅\n选项：关于个人基本信息的询问，关于注意事项的解答，关于就医建议的解答，关于病因的回答，给出诊断，关于已有检查和治疗的提问，关于注意事项的提问，关于症状的询问，关于用药建议的提问，关于就医建议的提问，关于病因的询问，关于个人基本信息的回答，关于症状的回答\n答：", "reference_answer": "", "predict_answer": "Helper Method:\n```python\ndef check_pulse(pulse):\n    return {'name': pulse.name, 'blood_sugar': pulse.blood_sugar, 'blood_pressure': pulse.blood_pressure, 'heart_rate': pulse.heart_rate, 'eyes': pulse.eyes, 'teeth': pulse.teeth, 'health_status': pulse.health_status, 'height': pulse.height, 'weight': pulse.weight, 'gender': pulse.gender, 'age': pulse.age, 'diagnoses': pulse.diagnoses, 'medication': pulse.medication, 'medical_history': pulse.medical_history, 'health_diary': pulse.health_diary, 'physical_fitness': pulse.physical_fitness, 'medical_specialty': pulse.medical_specialty, 'medical_insurance': pulse.medical_insurance, 'medical_family': pulse.medical_family, 'medical_friends': pulse.medical_friends, 'medical_career': pulse.medical_career, 'medical_education': pulse.medical_education, 'medical_research': pulse.medical_research, 'medical_interest': pulse.medical_interest, 'medical_goals': pulse.medical_goals, 'medical_vision': pulse.medical_vision, 'medical_disability': pulse.medical_disability, 'medical_need_assistance': pulse.medical_need_assistance, 'medical_family_history': pulse.medical_family_history, 'medical_history': pulse.medical_history, 'medical_goal_assistance': pulse.medical_goal_assistance, 'medical_research_interest': pulse.medical_research_interest, 'medical_research_goal_assistance': pulse.medical_research_goal_assistance, 'medical_interest_health': pulse.medical_interest_health, 'medical_goal_health': pulse.medical_goal_health, 'medical_research': pulse.medical_research_interest, 'medical_family_history': pulse.medical_family_history, 'medical_family': pulse.medical_family, 'medical_friends': pulse.medical_friends, 'medical_career_history': pulse.medical_career_history, 'medical_education_history': pulse.medical_education_history, 'medical_research_interest_health': pulse.medical_research_interest_health, 'medical_education_history': pulse.medical_education_history, 'medical_family_health': pulse.medical_family_health, 'medical_family_health_history': pulse.medical_family_health_history, 'medical_family_health_issues': pulse.medical_family_health_issues, 'medical_family_health_problem': pulse.medical_family_health_problem, 'medical_family': pulse.medical_family, 'medical_friends': pulse.medical_friends, 'medical_career_probability': pulse.medical_career_probability, 'medical_goals_achievement': pulse.medical_goals_achievement, 'medical_vision_achievement': pulse.medical_vision_achievement, 'medical_disability_achievement': pulse.medical_disability_achievement, 'medical_need_assistance_achievement': pulse.medical_need_assistance_achievement, 'medical_family_history': pulse.medical_family_history, 'medical_family_health': pulse.medical_family_health, 'medical_family_health_history': pulse.medical_family_health_history, 'medical_family': pulse.medical_family}}\n```\n\n判断是否需要进一步诊断。对于已经诊断的病例，直接返回对应的诊断信息；对于没有诊断的病例，返回一个 `HealthCareer` 对象，并设置 `is_consulting_pulse` 为 `True`，表示该对象代表求诊，需要进一步诊断。"}
{"type": "PromptCBLUE", "question": "“白云山板蓝根颗粒”，“复方板蓝根的功效与作用”。\n这两句的语义关系是？\n选项：完全一致，后者是前者的语义子集，后者是前者的语义父集，语义无直接关联", "reference_answer": "", "predict_answer": "Helper function can be used to implement the above relationship.\ndef has_ancestor(root, node):\n    \"\"\"\n    :type root: TreeNode\n    :type node: TreeNode\n    :rtype: bool\n    \"\"\"\n    if (root == node):\n        return False\n    elif (node.left and has_ancestor(root, node.left)):\n        return True\n    elif (node.right and has_ancestor(root, node.right)):\n        return True\n    return has_ancestor(root.left, node), has_ancestor(root.right, node)"}
{"type": "PromptCBLUE", "question": "10、法律规定的残疾患者(盲、聋、哑、智力障碍、精神障碍等)；\n是什么临床试验筛选标准类型？\n选项：睡眠，年龄，吸烟状况，体征(医生检测），护理，成瘾行为，病例来源，疾病分期，风险评估，药物，饮食，特殊病人特征，实验室检查，设备，性别，研究者决定，种族，性取向，残疾群体，锻炼，酒精使用，教育情况，口腔相关，预期寿命，依存性，健康群体，知情同意，怀孕相关，治疗或手术，症状(患者感受)，肿瘤进展\n答：", "reference_answer": "", "predict_answer": "Helper，作为一名经验丰富的程序员，也是一名设计师，他需要掌握一些基础的UI设计技巧，以便更好地为用户提供服务。这篇文章将介绍一些基本的设计技巧，帮助Helper更好地掌握UI设计。\n\n1. 了解目标用户的需求和期望\n在设计UI之前，Helper需要了解目标用户的需求和期望。这可以通过与用户进行交流和调查来完成。了解用户的需求可以帮助Helper更好地设计出符合用户需求和期望的UI。\n\n2. 交互设计\nHelper需要考虑UI的交互设计，确保用户可以轻松地浏览、查找和操作数据。Helper还应该考虑用户反馈和交互逻辑，以确保用户可以正确地完成任务。\n\n3. 色彩设计和配色方案\n色彩设计和配色方案对于UI设计非常重要。Helper需要使用合适的色彩和配色方案来创建清晰、简洁和愉悦的用户体验。不同的色彩和配色方案可以吸引用户的注意力或传达特定的情感。\n\n4. 空间和布局\nHelper需要设计一个合理的空间和布局，以便用户可以轻松地浏览、查找和操作数据。Helper还应该考虑到不同功能之间的有序和合理的关系，以确保UI的整体一致性和易用性。\n\n5. 响应式设计\n响应式设计是确保UI在所有设备上都能良好工作的关键。Helper需要设计一个响应式UI，以便在不同的设备上呈现出相同的用户体验。响应式设计需要考虑到屏幕大小、分辨率和其他设备特性。\n\n6. 移动优先设计\n移动优先设计是指在移动设备上测试和优化UI设计。Helper需要在移动设备上测试UI设计，并做出必要的调整和优化，以确保移动设备的用户体验最佳。\n\n7. 用户反馈收集和迭代设计\nHelper需要定期收集用户的反馈，并据此进行迭代设计。通过不断地收集和处理用户反馈，Helper可以更好地了解用户的需求和期望，并不断改进和优化UI设计。\n\n8. 设计规范和标准化\nHelper需要设计规范和标准化，以确保UI设计的质量和一致性。Helper需要遵循设计规范和标准化，以确保UI设计的质量和一致性。通过遵循设计规范和标准化，Helper可以避免设计和开发中的问题，并确保用户可以轻松地识别和操作UI。\n\n这些UI设计技巧对于Helper更好地掌握UI设计非常有帮助。Helper还应该不断学习和更新自己的知识，以便更好地满足用户的需求和期望。"}
{"type": "PromptCBLUE", "question": "找出指定的实体：\nIL-1可诱导滑膜成纤维细胞及关节软骨细胞合成前列腺素E2</sub>及各种蛋白酶，介导关节组织损伤。\n类型选项：疾病，医院科室，身体部位\n答：", "reference_answer": "", "predict_answer": "Helper class\n```python\nclass PULSE(object):\n    def __init__(self):\n        self.IL1 = 'IL1可诱导滑膜成纤维细胞及关节软骨细胞合成前列腺素E2及各种蛋白酶，介导关节组织损伤。'\n    \n    def helper_function(self):\n        return self.IL1\n    \n    helper_function.__doc__ = '代表PULSE类方法的Helper函数。'\n    helper_function.__name__ = 'IL1'\n    \n    def __getattr__(self, item):\n        if item == 'IL1':\n            return self.helper_function\n        else:\n            raise AttributeError(item)\n    __getattr__.__doc__ = '如果实例拥有指定属性/方法，则返回指定文本。'\n    __getattr__.__name__ = 'IL1'\n```\n\n使用示例：\n```python\npulse = PULSE()\nprint(pulse.IL1)\npulse.IL1 = '改写后的文本'\nprint(pulse.IL1)\n```\n输出：\n```\n改写后的文本\n```"}
{"type": "PromptCBLUE", "question": "看嗓子了吗？有无化脓，疱疹？\n这个问诊句子是什么意图分类？\n选项：关于已有检查和治疗的提问，给出诊断，关于就医建议的提问，关于病因的询问，关于症状的回答，关于用药建议的提问，关于注意事项的解答，关于个人基本信息的回答，关于就医建议的解答，关于病因的回答，关于注意事项的提问", "reference_answer": "", "predict_answer": "Helper method to create a conversation between two users in which they are prompted to check if they have a sore throat, tonsils, or a sore wind. This method uses a question prompt and two strings of characters to create a conversation that includes the appropriate response. The conversation can be modified to include other symptoms or to change the prompt. The conversation can be made into a thread by using the `~' character."}
{"type": "PromptCBLUE", "question": "根据下面的问诊对话自动生成对应的诊疗报告：\n问诊对话历史：\n患者：5个月宝贝儿大口吐奶怎么办\n医生：您好\n患者：你好\n医生：这种情况几天了\n患者：昨晚\n患者：吐了三次\n医生：发烧，咳嗽，流鼻涕，拉肚子不\n患者：刚有点鼻涕\n医生：几次大便了\n患者：别的症状没有\n患者：没大便\n医生：能喝水不\n医生：吃奶好不\n医生：能放屁不\n患者：好\n患者：吃完还差不多会吐\n医生：宝宝现在精神状态怎么样\n患者：有点蔫\n医生：能放屁不\n患者：没有\n医生：今天大便没\n患者：没有\n患者：小便了几次\n医生：哭闹不\n患者：不\n患者：像喷泉一样吐\n患者：太吓人\n医生：（空）\n医生：得换一个那个给他回做一个腹部彩超看看，\n患者：吃奶正常\n医生：鼻涕多不\n医生：黄不\n医生：鼻塞重不\n患者：有点\n医生：可能是着凉引起的消化不好\n医生：宝宝现在怎么样了？\n说明：诊疗报告分为主诉, 现病史, 辅助检查, 既往史, 诊断, 建议这六个章节。\n答：", "reference_answer": "", "predict_answer": "Helper方法：\n- ```\nto_csv(\"病例报告.csv\", pd.to_csv(case_report, index=False))\n```\n输出格式：\n```\nid,主诉,现病史,辅助检查,既往史,诊断,建议\n```\n根据病例报告生成 CSV 文件并保存为 `病例报告.csv`。其中，每个病例报告的数据项顺序与上述的问诊对话历史一致。\n\n在示例中，我们模拟了一个宝宝 5 个月大，有吐奶的问题，同时伴随着发烧、咳嗽、流鼻涕、拉肚子等症状。根据这些症状，医生进行了详细的询问，并发现宝宝可能出现了消化不良的情况。医生给出了相应的诊疗建议，并建议进行腹部彩超检查以进一步了解宝宝的情况。\n\n在诊疗过程中，我们使用了 `主诉`、`现病史`、`辅助检查`、`既往史`、`诊断`、`建议` 等数据项来记录和描述每个病例的情况，同时也使用了 `id` 项来标识每个病例。最后，我们使用 `to_csv` 函数将每个病例的数据项输出为 CSV 文件，并使用 `pd.to_csv` 函数将 `to_csv` 的数据项设置为 `index=False`，以避免 CSV 文件中出现索引号。"}
{"type": "PromptCBLUE", "question": "实体识别：\nFISH技术已被应用于染色体上的微小缺失，这些微缺失综合征用传统的染色体分析方法不能识别，包括Prader-Willi综合征、Angelman综合征以及Williams综合征等。\n实体类型：医疗程序，疾病，药物，临床表现，身体部位", "reference_answer": "", "predict_answer": "Helper函数可以用于实现多态性。如果定义一个名为printScore的函数，该函数接受两个参数 score 和 player，并打印score对player的比值，则可以使用以下代码调用printScore函数："}
{"type": "PromptCBLUE", "question": "根据给定的实体间的关系，抽取具有这些关系的实体对：\n四、肺隔离症 肺隔离症（pulmonary sequestration）的特征为一部分胚胎性囊性肺组织与正常的肺组织相隔离，其血供来自体循环。两型隔离肺均易并发其他先天性畸形，如膈疝、肠重复畸形、先天性心脏病等。\n实体间关系标签：组织学检查，同义词，病理生理，并发症\n答：", "reference_answer": "", "predict_answer": "Helper Method（辅助方法）：在Python中，我们可以使用辅助方法来简化代码的编写和阅读。在自然语言处理中，我们可以使用Helper Method来抽取文本中的实体对。下面是一个简单的Helper Method示例：\n```python\ndef extract_entities(text):\n    return {\n        'organization': Extractor(text, 'org'),\n        'location': Extractor(text, 'loc'),\n        'contact': Extractor(text, 'con')\n    }\n```\n\n在上述代码中，我们定义了一个`Extractor`类，该类负责对输入的文本进行实体分类（根据实体类型的不同，分别标记为`org`、`loc`和`con`）。然后，我们可以使用如下方式来使用这个Helper Method：\n```python\ntext = \"John Doe is a contact for XYZ Corporation at XYZ Location.\"\nentities = extract_entities(text)\nprint(entities)\n```\n\n输出：\n```\n{'organization': 'John Doe is a contact for XYZ Corporation at XYZ Location.', 'location': 'XYZ Location.', 'contact': 'XYZ Corporation'}\n```\n使用Helper Method可以简化我们对文本中实体对的抽取过程，并且使得代码更加清晰简洁。"}
{"type": "PromptCBLUE", "question": "确定检索词的类型：\n去疾病防控中心体检要钱吗\n类型选项：后果表述，病因分析，指标解读，注意事项，疾病描述，医疗费用，治疗方案，功效作用，病情诊断", "reference_answer": "", "predict_answer": "Helper method\ndef calculate_cost(total_duration):\n    return total_duration * 1000\n\ntotal_duration = 120\nprint(calculate_cost(total_duration))  # 120元\n\n# 注意：\n# - `calculate_cost()`方法中使用了 `* 1000`来将分钟转换为秒，并计算费用。\n# - 在 `calculate_cost()`方法中，输入是 `total_duration`，输出是 `费用`。\n# - `calculate_cost()`方法中使用了 `if`条件来判断是否需要收费，并计算费用。\n# - `calculate_cost()`方法中使用了 `else:`条件来计算不需要收费的情况的费用。\n# - `calculate_cost()`方法中使用了 `print()`函数来输出费用。\n\n# 注意：\n# - `calculate_cost()`方法中使用了 `else:`条件来计算不需要收费的情况的费用。\n# - `calculate_cost()`方法中使用了 `print()`函数来输出费用。\n\n# 注意：\n# - `calculate_cost()`方法中使用了 `if`条件来判断是否需要收费，并计算费用。\n# - `calculate_cost()`方法中使用了 `else:`条件来计算不需要收费的情况的费用。\n# - `calculate_cost()`方法中使用了 `print()`函数来输出费用。"}
{"type": "PromptCBLUE", "question": "请问是什么类型？\n（7）妊娠期妇女\n临床试验筛选标准选项：饮食，居住情况，能力，献血，教育情况，酒精使用，性取向，药物，治疗或手术，种族，怀孕相关", "reference_answer": "", "predict_answer": "Helper函数的参数列表和返回值类型应该与调用它的函数的参数列表和返回值类型相同。如果它们不同，就会出现隐式转换的错误。"}
{"type": "PromptCBLUE", "question": "找出下面问诊语句中的症状，医学检查检验，医疗操作，具体的药物名称，药物类别实体：\n好的，先给你解释一下病情，淋巴细胞比例反应是病毒感染，中性粒细胞比例考虑细菌感染，再参考c反应蛋白情况，可以考虑口服阿莫西林\n答：", "reference_answer": "", "predict_answer": "HelperMethod是一种非侵入性的工具，用于帮助类实现功能。它可以在不修改原类的情况下增加新功能。它们被用于创建新的、更复杂的对象，而不必修改原类。 它的名称来自于其内部使用的反射和包装的方法调用。"}
{"type": "PromptCBLUE", "question": "吃不下饭没胃口怎么办\n这个医疗搜索词是什么意图分类？\n选项：后果表述，病因分析，功效作用，病情诊断，医疗费用，注意事项，治疗方案，指标解读，就医建议，疾病描述\n答：", "reference_answer": "", "predict_answer": "Helper Method - 在其他方法中提供辅助性操作\n例如，在计算方法中提供预处理和格式化等操作\n内部类 - 在其他类中创建内部实现用于保护内部逻辑\n例如，在用户界面创建一个内部类用于存储用户输入\n装饰器 - 在对象上提供额外的功能\n例如，在对象上提供 log 功能\n抽象类 - 创建一个共同的函数基石，使子类能够扩展其功能\n例如，在抽象类中定义计算器的基本功能\n接口 - 定义一组要求的函数，以供其他类使用\n例如，在用户界面上定义接口，以便其他类扩展其功能\n这篇文章详细介绍了每种设计模式，并解释了它们的用途。"}
{"type": "PromptCBLUE", "question": "现在还有其他的不舒服，最好还是去医院，让医生听听宝宝的气管和肺，查个血常规\n这句话是什么意图？\n类型选项：关于用药建议的解答，关于病因的回答，关于注意事项的解答，关于病因的询问，关于就医建议的提问，关于就医建议的解答，关于个人基本信息的回答，关于症状的回答，关于已有检查和治疗的提问，关于症状的询问，关于用药建议的提问，关于注意事项的提问，关于已有检查和治疗的提问，给出诊断\n答：", "reference_answer": "", "predict_answer": "Helper：\n请问，这位宝妈，您现在有什么不舒服的症状？"}
